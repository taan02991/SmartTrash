
SmartTrashSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008e04  08008e04  00018e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e64  08008e64  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008e64  08008e64  00018e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e6c  08008e6c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e6c  08008e6c  00018e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e70  08008e70  00018e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  20000090  08008f04  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  08008f04  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d6c0  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c94  00000000  00000000  0003d780  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001800  00000000  00000000  00041418  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001668  00000000  00000000  00042c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002588c  00000000  00000000  00044280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014c02  00000000  00000000  00069b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d438a  00000000  00000000  0007e70e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152a98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000699c  00000000  00000000  00152b14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008dec 	.word	0x08008dec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008dec 	.word	0x08008dec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f94d 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f808 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f007 faa4 	bl	8007af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x54>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_InitTick+0x58>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f965 	bl	80008a2 <HAL_SYSTICK_Config>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e00e      	b.n	8000600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d80a      	bhi.n	80005fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e8:	2200      	movs	r2, #0
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	f000 f92d 	bl	800084e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_InitTick+0x5c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000028 	.word	0x20000028
 800060c:	20000004 	.word	0x20000004
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x20>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x24>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_IncTick+0x24>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004
 8000638:	200000c0 	.word	0x200000c0

0800063c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return uwTick;
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_GetTick+0x14>)
 8000642:	681b      	ldr	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200000c0 	.word	0x200000c0

08000654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800065c:	f7ff ffee 	bl	800063c <HAL_GetTick>
 8000660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800066c:	d005      	beq.n	800067a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_Delay+0x40>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800067a:	bf00      	nop
 800067c:	f7ff ffde 	bl	800063c <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8f7      	bhi.n	800067c <HAL_Delay+0x28>
  {
  }
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000004 	.word	0x20000004

08000698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ca:	4a04      	ldr	r2, [pc, #16]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	60d3      	str	r3, [r2, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <__NVIC_GetPriorityGrouping+0x18>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	f003 0307 	and.w	r3, r3, #7
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	2b00      	cmp	r3, #0
 800070c:	db0b      	blt.n	8000726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f003 021f 	and.w	r2, r3, #31
 8000714:	4907      	ldr	r1, [pc, #28]	; (8000734 <__NVIC_EnableIRQ+0x38>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	095b      	lsrs	r3, r3, #5
 800071c:	2001      	movs	r0, #1
 800071e:	fa00 f202 	lsl.w	r2, r0, r2
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000804:	d301      	bcc.n	800080a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000806:	2301      	movs	r3, #1
 8000808:	e00f      	b.n	800082a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <SysTick_Config+0x40>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000812:	210f      	movs	r1, #15
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	f7ff ff8e 	bl	8000738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <SysTick_Config+0x40>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <SysTick_Config+0x40>)
 8000824:	2207      	movs	r2, #7
 8000826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	e000e010 	.word	0xe000e010

08000838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff29 	bl	8000698 <__NVIC_SetPriorityGrouping>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000860:	f7ff ff3e 	bl	80006e0 <__NVIC_GetPriorityGrouping>
 8000864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	f7ff ff8e 	bl	800078c <NVIC_EncodePriority>
 8000870:	4602      	mov	r2, r0
 8000872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff5d 	bl	8000738 <__NVIC_SetPriority>
}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff31 	bl	80006fc <__NVIC_EnableIRQ>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffa2 	bl	80007f4 <SysTick_Config>
 80008b0:	4603      	mov	r3, r0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
	...

080008bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008bc:	b480      	push	{r7}
 80008be:	b089      	sub	sp, #36	; 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
 80008d6:	e16b      	b.n	8000bb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008d8:	2201      	movs	r2, #1
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	697a      	ldr	r2, [r7, #20]
 80008e8:	4013      	ands	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	f040 815a 	bne.w	8000baa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d00b      	beq.n	8000916 <HAL_GPIO_Init+0x5a>
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	2b02      	cmp	r3, #2
 8000904:	d007      	beq.n	8000916 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800090a:	2b11      	cmp	r3, #17
 800090c:	d003      	beq.n	8000916 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	2b12      	cmp	r3, #18
 8000914:	d130      	bne.n	8000978 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	2203      	movs	r2, #3
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4013      	ands	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	68da      	ldr	r2, [r3, #12]
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	4313      	orrs	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	69ba      	ldr	r2, [r7, #24]
 8000944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800094c:	2201      	movs	r2, #1
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	69ba      	ldr	r2, [r7, #24]
 8000958:	4013      	ands	r3, r2
 800095a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	091b      	lsrs	r3, r3, #4
 8000962:	f003 0201 	and.w	r2, r3, #1
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	4313      	orrs	r3, r2
 8000970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	2203      	movs	r2, #3
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	43db      	mvns	r3, r3
 800098a:	69ba      	ldr	r2, [r7, #24]
 800098c:	4013      	ands	r3, r2
 800098e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	689a      	ldr	r2, [r3, #8]
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4313      	orrs	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d003      	beq.n	80009b8 <HAL_GPIO_Init+0xfc>
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	2b12      	cmp	r3, #18
 80009b6:	d123      	bne.n	8000a00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	08da      	lsrs	r2, r3, #3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	3208      	adds	r2, #8
 80009c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	f003 0307 	and.w	r3, r3, #7
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	220f      	movs	r2, #15
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	43db      	mvns	r3, r3
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	4013      	ands	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	691a      	ldr	r2, [r3, #16]
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	08da      	lsrs	r2, r3, #3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3208      	adds	r2, #8
 80009fa:	69b9      	ldr	r1, [r7, #24]
 80009fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	4013      	ands	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 0203 	and.w	r2, r3, #3
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f000 80b4 	beq.w	8000baa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	4b5f      	ldr	r3, [pc, #380]	; (8000bc4 <HAL_GPIO_Init+0x308>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a5e      	ldr	r2, [pc, #376]	; (8000bc4 <HAL_GPIO_Init+0x308>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b5c      	ldr	r3, [pc, #368]	; (8000bc4 <HAL_GPIO_Init+0x308>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a5e:	4a5a      	ldr	r2, [pc, #360]	; (8000bc8 <HAL_GPIO_Init+0x30c>)
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	3302      	adds	r3, #2
 8000a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	f003 0303 	and.w	r3, r3, #3
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	220f      	movs	r2, #15
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a51      	ldr	r2, [pc, #324]	; (8000bcc <HAL_GPIO_Init+0x310>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d02b      	beq.n	8000ae2 <HAL_GPIO_Init+0x226>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a50      	ldr	r2, [pc, #320]	; (8000bd0 <HAL_GPIO_Init+0x314>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d025      	beq.n	8000ade <HAL_GPIO_Init+0x222>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a4f      	ldr	r2, [pc, #316]	; (8000bd4 <HAL_GPIO_Init+0x318>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d01f      	beq.n	8000ada <HAL_GPIO_Init+0x21e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a4e      	ldr	r2, [pc, #312]	; (8000bd8 <HAL_GPIO_Init+0x31c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d019      	beq.n	8000ad6 <HAL_GPIO_Init+0x21a>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a4d      	ldr	r2, [pc, #308]	; (8000bdc <HAL_GPIO_Init+0x320>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d013      	beq.n	8000ad2 <HAL_GPIO_Init+0x216>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4a4c      	ldr	r2, [pc, #304]	; (8000be0 <HAL_GPIO_Init+0x324>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d00d      	beq.n	8000ace <HAL_GPIO_Init+0x212>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a4b      	ldr	r2, [pc, #300]	; (8000be4 <HAL_GPIO_Init+0x328>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d007      	beq.n	8000aca <HAL_GPIO_Init+0x20e>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4a4a      	ldr	r2, [pc, #296]	; (8000be8 <HAL_GPIO_Init+0x32c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d101      	bne.n	8000ac6 <HAL_GPIO_Init+0x20a>
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	e00e      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ac6:	2308      	movs	r3, #8
 8000ac8:	e00c      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000aca:	2306      	movs	r3, #6
 8000acc:	e00a      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ace:	2305      	movs	r3, #5
 8000ad0:	e008      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	e004      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ada:	2302      	movs	r3, #2
 8000adc:	e002      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <HAL_GPIO_Init+0x228>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	69fa      	ldr	r2, [r7, #28]
 8000ae6:	f002 0203 	and.w	r2, r2, #3
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	4093      	lsls	r3, r2
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000af4:	4934      	ldr	r1, [pc, #208]	; (8000bc8 <HAL_GPIO_Init+0x30c>)
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	089b      	lsrs	r3, r3, #2
 8000afa:	3302      	adds	r3, #2
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b02:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b26:	4a31      	ldr	r2, [pc, #196]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b2c:	4b2f      	ldr	r3, [pc, #188]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b32:	693b      	ldr	r3, [r7, #16]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b48:	69ba      	ldr	r2, [r7, #24]
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b50:	4a26      	ldr	r2, [pc, #152]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b56:	4b25      	ldr	r3, [pc, #148]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4013      	ands	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d003      	beq.n	8000b7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b72:	69ba      	ldr	r2, [r7, #24]
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b86:	693b      	ldr	r3, [r7, #16]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ba4:	4a11      	ldr	r2, [pc, #68]	; (8000bec <HAL_GPIO_Init+0x330>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3301      	adds	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	2b0f      	cmp	r3, #15
 8000bb4:	f67f ae90 	bls.w	80008d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3724      	adds	r7, #36	; 0x24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40013800 	.word	0x40013800
 8000bcc:	40020000 	.word	0x40020000
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020c00 	.word	0x40020c00
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40021400 	.word	0x40021400
 8000be4:	40021800 	.word	0x40021800
 8000be8:	40021c00 	.word	0x40021c00
 8000bec:	40013c00 	.word	0x40013c00

08000bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	807b      	strh	r3, [r7, #2]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c00:	787b      	ldrb	r3, [r7, #1]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c06:	887a      	ldrh	r2, [r7, #2]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c0c:	e003      	b.n	8000c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c0e:	887b      	ldrh	r3, [r7, #2]
 8000c10:	041a      	lsls	r2, r3, #16
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	619a      	str	r2, [r3, #24]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000c22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c24:	b08f      	sub	sp, #60	; 0x3c
 8000c26:	af0a      	add	r7, sp, #40	; 0x28
 8000c28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d101      	bne.n	8000c34 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e054      	b.n	8000cde <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d106      	bne.n	8000c54 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f007 f9b0 	bl	8007fb4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2203      	movs	r2, #3
 8000c58:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d102      	bne.n	8000c6e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 ffce 	bl	8004c14 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	687e      	ldr	r6, [r7, #4]
 8000c80:	466d      	mov	r5, sp
 8000c82:	f106 0410 	add.w	r4, r6, #16
 8000c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c92:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c96:	1d33      	adds	r3, r6, #4
 8000c98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c9a:	6838      	ldr	r0, [r7, #0]
 8000c9c:	f003 ff48 	bl	8004b30 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f003 ffc5 	bl	8004c36 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	687e      	ldr	r6, [r7, #4]
 8000cb4:	466d      	mov	r5, sp
 8000cb6:	f106 0410 	add.w	r4, r6, #16
 8000cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000cca:	1d33      	adds	r3, r6, #4
 8000ccc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cce:	6838      	ldr	r0, [r7, #0]
 8000cd0:	f004 f8d8 	bl	8004e84 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ce6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000ce6:	b590      	push	{r4, r7, lr}
 8000ce8:	b089      	sub	sp, #36	; 0x24
 8000cea:	af04      	add	r7, sp, #16
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	4608      	mov	r0, r1
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	70fb      	strb	r3, [r7, #3]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70bb      	strb	r3, [r7, #2]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d101      	bne.n	8000d0e <HAL_HCD_HC_Init+0x28>
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	e07f      	b.n	8000e0e <HAL_HCD_HC_Init+0x128>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000d16:	78fa      	ldrb	r2, [r7, #3]
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	440b      	add	r3, r1
 8000d24:	333d      	adds	r3, #61	; 0x3d
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000d2a:	78fa      	ldrb	r2, [r7, #3]
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	440b      	add	r3, r1
 8000d38:	3338      	adds	r3, #56	; 0x38
 8000d3a:	787a      	ldrb	r2, [r7, #1]
 8000d3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000d3e:	78fa      	ldrb	r2, [r7, #3]
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	440b      	add	r3, r1
 8000d4c:	3340      	adds	r3, #64	; 0x40
 8000d4e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d50:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000d52:	78fa      	ldrb	r2, [r7, #3]
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	4613      	mov	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	440b      	add	r3, r1
 8000d60:	3339      	adds	r3, #57	; 0x39
 8000d62:	78fa      	ldrb	r2, [r7, #3]
 8000d64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000d66:	78fa      	ldrb	r2, [r7, #3]
 8000d68:	6879      	ldr	r1, [r7, #4]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	4413      	add	r3, r2
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	440b      	add	r3, r1
 8000d74:	333f      	adds	r3, #63	; 0x3f
 8000d76:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000d7c:	78fa      	ldrb	r2, [r7, #3]
 8000d7e:	78bb      	ldrb	r3, [r7, #2]
 8000d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d84:	b2d8      	uxtb	r0, r3
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	440b      	add	r3, r1
 8000d92:	333a      	adds	r3, #58	; 0x3a
 8000d94:	4602      	mov	r2, r0
 8000d96:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000d98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	da0a      	bge.n	8000db6 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000da0:	78fa      	ldrb	r2, [r7, #3]
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	440b      	add	r3, r1
 8000dae:	333b      	adds	r3, #59	; 0x3b
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	e009      	b.n	8000dca <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000db6:	78fa      	ldrb	r2, [r7, #3]
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	440b      	add	r3, r1
 8000dc4:	333b      	adds	r3, #59	; 0x3b
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000dca:	78fa      	ldrb	r2, [r7, #3]
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	333c      	adds	r3, #60	; 0x3c
 8000dda:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000dde:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6818      	ldr	r0, [r3, #0]
 8000de4:	787c      	ldrb	r4, [r7, #1]
 8000de6:	78ba      	ldrb	r2, [r7, #2]
 8000de8:	78f9      	ldrb	r1, [r7, #3]
 8000dea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000dec:	9302      	str	r3, [sp, #8]
 8000dee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	f004 f9c4 	bl	8005188 <USB_HC_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd90      	pop	{r4, r7, pc}

08000e16 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b084      	sub	sp, #16
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d101      	bne.n	8000e34 <HAL_HCD_HC_Halt+0x1e>
 8000e30:	2302      	movs	r3, #2
 8000e32:	e00f      	b.n	8000e54 <HAL_HCD_HC_Halt+0x3e>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2201      	movs	r2, #1
 8000e38:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	78fa      	ldrb	r2, [r7, #3]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f004 fbfe 	bl	8005646 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	4608      	mov	r0, r1
 8000e66:	4611      	mov	r1, r2
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	70fb      	strb	r3, [r7, #3]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	70bb      	strb	r3, [r7, #2]
 8000e72:	4613      	mov	r3, r2
 8000e74:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000e76:	78fa      	ldrb	r2, [r7, #3]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	440b      	add	r3, r1
 8000e84:	333b      	adds	r3, #59	; 0x3b
 8000e86:	78ba      	ldrb	r2, [r7, #2]
 8000e88:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000e8a:	78fa      	ldrb	r2, [r7, #3]
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	440b      	add	r3, r1
 8000e98:	333f      	adds	r3, #63	; 0x3f
 8000e9a:	787a      	ldrb	r2, [r7, #1]
 8000e9c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000e9e:	7c3b      	ldrb	r3, [r7, #16]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10a      	bne.n	8000eba <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000ea4:	78fa      	ldrb	r2, [r7, #3]
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	440b      	add	r3, r1
 8000eb2:	3342      	adds	r3, #66	; 0x42
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	e009      	b.n	8000ece <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000eba:	78fa      	ldrb	r2, [r7, #3]
 8000ebc:	6879      	ldr	r1, [r7, #4]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3342      	adds	r3, #66	; 0x42
 8000eca:	2202      	movs	r2, #2
 8000ecc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000ece:	787b      	ldrb	r3, [r7, #1]
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	f200 80d6 	bhi.w	8001082 <HAL_HCD_HC_SubmitRequest+0x226>
 8000ed6:	a201      	add	r2, pc, #4	; (adr r2, 8000edc <HAL_HCD_HC_SubmitRequest+0x80>)
 8000ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000edc:	08000eed 	.word	0x08000eed
 8000ee0:	0800106d 	.word	0x0800106d
 8000ee4:	08000f59 	.word	0x08000f59
 8000ee8:	08000fe3 	.word	0x08000fe3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000eec:	7c3b      	ldrb	r3, [r7, #16]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	f040 80c9 	bne.w	8001086 <HAL_HCD_HC_SubmitRequest+0x22a>
 8000ef4:	78bb      	ldrb	r3, [r7, #2]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	f040 80c5 	bne.w	8001086 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000efc:	8b3b      	ldrh	r3, [r7, #24]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d109      	bne.n	8000f16 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000f02:	78fa      	ldrb	r2, [r7, #3]
 8000f04:	6879      	ldr	r1, [r7, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	4413      	add	r3, r2
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	440b      	add	r3, r1
 8000f10:	3351      	adds	r3, #81	; 0x51
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f16:	78fa      	ldrb	r2, [r7, #3]
 8000f18:	6879      	ldr	r1, [r7, #4]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	440b      	add	r3, r1
 8000f24:	3351      	adds	r3, #81	; 0x51
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10a      	bne.n	8000f42 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f2c:	78fa      	ldrb	r2, [r7, #3]
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	440b      	add	r3, r1
 8000f3a:	3342      	adds	r3, #66	; 0x42
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f40:	e0a1      	b.n	8001086 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f42:	78fa      	ldrb	r2, [r7, #3]
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	440b      	add	r3, r1
 8000f50:	3342      	adds	r3, #66	; 0x42
 8000f52:	2202      	movs	r2, #2
 8000f54:	701a      	strb	r2, [r3, #0]
      break;
 8000f56:	e096      	b.n	8001086 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000f58:	78bb      	ldrb	r3, [r7, #2]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d120      	bne.n	8000fa0 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f5e:	78fa      	ldrb	r2, [r7, #3]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3351      	adds	r3, #81	; 0x51
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10a      	bne.n	8000f8a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f74:	78fa      	ldrb	r2, [r7, #3]
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	440b      	add	r3, r1
 8000f82:	3342      	adds	r3, #66	; 0x42
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000f88:	e07e      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	3342      	adds	r3, #66	; 0x42
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	701a      	strb	r2, [r3, #0]
      break;
 8000f9e:	e073      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000fa0:	78fa      	ldrb	r2, [r7, #3]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	3350      	adds	r3, #80	; 0x50
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10a      	bne.n	8000fcc <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fb6:	78fa      	ldrb	r2, [r7, #3]
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3342      	adds	r3, #66	; 0x42
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
      break;
 8000fca:	e05d      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fcc:	78fa      	ldrb	r2, [r7, #3]
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	440b      	add	r3, r1
 8000fda:	3342      	adds	r3, #66	; 0x42
 8000fdc:	2202      	movs	r2, #2
 8000fde:	701a      	strb	r2, [r3, #0]
      break;
 8000fe0:	e052      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000fe2:	78bb      	ldrb	r3, [r7, #2]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d120      	bne.n	800102a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000fe8:	78fa      	ldrb	r2, [r7, #3]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	3351      	adds	r3, #81	; 0x51
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10a      	bne.n	8001014 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ffe:	78fa      	ldrb	r2, [r7, #3]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	440b      	add	r3, r1
 800100c:	3342      	adds	r3, #66	; 0x42
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001012:	e039      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001014:	78fa      	ldrb	r2, [r7, #3]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	440b      	add	r3, r1
 8001022:	3342      	adds	r3, #66	; 0x42
 8001024:	2202      	movs	r2, #2
 8001026:	701a      	strb	r2, [r3, #0]
      break;
 8001028:	e02e      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800102a:	78fa      	ldrb	r2, [r7, #3]
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	440b      	add	r3, r1
 8001038:	3350      	adds	r3, #80	; 0x50
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10a      	bne.n	8001056 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001040:	78fa      	ldrb	r2, [r7, #3]
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	440b      	add	r3, r1
 800104e:	3342      	adds	r3, #66	; 0x42
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
      break;
 8001054:	e018      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001056:	78fa      	ldrb	r2, [r7, #3]
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	4613      	mov	r3, r2
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	4413      	add	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	440b      	add	r3, r1
 8001064:	3342      	adds	r3, #66	; 0x42
 8001066:	2202      	movs	r2, #2
 8001068:	701a      	strb	r2, [r3, #0]
      break;
 800106a:	e00d      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800106c:	78fa      	ldrb	r2, [r7, #3]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	440b      	add	r3, r1
 800107a:	3342      	adds	r3, #66	; 0x42
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
      break;
 8001080:	e002      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001082:	bf00      	nop
 8001084:	e000      	b.n	8001088 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001086:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001088:	78fa      	ldrb	r2, [r7, #3]
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	440b      	add	r3, r1
 8001096:	3344      	adds	r3, #68	; 0x44
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800109c:	78fa      	ldrb	r2, [r7, #3]
 800109e:	8b39      	ldrh	r1, [r7, #24]
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4403      	add	r3, r0
 80010ac:	3348      	adds	r3, #72	; 0x48
 80010ae:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80010b0:	78fa      	ldrb	r2, [r7, #3]
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	440b      	add	r3, r1
 80010be:	335c      	adds	r3, #92	; 0x5c
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80010c4:	78fa      	ldrb	r2, [r7, #3]
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	334c      	adds	r3, #76	; 0x4c
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80010d8:	78fa      	ldrb	r2, [r7, #3]
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	440b      	add	r3, r1
 80010e6:	3339      	adds	r3, #57	; 0x39
 80010e8:	78fa      	ldrb	r2, [r7, #3]
 80010ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80010ec:	78fa      	ldrb	r2, [r7, #3]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	440b      	add	r3, r1
 80010fa:	335d      	adds	r3, #93	; 0x5d
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	78fa      	ldrb	r2, [r7, #3]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	3338      	adds	r3, #56	; 0x38
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	18d1      	adds	r1, r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	f004 f93e 	bl	800539c <USB_HC_StartXfer>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop

0800112c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f003 fe5b 	bl	8004dfe <USB_GetMode>
 8001148:	4603      	mov	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	f040 80f1 	bne.w	8001332 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f003 fe3f 	bl	8004dd8 <USB_ReadInterrupts>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80e7 	beq.w	8001330 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f003 fe36 	bl	8004dd8 <USB_ReadInterrupts>
 800116c:	4603      	mov	r3, r0
 800116e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001176:	d104      	bne.n	8001182 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001180:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f003 fe26 	bl	8004dd8 <USB_ReadInterrupts>
 800118c:	4603      	mov	r3, r0
 800118e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001196:	d104      	bne.n	80011a2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f003 fe16 	bl	8004dd8 <USB_ReadInterrupts>
 80011ac:	4603      	mov	r3, r0
 80011ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80011b6:	d104      	bne.n	80011c2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f003 fe06 	bl	8004dd8 <USB_ReadInterrupts>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d103      	bne.n	80011de <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2202      	movs	r2, #2
 80011dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f003 fdf8 	bl	8004dd8 <USB_ReadInterrupts>
 80011e8:	4603      	mov	r3, r0
 80011ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011f2:	d117      	bne.n	8001224 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001202:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001206:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f006 ff51 	bl	80080b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2101      	movs	r1, #1
 8001214:	4618      	mov	r0, r3
 8001216:	f003 fef1 	bl	8004ffc <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001222:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f003 fdd5 	bl	8004dd8 <USB_ReadInterrupts>
 800122e:	4603      	mov	r3, r0
 8001230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d102      	bne.n	8001240 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f001 f8c8 	bl	80023d0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f003 fdc7 	bl	8004dd8 <USB_ReadInterrupts>
 800124a:	4603      	mov	r3, r0
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b08      	cmp	r3, #8
 8001252:	d106      	bne.n	8001262 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f006 ff0f 	bl	8008078 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2208      	movs	r2, #8
 8001260:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f003 fdb6 	bl	8004dd8 <USB_ReadInterrupts>
 800126c:	4603      	mov	r3, r0
 800126e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001272:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001276:	d138      	bne.n	80012ea <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f004 f9d1 	bl	8005624 <USB_HC_ReadInterrupt>
 8001282:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	e025      	b.n	80012d6 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f003 030f 	and.w	r3, r3, #15
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	fa22 f303 	lsr.w	r3, r2, r3
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d018      	beq.n	80012d0 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	015a      	lsls	r2, r3, #5
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4413      	add	r3, r2
 80012a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012b4:	d106      	bne.n	80012c4 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4619      	mov	r1, r3
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f8cf 	bl	8001460 <HCD_HC_IN_IRQHandler>
 80012c2:	e005      	b.n	80012d0 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4619      	mov	r1, r3
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 fc5f 	bl	8001b8e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3301      	adds	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d3d4      	bcc.n	800128a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 fd72 	bl	8004dd8 <USB_ReadInterrupts>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f003 0310 	and.w	r3, r3, #16
 80012fa:	2b10      	cmp	r3, #16
 80012fc:	d101      	bne.n	8001302 <HAL_HCD_IRQHandler+0x1d6>
 80012fe:	2301      	movs	r3, #1
 8001300:	e000      	b.n	8001304 <HAL_HCD_IRQHandler+0x1d8>
 8001302:	2300      	movs	r3, #0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d014      	beq.n	8001332 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	699a      	ldr	r2, [r3, #24]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0210 	bic.w	r2, r2, #16
 8001316:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 ffad 	bl	8002278 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	699a      	ldr	r2, [r3, #24]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f042 0210 	orr.w	r2, r2, #16
 800132c:	619a      	str	r2, [r3, #24]
 800132e:	e000      	b.n	8001332 <HAL_HCD_IRQHandler+0x206>
      return;
 8001330:	bf00      	nop
    }
  }
}
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001346:	2b01      	cmp	r3, #1
 8001348:	d101      	bne.n	800134e <HAL_HCD_Start+0x16>
 800134a:	2302      	movs	r3, #2
 800134c:	e013      	b.n	8001376 <HAL_HCD_Start+0x3e>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f003 fc49 	bl	8004bf2 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2101      	movs	r1, #1
 8001366:	4618      	mov	r0, r3
 8001368:	f003 feac 	bl	80050c4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_HCD_Stop+0x16>
 8001390:	2302      	movs	r3, #2
 8001392:	e00d      	b.n	80013b0 <HAL_HCD_Stop+0x32>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 fa8b 	bl	80058bc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f003 fe53 	bl	8005070 <USB_ResetPort>
 80013ca:	4603      	mov	r3, r0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80013e0:	78fa      	ldrb	r2, [r7, #3]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	440b      	add	r3, r1
 80013ee:	335c      	adds	r3, #92	; 0x5c
 80013f0:	781b      	ldrb	r3, [r3, #0]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800140a:	78fa      	ldrb	r2, [r7, #3]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	440b      	add	r3, r1
 8001418:	334c      	adds	r3, #76	; 0x4c
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f003 fe95 	bl	8005164 <USB_GetCurrentFrame>
 800143a:	4603      	mov	r3, r0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f003 fe70 	bl	8005136 <USB_GetHostSpeed>
 8001456:	4603      	mov	r3, r0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	015a      	lsls	r2, r3, #5
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4413      	add	r3, r2
 8001482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b04      	cmp	r3, #4
 800148e:	d119      	bne.n	80014c4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	015a      	lsls	r2, r3, #5
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4413      	add	r3, r2
 8001498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800149c:	461a      	mov	r2, r3
 800149e:	2304      	movs	r3, #4
 80014a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	015a      	lsls	r2, r3, #5
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4413      	add	r3, r2
 80014aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	0151      	lsls	r1, r2, #5
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	440a      	add	r2, r1
 80014b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	60d3      	str	r3, [r2, #12]
 80014c2:	e095      	b.n	80015f0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	015a      	lsls	r2, r3, #5
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4413      	add	r3, r2
 80014cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 0320 	and.w	r3, r3, #32
 80014d6:	2b20      	cmp	r3, #32
 80014d8:	d109      	bne.n	80014ee <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	015a      	lsls	r2, r3, #5
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4413      	add	r3, r2
 80014e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014e6:	461a      	mov	r2, r3
 80014e8:	2320      	movs	r3, #32
 80014ea:	6093      	str	r3, [r2, #8]
 80014ec:	e080      	b.n	80015f0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	015a      	lsls	r2, r3, #5
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4413      	add	r3, r2
 80014f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b08      	cmp	r3, #8
 8001502:	d134      	bne.n	800156e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	015a      	lsls	r2, r3, #5
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4413      	add	r3, r2
 800150c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	0151      	lsls	r1, r2, #5
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	440a      	add	r2, r1
 800151a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	440b      	add	r3, r1
 8001532:	335d      	adds	r3, #93	; 0x5d
 8001534:	2205      	movs	r2, #5
 8001536:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	015a      	lsls	r2, r3, #5
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4413      	add	r3, r2
 8001540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001544:	461a      	mov	r2, r3
 8001546:	2310      	movs	r3, #16
 8001548:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	015a      	lsls	r2, r3, #5
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4413      	add	r3, r2
 8001552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001556:	461a      	mov	r2, r3
 8001558:	2308      	movs	r3, #8
 800155a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f004 f86d 	bl	8005646 <USB_HC_Halt>
 800156c:	e040      	b.n	80015f0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	015a      	lsls	r2, r3, #5
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4413      	add	r3, r2
 8001576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001584:	d134      	bne.n	80015f0 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	015a      	lsls	r2, r3, #5
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	4413      	add	r3, r2
 800158e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	0151      	lsls	r1, r2, #5
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	440a      	add	r2, r1
 800159c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	b2d2      	uxtb	r2, r2
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f004 f848 	bl	8005646 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	015a      	lsls	r2, r3, #5
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4413      	add	r3, r2
 80015be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015c2:	461a      	mov	r2, r3
 80015c4:	2310      	movs	r3, #16
 80015c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	335d      	adds	r3, #93	; 0x5d
 80015d8:	2208      	movs	r2, #8
 80015da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	015a      	lsls	r2, r3, #5
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e8:	461a      	mov	r2, r3
 80015ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ee:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	015a      	lsls	r2, r3, #5
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4413      	add	r3, r2
 80015f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001606:	d122      	bne.n	800164e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	015a      	lsls	r2, r3, #5
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4413      	add	r3, r2
 8001610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	0151      	lsls	r1, r2, #5
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	440a      	add	r2, r1
 800161e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001622:	f043 0302 	orr.w	r3, r3, #2
 8001626:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	4611      	mov	r1, r2
 8001632:	4618      	mov	r0, r3
 8001634:	f004 f807 	bl	8005646 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	015a      	lsls	r2, r3, #5
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4413      	add	r3, r2
 8001640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001644:	461a      	mov	r2, r3
 8001646:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800164c:	e29b      	b.n	8001b86 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	015a      	lsls	r2, r3, #5
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4413      	add	r3, r2
 8001656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b01      	cmp	r3, #1
 8001662:	f040 80c1 	bne.w	80017e8 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d01b      	beq.n	80016a6 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	68fa      	ldr	r2, [r7, #12]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	3348      	adds	r3, #72	; 0x48
 800167e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	0159      	lsls	r1, r3, #5
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	440b      	add	r3, r1
 8001688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001692:	1ad1      	subs	r1, r2, r3
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4403      	add	r3, r0
 80016a2:	334c      	adds	r3, #76	; 0x4c
 80016a4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	335d      	adds	r3, #93	; 0x5d
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	440b      	add	r3, r1
 80016c8:	3358      	adds	r3, #88	; 0x58
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	015a      	lsls	r2, r3, #5
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4413      	add	r3, r2
 80016d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016da:	461a      	mov	r2, r3
 80016dc:	2301      	movs	r3, #1
 80016de:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	440b      	add	r3, r1
 80016ee:	333f      	adds	r3, #63	; 0x3f
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00a      	beq.n	800170c <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	333f      	adds	r3, #63	; 0x3f
 8001706:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001708:	2b02      	cmp	r3, #2
 800170a:	d121      	bne.n	8001750 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	015a      	lsls	r2, r3, #5
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4413      	add	r3, r2
 8001714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	0151      	lsls	r1, r2, #5
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	440a      	add	r2, r1
 8001722:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001726:	f043 0302 	orr.w	r3, r3, #2
 800172a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f003 ff85 	bl	8005646 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	015a      	lsls	r2, r3, #5
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4413      	add	r3, r2
 8001744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001748:	461a      	mov	r2, r3
 800174a:	2310      	movs	r3, #16
 800174c:	6093      	str	r3, [r2, #8]
 800174e:	e034      	b.n	80017ba <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	333f      	adds	r3, #63	; 0x3f
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b03      	cmp	r3, #3
 8001764:	d129      	bne.n	80017ba <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	015a      	lsls	r2, r3, #5
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4413      	add	r3, r2
 800176e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	0151      	lsls	r1, r2, #5
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	440a      	add	r2, r1
 800177c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001780:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001784:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	440b      	add	r3, r1
 8001794:	335c      	adds	r3, #92	; 0x5c
 8001796:	2201      	movs	r2, #1
 8001798:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	b2d8      	uxtb	r0, r3
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4613      	mov	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	4413      	add	r3, r2
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	440b      	add	r3, r1
 80017ac:	335c      	adds	r3, #92	; 0x5c
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4601      	mov	r1, r0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f006 fc89 	bl	80080cc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	3350      	adds	r3, #80	; 0x50
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	f083 0301 	eor.w	r3, r3, #1
 80017d0:	b2d8      	uxtb	r0, r3
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	440b      	add	r3, r1
 80017e0:	3350      	adds	r3, #80	; 0x50
 80017e2:	4602      	mov	r2, r0
 80017e4:	701a      	strb	r2, [r3, #0]
}
 80017e6:	e1ce      	b.n	8001b86 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	015a      	lsls	r2, r3, #5
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	3350      	adds	r3, #80	; 0x50
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	f083 0301 	eor.w	r3, r3, #1
 80017d0:	b2d8      	uxtb	r0, r3
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	440b      	add	r3, r1
 80017e0:	3350      	adds	r3, #80	; 0x50
 80017e2:	4602      	mov	r2, r0
 80017e4:	701a      	strb	r2, [r3, #0]
}
 80017e6:	e1ce      	b.n	8001b86 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	015a      	lsls	r2, r3, #5
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4413      	add	r3, r2
 80017f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	f040 80f1 	bne.w	80019e2 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	015a      	lsls	r2, r3, #5
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4413      	add	r3, r2
 8001808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	0151      	lsls	r1, r2, #5
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	440a      	add	r2, r1
 8001816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800181a:	f023 0302 	bic.w	r3, r3, #2
 800181e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	440b      	add	r3, r1
 800182e:	335d      	adds	r3, #93	; 0x5d
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d10a      	bne.n	800184c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	335c      	adds	r3, #92	; 0x5c
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	e0b0      	b.n	80019ae <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	335d      	adds	r3, #93	; 0x5d
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b05      	cmp	r3, #5
 8001860:	d10a      	bne.n	8001878 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4613      	mov	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	440b      	add	r3, r1
 8001870:	335c      	adds	r3, #92	; 0x5c
 8001872:	2205      	movs	r2, #5
 8001874:	701a      	strb	r2, [r3, #0]
 8001876:	e09a      	b.n	80019ae <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	335d      	adds	r3, #93	; 0x5d
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b06      	cmp	r3, #6
 800188c:	d00a      	beq.n	80018a4 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	335d      	adds	r3, #93	; 0x5d
 800189e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d156      	bne.n	8001952 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	3358      	adds	r3, #88	; 0x58
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	1c59      	adds	r1, r3, #1
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	68fa      	ldr	r2, [r7, #12]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4403      	add	r3, r0
 80018c6:	3358      	adds	r3, #88	; 0x58
 80018c8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	440b      	add	r3, r1
 80018d8:	3358      	adds	r3, #88	; 0x58
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d914      	bls.n	800190a <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	3358      	adds	r3, #88	; 0x58
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	440b      	add	r3, r1
 8001902:	335c      	adds	r3, #92	; 0x5c
 8001904:	2204      	movs	r2, #4
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	e009      	b.n	800191e <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	335c      	adds	r3, #92	; 0x5c
 800191a:	2202      	movs	r2, #2
 800191c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	015a      	lsls	r2, r3, #5
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4413      	add	r3, r2
 8001926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001934:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800193c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	015a      	lsls	r2, r3, #5
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4413      	add	r3, r2
 8001946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800194a:	461a      	mov	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	e02d      	b.n	80019ae <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	335d      	adds	r3, #93	; 0x5d
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d122      	bne.n	80019ae <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	335c      	adds	r3, #92	; 0x5c
 8001978:	2202      	movs	r2, #2
 800197a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	015a      	lsls	r2, r3, #5
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4413      	add	r3, r2
 8001984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001992:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800199a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	015a      	lsls	r2, r3, #5
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4413      	add	r3, r2
 80019a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a8:	461a      	mov	r2, r3
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	015a      	lsls	r2, r3, #5
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4413      	add	r3, r2
 80019b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ba:	461a      	mov	r2, r3
 80019bc:	2302      	movs	r3, #2
 80019be:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	b2d8      	uxtb	r0, r3
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	440b      	add	r3, r1
 80019d2:	335c      	adds	r3, #92	; 0x5c
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	4601      	mov	r1, r0
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f006 fb76 	bl	80080cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80019e0:	e0d1      	b.n	8001b86 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	015a      	lsls	r2, r3, #5
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019f4:	2b80      	cmp	r3, #128	; 0x80
 80019f6:	d13e      	bne.n	8001a76 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	015a      	lsls	r2, r3, #5
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4413      	add	r3, r2
 8001a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	0151      	lsls	r1, r2, #5
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	440a      	add	r2, r1
 8001a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	3358      	adds	r3, #88	; 0x58
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	1c59      	adds	r1, r3, #1
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	4613      	mov	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4403      	add	r3, r0
 8001a3a:	3358      	adds	r3, #88	; 0x58
 8001a3c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	335d      	adds	r3, #93	; 0x5d
 8001a4e:	2206      	movs	r2, #6
 8001a50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 fdf2 	bl	8005646 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	015a      	lsls	r2, r3, #5
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4413      	add	r3, r2
 8001a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	6093      	str	r3, [r2, #8]
}
 8001a74:	e087      	b.n	8001b86 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	015a      	lsls	r2, r3, #5
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 0310 	and.w	r3, r3, #16
 8001a88:	2b10      	cmp	r3, #16
 8001a8a:	d17c      	bne.n	8001b86 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	440b      	add	r3, r1
 8001a9a:	333f      	adds	r3, #63	; 0x3f
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d122      	bne.n	8001ae8 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	440b      	add	r3, r1
 8001ab0:	3358      	adds	r3, #88	; 0x58
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	015a      	lsls	r2, r3, #5
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4413      	add	r3, r2
 8001abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	0151      	lsls	r1, r2, #5
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	440a      	add	r2, r1
 8001acc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f003 fdb0 	bl	8005646 <USB_HC_Halt>
 8001ae6:	e045      	b.n	8001b74 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	440b      	add	r3, r1
 8001af6:	333f      	adds	r3, #63	; 0x3f
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00a      	beq.n	8001b14 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	440b      	add	r3, r1
 8001b0c:	333f      	adds	r3, #63	; 0x3f
 8001b0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d12f      	bne.n	8001b74 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	440b      	add	r3, r1
 8001b22:	3358      	adds	r3, #88	; 0x58
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d121      	bne.n	8001b74 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	440b      	add	r3, r1
 8001b3e:	335d      	adds	r3, #93	; 0x5d
 8001b40:	2203      	movs	r2, #3
 8001b42:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	015a      	lsls	r2, r3, #5
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	0151      	lsls	r1, r2, #5
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	440a      	add	r2, r1
 8001b5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b5e:	f043 0302 	orr.w	r3, r3, #2
 8001b62:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 fd69 	bl	8005646 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	015a      	lsls	r2, r3, #5
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b80:	461a      	mov	r2, r3
 8001b82:	2310      	movs	r3, #16
 8001b84:	6093      	str	r3, [r2, #8]
}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b086      	sub	sp, #24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	460b      	mov	r3, r1
 8001b98:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	015a      	lsls	r2, r3, #5
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4413      	add	r3, r2
 8001bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d119      	bne.n	8001bf2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	015a      	lsls	r2, r3, #5
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bca:	461a      	mov	r2, r3
 8001bcc:	2304      	movs	r3, #4
 8001bce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	015a      	lsls	r2, r3, #5
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	0151      	lsls	r1, r2, #5
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	440a      	add	r2, r1
 8001be6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001bf0:	e33e      	b.n	8002270 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	015a      	lsls	r2, r3, #5
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0320 	and.w	r3, r3, #32
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d141      	bne.n	8001c8c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	015a      	lsls	r2, r3, #5
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c14:	461a      	mov	r2, r3
 8001c16:	2320      	movs	r3, #32
 8001c18:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	440b      	add	r3, r1
 8001c28:	333d      	adds	r3, #61	; 0x3d
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	f040 831f 	bne.w	8002270 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	440b      	add	r3, r1
 8001c40:	333d      	adds	r3, #61	; 0x3d
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	440b      	add	r3, r1
 8001c54:	335c      	adds	r3, #92	; 0x5c
 8001c56:	2202      	movs	r2, #2
 8001c58:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	015a      	lsls	r2, r3, #5
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	0151      	lsls	r1, r2, #5
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	440a      	add	r2, r1
 8001c70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	4611      	mov	r1, r2
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 fcde 	bl	8005646 <USB_HC_Halt>
}
 8001c8a:	e2f1      	b.n	8002270 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	015a      	lsls	r2, r3, #5
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c9e:	2b40      	cmp	r3, #64	; 0x40
 8001ca0:	d13f      	bne.n	8001d22 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	335d      	adds	r3, #93	; 0x5d
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	440b      	add	r3, r1
 8001cc4:	333d      	adds	r3, #61	; 0x3d
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3358      	adds	r3, #88	; 0x58
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	015a      	lsls	r2, r3, #5
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	0151      	lsls	r1, r2, #5
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	440a      	add	r2, r1
 8001cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fc9c 	bl	8005646 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	015a      	lsls	r2, r3, #5
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	2340      	movs	r3, #64	; 0x40
 8001d1e:	6093      	str	r3, [r2, #8]
}
 8001d20:	e2a6      	b.n	8002270 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	015a      	lsls	r2, r3, #5
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d38:	d122      	bne.n	8001d80 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	015a      	lsls	r2, r3, #5
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4413      	add	r3, r2
 8001d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	0151      	lsls	r1, r2, #5
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	440a      	add	r2, r1
 8001d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f003 fc6e 	bl	8005646 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	015a      	lsls	r2, r3, #5
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4413      	add	r3, r2
 8001d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d76:	461a      	mov	r2, r3
 8001d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d7c:	6093      	str	r3, [r2, #8]
}
 8001d7e:	e277      	b.n	8002270 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d135      	bne.n	8001e02 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	440b      	add	r3, r1
 8001da4:	3358      	adds	r3, #88	; 0x58
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	0151      	lsls	r1, r2, #5
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	440a      	add	r2, r1
 8001dc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 fc36 	bl	8005646 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	015a      	lsls	r2, r3, #5
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4413      	add	r3, r2
 8001de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de6:	461a      	mov	r2, r3
 8001de8:	2301      	movs	r3, #1
 8001dea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	440b      	add	r3, r1
 8001dfa:	335d      	adds	r3, #93	; 0x5d
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
}
 8001e00:	e236      	b.n	8002270 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d12b      	bne.n	8001e70 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	015a      	lsls	r2, r3, #5
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e24:	461a      	mov	r2, r3
 8001e26:	2308      	movs	r3, #8
 8001e28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	015a      	lsls	r2, r3, #5
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4413      	add	r3, r2
 8001e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	0151      	lsls	r1, r2, #5
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	440a      	add	r2, r1
 8001e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 fbf6 	bl	8005646 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	440b      	add	r3, r1
 8001e68:	335d      	adds	r3, #93	; 0x5d
 8001e6a:	2205      	movs	r2, #5
 8001e6c:	701a      	strb	r2, [r3, #0]
}
 8001e6e:	e1ff      	b.n	8002270 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b10      	cmp	r3, #16
 8001e84:	d155      	bne.n	8001f32 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	440b      	add	r3, r1
 8001e94:	3358      	adds	r3, #88	; 0x58
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	440b      	add	r3, r1
 8001ea8:	335d      	adds	r3, #93	; 0x5d
 8001eaa:	2203      	movs	r2, #3
 8001eac:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	333d      	adds	r3, #61	; 0x3d
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d114      	bne.n	8001eee <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	440b      	add	r3, r1
 8001ed2:	333c      	adds	r3, #60	; 0x3c
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	333d      	adds	r3, #61	; 0x3d
 8001eea:	2201      	movs	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	015a      	lsls	r2, r3, #5
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	0151      	lsls	r1, r2, #5
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	440a      	add	r2, r1
 8001f04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f003 fb94 	bl	8005646 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	2310      	movs	r3, #16
 8001f2e:	6093      	str	r3, [r2, #8]
}
 8001f30:	e19e      	b.n	8002270 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f44:	2b80      	cmp	r3, #128	; 0x80
 8001f46:	d12b      	bne.n	8001fa0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	0151      	lsls	r1, r2, #5
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	440a      	add	r2, r1
 8001f5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f62:	f043 0302 	orr.w	r3, r3, #2
 8001f66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 fb67 	bl	8005646 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	440b      	add	r3, r1
 8001f86:	335d      	adds	r3, #93	; 0x5d
 8001f88:	2206      	movs	r2, #6
 8001f8a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2380      	movs	r3, #128	; 0x80
 8001f9c:	6093      	str	r3, [r2, #8]
}
 8001f9e:	e167      	b.n	8002270 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb6:	d135      	bne.n	8002024 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	0151      	lsls	r1, r2, #5
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	440a      	add	r2, r1
 8001fce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fd2:	f043 0302 	orr.w	r3, r3, #2
 8001fd6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f003 fb2f 	bl	8005646 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	015a      	lsls	r2, r3, #5
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4413      	add	r3, r2
 8001ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2310      	movs	r3, #16
 8001ff8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4413      	add	r3, r2
 8002002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002006:	461a      	mov	r2, r3
 8002008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800200c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	440b      	add	r3, r1
 800201c:	335d      	adds	r3, #93	; 0x5d
 800201e:	2208      	movs	r2, #8
 8002020:	701a      	strb	r2, [r3, #0]
}
 8002022:	e125      	b.n	8002270 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4413      	add	r3, r2
 800202c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b02      	cmp	r3, #2
 8002038:	f040 811a 	bne.w	8002270 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4413      	add	r3, r2
 8002044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	0151      	lsls	r1, r2, #5
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	440a      	add	r2, r1
 8002052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002056:	f023 0302 	bic.w	r3, r3, #2
 800205a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	335d      	adds	r3, #93	; 0x5d
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d137      	bne.n	80020e2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	335c      	adds	r3, #92	; 0x5c
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	440b      	add	r3, r1
 8002094:	333f      	adds	r3, #63	; 0x3f
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d00b      	beq.n	80020b4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	440b      	add	r3, r1
 80020aa:	333f      	adds	r3, #63	; 0x3f
 80020ac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	f040 80c5 	bne.w	800223e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	440b      	add	r3, r1
 80020c2:	3351      	adds	r3, #81	; 0x51
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	f083 0301 	eor.w	r3, r3, #1
 80020ca:	b2d8      	uxtb	r0, r3
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	440b      	add	r3, r1
 80020da:	3351      	adds	r3, #81	; 0x51
 80020dc:	4602      	mov	r2, r0
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	e0ad      	b.n	800223e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	440b      	add	r3, r1
 80020f0:	335d      	adds	r3, #93	; 0x5d
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d10a      	bne.n	800210e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	440b      	add	r3, r1
 8002106:	335c      	adds	r3, #92	; 0x5c
 8002108:	2202      	movs	r2, #2
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	e097      	b.n	800223e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	440b      	add	r3, r1
 800211c:	335d      	adds	r3, #93	; 0x5d
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b04      	cmp	r3, #4
 8002122:	d10a      	bne.n	800213a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	440b      	add	r3, r1
 8002132:	335c      	adds	r3, #92	; 0x5c
 8002134:	2202      	movs	r2, #2
 8002136:	701a      	strb	r2, [r3, #0]
 8002138:	e081      	b.n	800223e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	440b      	add	r3, r1
 8002148:	335d      	adds	r3, #93	; 0x5d
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b05      	cmp	r3, #5
 800214e:	d10a      	bne.n	8002166 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	440b      	add	r3, r1
 800215e:	335c      	adds	r3, #92	; 0x5c
 8002160:	2205      	movs	r2, #5
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	e06b      	b.n	800223e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	335d      	adds	r3, #93	; 0x5d
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b06      	cmp	r3, #6
 800217a:	d00a      	beq.n	8002192 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	440b      	add	r3, r1
 800218a:	335d      	adds	r3, #93	; 0x5d
 800218c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800218e:	2b08      	cmp	r3, #8
 8002190:	d155      	bne.n	800223e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	440b      	add	r3, r1
 80021a0:	3358      	adds	r3, #88	; 0x58
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	1c59      	adds	r1, r3, #1
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4403      	add	r3, r0
 80021b4:	3358      	adds	r3, #88	; 0x58
 80021b6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	3358      	adds	r3, #88	; 0x58
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d914      	bls.n	80021f8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	440b      	add	r3, r1
 80021dc:	3358      	adds	r3, #88	; 0x58
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	440b      	add	r3, r1
 80021f0:	335c      	adds	r3, #92	; 0x5c
 80021f2:	2204      	movs	r2, #4
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	e009      	b.n	800220c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	335c      	adds	r3, #92	; 0x5c
 8002208:	2202      	movs	r2, #2
 800220a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002222:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800222a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4413      	add	r3, r2
 8002234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002238:	461a      	mov	r2, r3
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4413      	add	r3, r2
 8002246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224a:	461a      	mov	r2, r3
 800224c:	2302      	movs	r3, #2
 800224e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	b2d8      	uxtb	r0, r3
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	335c      	adds	r3, #92	; 0x5c
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	4601      	mov	r1, r0
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f005 ff2e 	bl	80080cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002270:	bf00      	nop
 8002272:	3718      	adds	r7, #24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	0c5b      	lsrs	r3, r3, #17
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ac:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d003      	beq.n	80022bc <HCD_RXQLVL_IRQHandler+0x44>
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	f000 8082 	beq.w	80023be <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80022ba:	e083      	b.n	80023c4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d07f      	beq.n	80023c2 <HCD_RXQLVL_IRQHandler+0x14a>
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	3344      	adds	r3, #68	; 0x44
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d074      	beq.n	80023c2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6818      	ldr	r0, [r3, #0]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	440b      	add	r3, r1
 80022ea:	3344      	adds	r3, #68	; 0x44
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	b292      	uxth	r2, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	f002 fd47 	bl	8004d86 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	440b      	add	r3, r1
 8002306:	3344      	adds	r3, #68	; 0x44
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	18d1      	adds	r1, r2, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4403      	add	r3, r0
 800231c:	3344      	adds	r3, #68	; 0x44
 800231e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	334c      	adds	r3, #76	; 0x4c
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	18d1      	adds	r1, r2, r3
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4403      	add	r3, r0
 8002344:	334c      	adds	r3, #76	; 0x4c
 8002346:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	015a      	lsls	r2, r3, #5
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	4413      	add	r3, r2
 8002350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002354:	691a      	ldr	r2, [r3, #16]
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HCD_RXQLVL_IRQHandler+0x154>)
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d031      	beq.n	80023c2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	4413      	add	r3, r2
 8002366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002374:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800237c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	4413      	add	r3, r2
 8002386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	440b      	add	r3, r1
 800239e:	3350      	adds	r3, #80	; 0x50
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	f083 0301 	eor.w	r3, r3, #1
 80023a6:	b2d8      	uxtb	r0, r3
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	440b      	add	r3, r1
 80023b6:	3350      	adds	r3, #80	; 0x50
 80023b8:	4602      	mov	r2, r0
 80023ba:	701a      	strb	r2, [r3, #0]
      break;
 80023bc:	e001      	b.n	80023c2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80023be:	bf00      	nop
 80023c0:	e000      	b.n	80023c4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80023c2:	bf00      	nop
  }
}
 80023c4:	bf00      	nop
 80023c6:	3728      	adds	r7, #40	; 0x28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	1ff80000 	.word	0x1ff80000

080023d0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80023fc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b02      	cmp	r3, #2
 8002406:	d113      	bne.n	8002430 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b01      	cmp	r3, #1
 8002410:	d10a      	bne.n	8002428 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699a      	ldr	r2, [r3, #24]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002420:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f005 fe36 	bl	8008094 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f043 0302 	orr.w	r3, r3, #2
 800242e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b08      	cmp	r3, #8
 8002438:	d147      	bne.n	80024ca <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f043 0308 	orr.w	r3, r3, #8
 8002440:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b04      	cmp	r3, #4
 800244a:	d129      	bne.n	80024a0 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d113      	bne.n	800247c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800245a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800245e:	d106      	bne.n	800246e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2102      	movs	r1, #2
 8002466:	4618      	mov	r0, r3
 8002468:	f002 fdc8 	bl	8004ffc <USB_InitFSLSPClkSel>
 800246c:	e011      	b.n	8002492 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2101      	movs	r1, #1
 8002474:	4618      	mov	r0, r3
 8002476:	f002 fdc1 	bl	8004ffc <USB_InitFSLSPClkSel>
 800247a:	e00a      	b.n	8002492 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d106      	bne.n	8002492 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800248a:	461a      	mov	r2, r3
 800248c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002490:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f005 fe28 	bl	80080e8 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f005 fdfb 	bl	8008094 <HAL_HCD_Connect_Callback>
 800249e:	e014      	b.n	80024ca <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f005 fe2f 	bl	8008104 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80024b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80024b8:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699a      	ldr	r2, [r3, #24]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80024c8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f003 0320 	and.w	r3, r3, #32
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d103      	bne.n	80024dc <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f043 0320 	orr.w	r3, r3, #32
 80024da:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80024e2:	461a      	mov	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e11f      	b.n	8002742 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d106      	bne.n	800251c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f005 fb12 	bl	8007b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2224      	movs	r2, #36	; 0x24
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0201 	bic.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002542:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002552:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002554:	f001 f9de 	bl	8003914 <HAL_RCC_GetPCLK1Freq>
 8002558:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4a7b      	ldr	r2, [pc, #492]	; (800274c <HAL_I2C_Init+0x25c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d807      	bhi.n	8002574 <HAL_I2C_Init+0x84>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4a7a      	ldr	r2, [pc, #488]	; (8002750 <HAL_I2C_Init+0x260>)
 8002568:	4293      	cmp	r3, r2
 800256a:	bf94      	ite	ls
 800256c:	2301      	movls	r3, #1
 800256e:	2300      	movhi	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	e006      	b.n	8002582 <HAL_I2C_Init+0x92>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4a77      	ldr	r2, [pc, #476]	; (8002754 <HAL_I2C_Init+0x264>)
 8002578:	4293      	cmp	r3, r2
 800257a:	bf94      	ite	ls
 800257c:	2301      	movls	r3, #1
 800257e:	2300      	movhi	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e0db      	b.n	8002742 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4a72      	ldr	r2, [pc, #456]	; (8002758 <HAL_I2C_Init+0x268>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	0c9b      	lsrs	r3, r3, #18
 8002594:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	4a64      	ldr	r2, [pc, #400]	; (800274c <HAL_I2C_Init+0x25c>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d802      	bhi.n	80025c4 <HAL_I2C_Init+0xd4>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	3301      	adds	r3, #1
 80025c2:	e009      	b.n	80025d8 <HAL_I2C_Init+0xe8>
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025ca:	fb02 f303 	mul.w	r3, r2, r3
 80025ce:	4a63      	ldr	r2, [pc, #396]	; (800275c <HAL_I2C_Init+0x26c>)
 80025d0:	fba2 2303 	umull	r2, r3, r2, r3
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	3301      	adds	r3, #1
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	430b      	orrs	r3, r1
 80025de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4956      	ldr	r1, [pc, #344]	; (800274c <HAL_I2C_Init+0x25c>)
 80025f4:	428b      	cmp	r3, r1
 80025f6:	d80d      	bhi.n	8002614 <HAL_I2C_Init+0x124>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1e59      	subs	r1, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	fbb1 f3f3 	udiv	r3, r1, r3
 8002606:	3301      	adds	r3, #1
 8002608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260c:	2b04      	cmp	r3, #4
 800260e:	bf38      	it	cc
 8002610:	2304      	movcc	r3, #4
 8002612:	e04f      	b.n	80026b4 <HAL_I2C_Init+0x1c4>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d111      	bne.n	8002640 <HAL_I2C_Init+0x150>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1e58      	subs	r0, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6859      	ldr	r1, [r3, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	440b      	add	r3, r1
 800262a:	fbb0 f3f3 	udiv	r3, r0, r3
 800262e:	3301      	adds	r3, #1
 8002630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e012      	b.n	8002666 <HAL_I2C_Init+0x176>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1e58      	subs	r0, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	0099      	lsls	r1, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	fbb0 f3f3 	udiv	r3, r0, r3
 8002656:	3301      	adds	r3, #1
 8002658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_I2C_Init+0x17e>
 800266a:	2301      	movs	r3, #1
 800266c:	e022      	b.n	80026b4 <HAL_I2C_Init+0x1c4>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10e      	bne.n	8002694 <HAL_I2C_Init+0x1a4>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1e58      	subs	r0, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	440b      	add	r3, r1
 8002684:	fbb0 f3f3 	udiv	r3, r0, r3
 8002688:	3301      	adds	r3, #1
 800268a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002692:	e00f      	b.n	80026b4 <HAL_I2C_Init+0x1c4>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	1e58      	subs	r0, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	0099      	lsls	r1, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026aa:	3301      	adds	r3, #1
 80026ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	6809      	ldr	r1, [r1, #0]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69da      	ldr	r2, [r3, #28]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6911      	ldr	r1, [r2, #16]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68d2      	ldr	r2, [r2, #12]
 80026ee:	4311      	orrs	r1, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	430b      	orrs	r3, r1
 80026f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	000186a0 	.word	0x000186a0
 8002750:	001e847f 	.word	0x001e847f
 8002754:	003d08ff 	.word	0x003d08ff
 8002758:	431bde83 	.word	0x431bde83
 800275c:	10624dd3 	.word	0x10624dd3

08002760 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e128      	b.n	80029c4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a90      	ldr	r2, [pc, #576]	; (80029cc <HAL_I2S_Init+0x26c>)
 800278a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f005 fa1f 	bl	8007bd0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2202      	movs	r2, #2
 8002796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80027a8:	f023 030f 	bic.w	r3, r3, #15
 80027ac:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2202      	movs	r2, #2
 80027b4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d060      	beq.n	8002880 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d102      	bne.n	80027cc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80027c6:	2310      	movs	r3, #16
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	e001      	b.n	80027d0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80027cc:	2320      	movs	r3, #32
 80027ce:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b20      	cmp	r3, #32
 80027d6:	d802      	bhi.n	80027de <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80027de:	2001      	movs	r0, #1
 80027e0:	f001 f9a2 	bl	8003b28 <HAL_RCCEx_GetPeriphCLKFreq>
 80027e4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ee:	d125      	bne.n	800283c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d010      	beq.n	800281a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	461a      	mov	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	fbb2 f3f3 	udiv	r3, r2, r3
 8002814:	3305      	adds	r3, #5
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	e01f      	b.n	800285a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	fbb2 f2f3 	udiv	r2, r2, r3
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	461a      	mov	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	fbb2 f3f3 	udiv	r3, r2, r3
 8002836:	3305      	adds	r3, #5
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	e00e      	b.n	800285a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	fbb2 f2f3 	udiv	r2, r2, r3
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	461a      	mov	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	3305      	adds	r3, #5
 8002858:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4a5c      	ldr	r2, [pc, #368]	; (80029d0 <HAL_I2S_Init+0x270>)
 800285e:	fba2 2303 	umull	r2, r3, r2, r3
 8002862:	08db      	lsrs	r3, r3, #3
 8002864:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	61bb      	str	r3, [r7, #24]
 800287e:	e003      	b.n	8002888 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002880:	2302      	movs	r3, #2
 8002882:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d902      	bls.n	8002894 <HAL_I2S_Init+0x134>
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	2bff      	cmp	r3, #255	; 0xff
 8002892:	d907      	bls.n	80028a4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002898:	f043 0210 	orr.w	r2, r3, #16
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e08f      	b.n	80029c4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	ea42 0103 	orr.w	r1, r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	69fa      	ldr	r2, [r7, #28]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028c2:	f023 030f 	bic.w	r3, r3, #15
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6851      	ldr	r1, [r2, #4]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6892      	ldr	r2, [r2, #8]
 80028ce:	4311      	orrs	r1, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	68d2      	ldr	r2, [r2, #12]
 80028d4:	4311      	orrs	r1, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6992      	ldr	r2, [r2, #24]
 80028da:	430a      	orrs	r2, r1
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028e6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d161      	bne.n	80029b4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a38      	ldr	r2, [pc, #224]	; (80029d4 <HAL_I2S_Init+0x274>)
 80028f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a37      	ldr	r2, [pc, #220]	; (80029d8 <HAL_I2S_Init+0x278>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d101      	bne.n	8002904 <HAL_I2S_Init+0x1a4>
 8002900:	4b36      	ldr	r3, [pc, #216]	; (80029dc <HAL_I2S_Init+0x27c>)
 8002902:	e001      	b.n	8002908 <HAL_I2S_Init+0x1a8>
 8002904:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	4932      	ldr	r1, [pc, #200]	; (80029d8 <HAL_I2S_Init+0x278>)
 8002910:	428a      	cmp	r2, r1
 8002912:	d101      	bne.n	8002918 <HAL_I2S_Init+0x1b8>
 8002914:	4a31      	ldr	r2, [pc, #196]	; (80029dc <HAL_I2S_Init+0x27c>)
 8002916:	e001      	b.n	800291c <HAL_I2S_Init+0x1bc>
 8002918:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800291c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002920:	f023 030f 	bic.w	r3, r3, #15
 8002924:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a2b      	ldr	r2, [pc, #172]	; (80029d8 <HAL_I2S_Init+0x278>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d101      	bne.n	8002934 <HAL_I2S_Init+0x1d4>
 8002930:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <HAL_I2S_Init+0x27c>)
 8002932:	e001      	b.n	8002938 <HAL_I2S_Init+0x1d8>
 8002934:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002938:	2202      	movs	r2, #2
 800293a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a25      	ldr	r2, [pc, #148]	; (80029d8 <HAL_I2S_Init+0x278>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d101      	bne.n	800294a <HAL_I2S_Init+0x1ea>
 8002946:	4b25      	ldr	r3, [pc, #148]	; (80029dc <HAL_I2S_Init+0x27c>)
 8002948:	e001      	b.n	800294e <HAL_I2S_Init+0x1ee>
 800294a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800295a:	d003      	beq.n	8002964 <HAL_I2S_Init+0x204>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d103      	bne.n	800296c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	e001      	b.n	8002970 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	b299      	uxth	r1, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002986:	4303      	orrs	r3, r0
 8002988:	b29b      	uxth	r3, r3
 800298a:	430b      	orrs	r3, r1
 800298c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800298e:	4313      	orrs	r3, r2
 8002990:	b29a      	uxth	r2, r3
 8002992:	897b      	ldrh	r3, [r7, #10]
 8002994:	4313      	orrs	r3, r2
 8002996:	b29b      	uxth	r3, r3
 8002998:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800299c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a0d      	ldr	r2, [pc, #52]	; (80029d8 <HAL_I2S_Init+0x278>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d101      	bne.n	80029ac <HAL_I2S_Init+0x24c>
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <HAL_I2S_Init+0x27c>)
 80029aa:	e001      	b.n	80029b0 <HAL_I2S_Init+0x250>
 80029ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029b0:	897a      	ldrh	r2, [r7, #10]
 80029b2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	08002ad7 	.word	0x08002ad7
 80029d0:	cccccccd 	.word	0xcccccccd
 80029d4:	08002bed 	.word	0x08002bed
 80029d8:	40003800 	.word	0x40003800
 80029dc:	40003400 	.word	0x40003400

080029e0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	881a      	ldrh	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	1c9a      	adds	r2, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10e      	bne.n	8002a70 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a60:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff ffb8 	bl	80029e0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8a:	b292      	uxth	r2, r2
 8002a8c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	1c9a      	adds	r2, r3, #2
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10e      	bne.n	8002ace <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002abe:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7ff ff93 	bl	80029f4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b086      	sub	sp, #24
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d13a      	bne.n	8002b68 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d109      	bne.n	8002b10 <I2S_IRQHandler+0x3a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b06:	2b40      	cmp	r3, #64	; 0x40
 8002b08:	d102      	bne.n	8002b10 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ffb4 	bl	8002a78 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b16:	2b40      	cmp	r3, #64	; 0x40
 8002b18:	d126      	bne.n	8002b68 <I2S_IRQHandler+0x92>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d11f      	bne.n	8002b68 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b36:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b38:	2300      	movs	r3, #0
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f043 0202 	orr.w	r2, r3, #2
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff ff50 	bl	8002a08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d136      	bne.n	8002be2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d109      	bne.n	8002b92 <I2S_IRQHandler+0xbc>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	2b80      	cmp	r3, #128	; 0x80
 8002b8a:	d102      	bne.n	8002b92 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ff45 	bl	8002a1c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d122      	bne.n	8002be2 <I2S_IRQHandler+0x10c>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	d11b      	bne.n	8002be2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bb8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	f043 0204 	orr.w	r2, r3, #4
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f7ff ff13 	bl	8002a08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002be2:	bf00      	nop
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4aa2      	ldr	r2, [pc, #648]	; (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d101      	bne.n	8002c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002c06:	4ba2      	ldr	r3, [pc, #648]	; (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c08:	e001      	b.n	8002c0e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a9b      	ldr	r2, [pc, #620]	; (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d101      	bne.n	8002c28 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002c24:	4b9a      	ldr	r3, [pc, #616]	; (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c26:	e001      	b.n	8002c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002c28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c38:	d004      	beq.n	8002c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 8099 	bne.w	8002d76 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d107      	bne.n	8002c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f925 	bl	8002ea8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d107      	bne.n	8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f9c8 	bl	8003008 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b40      	cmp	r3, #64	; 0x40
 8002c80:	d13a      	bne.n	8002cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d035      	beq.n	8002cf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a7e      	ldr	r2, [pc, #504]	; (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d101      	bne.n	8002c9a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c96:	4b7e      	ldr	r3, [pc, #504]	; (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c98:	e001      	b.n	8002c9e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4979      	ldr	r1, [pc, #484]	; (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ca6:	428b      	cmp	r3, r1
 8002ca8:	d101      	bne.n	8002cae <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002caa:	4b79      	ldr	r3, [pc, #484]	; (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cac:	e001      	b.n	8002cb2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002cae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cb6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cc6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	f043 0202 	orr.w	r2, r3, #2
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fe88 	bl	8002a08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	f040 80be 	bne.w	8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80b8 	beq.w	8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d1e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a59      	ldr	r2, [pc, #356]	; (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d101      	bne.n	8002d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002d2a:	4b59      	ldr	r3, [pc, #356]	; (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d2c:	e001      	b.n	8002d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002d2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4954      	ldr	r1, [pc, #336]	; (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d3a:	428b      	cmp	r3, r1
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002d3e:	4b54      	ldr	r3, [pc, #336]	; (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d40:	e001      	b.n	8002d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002d42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d4a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	f043 0204 	orr.w	r2, r3, #4
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff fe4a 	bl	8002a08 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d74:	e084      	b.n	8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d107      	bne.n	8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f8be 	bl	8002f0c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d107      	bne.n	8002daa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f8fd 	bl	8002fa4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db0:	2b40      	cmp	r3, #64	; 0x40
 8002db2:	d12f      	bne.n	8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d02a      	beq.n	8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dcc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a2e      	ldr	r2, [pc, #184]	; (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d101      	bne.n	8002ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002dd8:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dda:	e001      	b.n	8002de0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002ddc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4929      	ldr	r1, [pc, #164]	; (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002de8:	428b      	cmp	r3, r1
 8002dea:	d101      	bne.n	8002df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002dec:	4b28      	ldr	r3, [pc, #160]	; (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002dee:	e001      	b.n	8002df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002df0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002df4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002df8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	f043 0202 	orr.w	r2, r3, #2
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff fdfa 	bl	8002a08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff fdfa 	bl	8002a08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d131      	bne.n	8002e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d02c      	beq.n	8002e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d101      	bne.n	8002e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002e32:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e34:	e001      	b.n	8002e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002e36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4912      	ldr	r1, [pc, #72]	; (8002e8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e42:	428b      	cmp	r3, r1
 8002e44:	d101      	bne.n	8002e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002e46:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e48:	e001      	b.n	8002e4e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002e4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e52:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e62:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	f043 0204 	orr.w	r2, r3, #4
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff fdc5 	bl	8002a08 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e7e:	e000      	b.n	8002e82 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e80:	bf00      	nop
}
 8002e82:	bf00      	nop
 8002e84:	3720      	adds	r7, #32
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40003800 	.word	0x40003800
 8002e90:	40003400 	.word	0x40003400

08002e94 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	1c99      	adds	r1, r3, #2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6251      	str	r1, [r2, #36]	; 0x24
 8002eba:	881a      	ldrh	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d113      	bne.n	8002f02 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ee8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d106      	bne.n	8002f02 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff ffc9 	bl	8002e94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f18:	1c99      	adds	r1, r3, #2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6251      	str	r1, [r2, #36]	; 0x24
 8002f1e:	8819      	ldrh	r1, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <I2SEx_TxISR_I2SExt+0x90>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d101      	bne.n	8002f2e <I2SEx_TxISR_I2SExt+0x22>
 8002f2a:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <I2SEx_TxISR_I2SExt+0x94>)
 8002f2c:	e001      	b.n	8002f32 <I2SEx_TxISR_I2SExt+0x26>
 8002f2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f32:	460a      	mov	r2, r1
 8002f34:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d121      	bne.n	8002f92 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <I2SEx_TxISR_I2SExt+0x90>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d101      	bne.n	8002f5c <I2SEx_TxISR_I2SExt+0x50>
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <I2SEx_TxISR_I2SExt+0x94>)
 8002f5a:	e001      	b.n	8002f60 <I2SEx_TxISR_I2SExt+0x54>
 8002f5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	490d      	ldr	r1, [pc, #52]	; (8002f9c <I2SEx_TxISR_I2SExt+0x90>)
 8002f68:	428b      	cmp	r3, r1
 8002f6a:	d101      	bne.n	8002f70 <I2SEx_TxISR_I2SExt+0x64>
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <I2SEx_TxISR_I2SExt+0x94>)
 8002f6e:	e001      	b.n	8002f74 <I2SEx_TxISR_I2SExt+0x68>
 8002f70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f78:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d106      	bne.n	8002f92 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff81 	bl	8002e94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40003800 	.word	0x40003800
 8002fa0:	40003400 	.word	0x40003400

08002fa4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68d8      	ldr	r0, [r3, #12]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	1c99      	adds	r1, r3, #2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fbc:	b282      	uxth	r2, r0
 8002fbe:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d113      	bne.n	8003000 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fe6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff ff4a 	bl	8002e94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a20      	ldr	r2, [pc, #128]	; (8003098 <I2SEx_RxISR_I2SExt+0x90>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d101      	bne.n	800301e <I2SEx_RxISR_I2SExt+0x16>
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <I2SEx_RxISR_I2SExt+0x94>)
 800301c:	e001      	b.n	8003022 <I2SEx_RxISR_I2SExt+0x1a>
 800301e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003022:	68d8      	ldr	r0, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	1c99      	adds	r1, r3, #2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800302e:	b282      	uxth	r2, r0
 8003030:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d121      	bne.n	800308e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a12      	ldr	r2, [pc, #72]	; (8003098 <I2SEx_RxISR_I2SExt+0x90>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d101      	bne.n	8003058 <I2SEx_RxISR_I2SExt+0x50>
 8003054:	4b11      	ldr	r3, [pc, #68]	; (800309c <I2SEx_RxISR_I2SExt+0x94>)
 8003056:	e001      	b.n	800305c <I2SEx_RxISR_I2SExt+0x54>
 8003058:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	490d      	ldr	r1, [pc, #52]	; (8003098 <I2SEx_RxISR_I2SExt+0x90>)
 8003064:	428b      	cmp	r3, r1
 8003066:	d101      	bne.n	800306c <I2SEx_RxISR_I2SExt+0x64>
 8003068:	4b0c      	ldr	r3, [pc, #48]	; (800309c <I2SEx_RxISR_I2SExt+0x94>)
 800306a:	e001      	b.n	8003070 <I2SEx_RxISR_I2SExt+0x68>
 800306c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003070:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003074:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d106      	bne.n	800308e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ff03 	bl	8002e94 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40003800 	.word	0x40003800
 800309c:	40003400 	.word	0x40003400

080030a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e25b      	b.n	800356a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d075      	beq.n	80031aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030be:	4ba3      	ldr	r3, [pc, #652]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 030c 	and.w	r3, r3, #12
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d00c      	beq.n	80030e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ca:	4ba0      	ldr	r3, [pc, #640]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d112      	bne.n	80030fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d6:	4b9d      	ldr	r3, [pc, #628]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e2:	d10b      	bne.n	80030fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	4b99      	ldr	r3, [pc, #612]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d05b      	beq.n	80031a8 <HAL_RCC_OscConfig+0x108>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d157      	bne.n	80031a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e236      	b.n	800356a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d106      	bne.n	8003114 <HAL_RCC_OscConfig+0x74>
 8003106:	4b91      	ldr	r3, [pc, #580]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a90      	ldr	r2, [pc, #576]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e01d      	b.n	8003150 <HAL_RCC_OscConfig+0xb0>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0x98>
 800311e:	4b8b      	ldr	r3, [pc, #556]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a8a      	ldr	r2, [pc, #552]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b88      	ldr	r3, [pc, #544]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a87      	ldr	r2, [pc, #540]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e00b      	b.n	8003150 <HAL_RCC_OscConfig+0xb0>
 8003138:	4b84      	ldr	r3, [pc, #528]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a83      	ldr	r2, [pc, #524]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800313e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	4b81      	ldr	r3, [pc, #516]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a80      	ldr	r2, [pc, #512]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800314a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7fd fa70 	bl	800063c <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003160:	f7fd fa6c 	bl	800063c <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b64      	cmp	r3, #100	; 0x64
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e1fb      	b.n	800356a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	4b76      	ldr	r3, [pc, #472]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0xc0>
 800317e:	e014      	b.n	80031aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003180:	f7fd fa5c 	bl	800063c <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003188:	f7fd fa58 	bl	800063c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e1e7      	b.n	800356a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319a:	4b6c      	ldr	r3, [pc, #432]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0xe8>
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d063      	beq.n	800327e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031b6:	4b65      	ldr	r3, [pc, #404]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 030c 	and.w	r3, r3, #12
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00b      	beq.n	80031da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c2:	4b62      	ldr	r3, [pc, #392]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d11c      	bne.n	8003208 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ce:	4b5f      	ldr	r3, [pc, #380]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d116      	bne.n	8003208 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031da:	4b5c      	ldr	r3, [pc, #368]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d005      	beq.n	80031f2 <HAL_RCC_OscConfig+0x152>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d001      	beq.n	80031f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e1bb      	b.n	800356a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f2:	4b56      	ldr	r3, [pc, #344]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	4952      	ldr	r1, [pc, #328]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003206:	e03a      	b.n	800327e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d020      	beq.n	8003252 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003210:	4b4f      	ldr	r3, [pc, #316]	; (8003350 <HAL_RCC_OscConfig+0x2b0>)
 8003212:	2201      	movs	r2, #1
 8003214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fd fa11 	bl	800063c <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321e:	f7fd fa0d 	bl	800063c <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e19c      	b.n	800356a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003230:	4b46      	ldr	r3, [pc, #280]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323c:	4b43      	ldr	r3, [pc, #268]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4940      	ldr	r1, [pc, #256]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800324c:	4313      	orrs	r3, r2
 800324e:	600b      	str	r3, [r1, #0]
 8003250:	e015      	b.n	800327e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003252:	4b3f      	ldr	r3, [pc, #252]	; (8003350 <HAL_RCC_OscConfig+0x2b0>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fd f9f0 	bl	800063c <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003260:	f7fd f9ec 	bl	800063c <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e17b      	b.n	800356a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003272:	4b36      	ldr	r3, [pc, #216]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d030      	beq.n	80032ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d016      	beq.n	80032c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003292:	4b30      	ldr	r3, [pc, #192]	; (8003354 <HAL_RCC_OscConfig+0x2b4>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003298:	f7fd f9d0 	bl	800063c <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a0:	f7fd f9cc 	bl	800063c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e15b      	b.n	800356a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b2:	4b26      	ldr	r3, [pc, #152]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x200>
 80032be:	e015      	b.n	80032ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c0:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_RCC_OscConfig+0x2b4>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c6:	f7fd f9b9 	bl	800063c <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ce:	f7fd f9b5 	bl	800063c <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e144      	b.n	800356a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e0:	4b1a      	ldr	r3, [pc, #104]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 80032e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f0      	bne.n	80032ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0304 	and.w	r3, r3, #4
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80a0 	beq.w	800343a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fa:	2300      	movs	r3, #0
 80032fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fe:	4b13      	ldr	r3, [pc, #76]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10f      	bne.n	800332a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	4b0f      	ldr	r3, [pc, #60]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	4a0e      	ldr	r2, [pc, #56]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003318:	6413      	str	r3, [r2, #64]	; 0x40
 800331a:	4b0c      	ldr	r3, [pc, #48]	; (800334c <HAL_RCC_OscConfig+0x2ac>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003326:	2301      	movs	r3, #1
 8003328:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_RCC_OscConfig+0x2b8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d121      	bne.n	800337a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003336:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_RCC_OscConfig+0x2b8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a07      	ldr	r2, [pc, #28]	; (8003358 <HAL_RCC_OscConfig+0x2b8>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003342:	f7fd f97b 	bl	800063c <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	e011      	b.n	800336e <HAL_RCC_OscConfig+0x2ce>
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	42470000 	.word	0x42470000
 8003354:	42470e80 	.word	0x42470e80
 8003358:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335c:	f7fd f96e 	bl	800063c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e0fd      	b.n	800356a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336e:	4b81      	ldr	r3, [pc, #516]	; (8003574 <HAL_RCC_OscConfig+0x4d4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d106      	bne.n	8003390 <HAL_RCC_OscConfig+0x2f0>
 8003382:	4b7d      	ldr	r3, [pc, #500]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	4a7c      	ldr	r2, [pc, #496]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	6713      	str	r3, [r2, #112]	; 0x70
 800338e:	e01c      	b.n	80033ca <HAL_RCC_OscConfig+0x32a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b05      	cmp	r3, #5
 8003396:	d10c      	bne.n	80033b2 <HAL_RCC_OscConfig+0x312>
 8003398:	4b77      	ldr	r3, [pc, #476]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	4a76      	ldr	r2, [pc, #472]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 800339e:	f043 0304 	orr.w	r3, r3, #4
 80033a2:	6713      	str	r3, [r2, #112]	; 0x70
 80033a4:	4b74      	ldr	r3, [pc, #464]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	4a73      	ldr	r2, [pc, #460]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 80033aa:	f043 0301 	orr.w	r3, r3, #1
 80033ae:	6713      	str	r3, [r2, #112]	; 0x70
 80033b0:	e00b      	b.n	80033ca <HAL_RCC_OscConfig+0x32a>
 80033b2:	4b71      	ldr	r3, [pc, #452]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b6:	4a70      	ldr	r2, [pc, #448]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 80033b8:	f023 0301 	bic.w	r3, r3, #1
 80033bc:	6713      	str	r3, [r2, #112]	; 0x70
 80033be:	4b6e      	ldr	r3, [pc, #440]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c2:	4a6d      	ldr	r2, [pc, #436]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 80033c4:	f023 0304 	bic.w	r3, r3, #4
 80033c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d015      	beq.n	80033fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d2:	f7fd f933 	bl	800063c <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fd f92f 	bl	800063c <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e0bc      	b.n	800356a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	4b61      	ldr	r3, [pc, #388]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ee      	beq.n	80033da <HAL_RCC_OscConfig+0x33a>
 80033fc:	e014      	b.n	8003428 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fe:	f7fd f91d 	bl	800063c <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003404:	e00a      	b.n	800341c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7fd f919 	bl	800063c <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	; 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e0a6      	b.n	800356a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341c:	4b56      	ldr	r3, [pc, #344]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1ee      	bne.n	8003406 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003428:	7dfb      	ldrb	r3, [r7, #23]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d105      	bne.n	800343a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342e:	4b52      	ldr	r3, [pc, #328]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a51      	ldr	r2, [pc, #324]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 8003434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8092 	beq.w	8003568 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003444:	4b4c      	ldr	r3, [pc, #304]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	d05c      	beq.n	800350a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d141      	bne.n	80034dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003458:	4b48      	ldr	r3, [pc, #288]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7fd f8ed 	bl	800063c <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003466:	f7fd f8e9 	bl	800063c <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e078      	b.n	800356a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003478:	4b3f      	ldr	r3, [pc, #252]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f0      	bne.n	8003466 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69da      	ldr	r2, [r3, #28]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	019b      	lsls	r3, r3, #6
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	085b      	lsrs	r3, r3, #1
 800349c:	3b01      	subs	r3, #1
 800349e:	041b      	lsls	r3, r3, #16
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	061b      	lsls	r3, r3, #24
 80034a8:	4933      	ldr	r1, [pc, #204]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ae:	4b33      	ldr	r3, [pc, #204]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fd f8c2 	bl	800063c <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034bc:	f7fd f8be 	bl	800063c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e04d      	b.n	800356a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ce:	4b2a      	ldr	r3, [pc, #168]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x41c>
 80034da:	e045      	b.n	8003568 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034dc:	4b27      	ldr	r3, [pc, #156]	; (800357c <HAL_RCC_OscConfig+0x4dc>)
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e2:	f7fd f8ab 	bl	800063c <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ea:	f7fd f8a7 	bl	800063c <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e036      	b.n	800356a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fc:	4b1e      	ldr	r3, [pc, #120]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1f0      	bne.n	80034ea <HAL_RCC_OscConfig+0x44a>
 8003508:	e02e      	b.n	8003568 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e029      	b.n	800356a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003516:	4b18      	ldr	r3, [pc, #96]	; (8003578 <HAL_RCC_OscConfig+0x4d8>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	429a      	cmp	r2, r3
 8003528:	d11c      	bne.n	8003564 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d115      	bne.n	8003564 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800353e:	4013      	ands	r3, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003544:	4293      	cmp	r3, r2
 8003546:	d10d      	bne.n	8003564 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d106      	bne.n	8003564 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d001      	beq.n	8003568 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	40007000 	.word	0x40007000
 8003578:	40023800 	.word	0x40023800
 800357c:	42470060 	.word	0x42470060

08003580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0cc      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003594:	4b68      	ldr	r3, [pc, #416]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 030f 	and.w	r3, r3, #15
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d90c      	bls.n	80035bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b65      	ldr	r3, [pc, #404]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b63      	ldr	r3, [pc, #396]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0b8      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d020      	beq.n	800360a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d4:	4b59      	ldr	r3, [pc, #356]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4a58      	ldr	r2, [pc, #352]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ec:	4b53      	ldr	r3, [pc, #332]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4a52      	ldr	r2, [pc, #328]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f8:	4b50      	ldr	r3, [pc, #320]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	494d      	ldr	r1, [pc, #308]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d044      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b47      	ldr	r3, [pc, #284]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d119      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e07f      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d003      	beq.n	800363e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363a:	2b03      	cmp	r3, #3
 800363c:	d107      	bne.n	800364e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363e:	4b3f      	ldr	r3, [pc, #252]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d109      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e06f      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364e:	4b3b      	ldr	r3, [pc, #236]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e067      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800365e:	4b37      	ldr	r3, [pc, #220]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f023 0203 	bic.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	4934      	ldr	r1, [pc, #208]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	4313      	orrs	r3, r2
 800366e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003670:	f7fc ffe4 	bl	800063c <HAL_GetTick>
 8003674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003676:	e00a      	b.n	800368e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003678:	f7fc ffe0 	bl	800063c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f241 3288 	movw	r2, #5000	; 0x1388
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e04f      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368e:	4b2b      	ldr	r3, [pc, #172]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 020c 	and.w	r2, r3, #12
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	429a      	cmp	r2, r3
 800369e:	d1eb      	bne.n	8003678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a0:	4b25      	ldr	r3, [pc, #148]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d20c      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b22      	ldr	r3, [pc, #136]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b20      	ldr	r3, [pc, #128]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e032      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d4:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4916      	ldr	r1, [pc, #88]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	490e      	ldr	r1, [pc, #56]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003706:	f000 f821 	bl	800374c <HAL_RCC_GetSysClockFreq>
 800370a:	4601      	mov	r1, r0
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	5cd3      	ldrb	r3, [r2, r3]
 800371a:	fa21 f303 	lsr.w	r3, r1, r3
 800371e:	4a09      	ldr	r2, [pc, #36]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_RCC_ClockConfig+0x1c8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fc ff44 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40023c00 	.word	0x40023c00
 800373c:	40023800 	.word	0x40023800
 8003740:	08008e18 	.word	0x08008e18
 8003744:	20000028 	.word	0x20000028
 8003748:	20000000 	.word	0x20000000

0800374c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800374c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	2300      	movs	r3, #0
 800375c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003762:	4b63      	ldr	r3, [pc, #396]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b04      	cmp	r3, #4
 800376c:	d007      	beq.n	800377e <HAL_RCC_GetSysClockFreq+0x32>
 800376e:	2b08      	cmp	r3, #8
 8003770:	d008      	beq.n	8003784 <HAL_RCC_GetSysClockFreq+0x38>
 8003772:	2b00      	cmp	r3, #0
 8003774:	f040 80b4 	bne.w	80038e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003778:	4b5e      	ldr	r3, [pc, #376]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800377a:	60bb      	str	r3, [r7, #8]
       break;
 800377c:	e0b3      	b.n	80038e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800377e:	4b5e      	ldr	r3, [pc, #376]	; (80038f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003780:	60bb      	str	r3, [r7, #8]
      break;
 8003782:	e0b0      	b.n	80038e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003784:	4b5a      	ldr	r3, [pc, #360]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800378c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800378e:	4b58      	ldr	r3, [pc, #352]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d04a      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379a:	4b55      	ldr	r3, [pc, #340]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	099b      	lsrs	r3, r3, #6
 80037a0:	f04f 0400 	mov.w	r4, #0
 80037a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	ea03 0501 	and.w	r5, r3, r1
 80037b0:	ea04 0602 	and.w	r6, r4, r2
 80037b4:	4629      	mov	r1, r5
 80037b6:	4632      	mov	r2, r6
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	f04f 0400 	mov.w	r4, #0
 80037c0:	0154      	lsls	r4, r2, #5
 80037c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037c6:	014b      	lsls	r3, r1, #5
 80037c8:	4619      	mov	r1, r3
 80037ca:	4622      	mov	r2, r4
 80037cc:	1b49      	subs	r1, r1, r5
 80037ce:	eb62 0206 	sbc.w	r2, r2, r6
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	f04f 0400 	mov.w	r4, #0
 80037da:	0194      	lsls	r4, r2, #6
 80037dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037e0:	018b      	lsls	r3, r1, #6
 80037e2:	1a5b      	subs	r3, r3, r1
 80037e4:	eb64 0402 	sbc.w	r4, r4, r2
 80037e8:	f04f 0100 	mov.w	r1, #0
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	00e2      	lsls	r2, r4, #3
 80037f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037f6:	00d9      	lsls	r1, r3, #3
 80037f8:	460b      	mov	r3, r1
 80037fa:	4614      	mov	r4, r2
 80037fc:	195b      	adds	r3, r3, r5
 80037fe:	eb44 0406 	adc.w	r4, r4, r6
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	0262      	lsls	r2, r4, #9
 800380c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003810:	0259      	lsls	r1, r3, #9
 8003812:	460b      	mov	r3, r1
 8003814:	4614      	mov	r4, r2
 8003816:	4618      	mov	r0, r3
 8003818:	4621      	mov	r1, r4
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f04f 0400 	mov.w	r4, #0
 8003820:	461a      	mov	r2, r3
 8003822:	4623      	mov	r3, r4
 8003824:	f7fc fd24 	bl	8000270 <__aeabi_uldivmod>
 8003828:	4603      	mov	r3, r0
 800382a:	460c      	mov	r4, r1
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	e049      	b.n	80038c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003830:	4b2f      	ldr	r3, [pc, #188]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	099b      	lsrs	r3, r3, #6
 8003836:	f04f 0400 	mov.w	r4, #0
 800383a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	ea03 0501 	and.w	r5, r3, r1
 8003846:	ea04 0602 	and.w	r6, r4, r2
 800384a:	4629      	mov	r1, r5
 800384c:	4632      	mov	r2, r6
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	f04f 0400 	mov.w	r4, #0
 8003856:	0154      	lsls	r4, r2, #5
 8003858:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800385c:	014b      	lsls	r3, r1, #5
 800385e:	4619      	mov	r1, r3
 8003860:	4622      	mov	r2, r4
 8003862:	1b49      	subs	r1, r1, r5
 8003864:	eb62 0206 	sbc.w	r2, r2, r6
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	f04f 0400 	mov.w	r4, #0
 8003870:	0194      	lsls	r4, r2, #6
 8003872:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003876:	018b      	lsls	r3, r1, #6
 8003878:	1a5b      	subs	r3, r3, r1
 800387a:	eb64 0402 	sbc.w	r4, r4, r2
 800387e:	f04f 0100 	mov.w	r1, #0
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	00e2      	lsls	r2, r4, #3
 8003888:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800388c:	00d9      	lsls	r1, r3, #3
 800388e:	460b      	mov	r3, r1
 8003890:	4614      	mov	r4, r2
 8003892:	195b      	adds	r3, r3, r5
 8003894:	eb44 0406 	adc.w	r4, r4, r6
 8003898:	f04f 0100 	mov.w	r1, #0
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	02a2      	lsls	r2, r4, #10
 80038a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80038a6:	0299      	lsls	r1, r3, #10
 80038a8:	460b      	mov	r3, r1
 80038aa:	4614      	mov	r4, r2
 80038ac:	4618      	mov	r0, r3
 80038ae:	4621      	mov	r1, r4
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f04f 0400 	mov.w	r4, #0
 80038b6:	461a      	mov	r2, r3
 80038b8:	4623      	mov	r3, r4
 80038ba:	f7fc fcd9 	bl	8000270 <__aeabi_uldivmod>
 80038be:	4603      	mov	r3, r0
 80038c0:	460c      	mov	r4, r1
 80038c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038c4:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	0c1b      	lsrs	r3, r3, #16
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	3301      	adds	r3, #1
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038dc:	60bb      	str	r3, [r7, #8]
      break;
 80038de:	e002      	b.n	80038e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038e0:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80038e2:	60bb      	str	r3, [r7, #8]
      break;
 80038e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038e6:	68bb      	ldr	r3, [r7, #8]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038f0:	40023800 	.word	0x40023800
 80038f4:	00f42400 	.word	0x00f42400
 80038f8:	007a1200 	.word	0x007a1200

080038fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <HAL_RCC_GetHCLKFreq+0x14>)
 8003902:	681b      	ldr	r3, [r3, #0]
}
 8003904:	4618      	mov	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	20000028 	.word	0x20000028

08003914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003918:	f7ff fff0 	bl	80038fc <HAL_RCC_GetHCLKFreq>
 800391c:	4601      	mov	r1, r0
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	0a9b      	lsrs	r3, r3, #10
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	4a03      	ldr	r2, [pc, #12]	; (8003938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800392a:	5cd3      	ldrb	r3, [r2, r3]
 800392c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40023800 	.word	0x40023800
 8003938:	08008e28 	.word	0x08008e28

0800393c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003940:	f7ff ffdc 	bl	80038fc <HAL_RCC_GetHCLKFreq>
 8003944:	4601      	mov	r1, r0
 8003946:	4b05      	ldr	r3, [pc, #20]	; (800395c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	0b5b      	lsrs	r3, r3, #13
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	4a03      	ldr	r2, [pc, #12]	; (8003960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003952:	5cd3      	ldrb	r3, [r2, r3]
 8003954:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40023800 	.word	0x40023800
 8003960:	08008e28 	.word	0x08008e28

08003964 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d105      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003988:	2b00      	cmp	r3, #0
 800398a:	d035      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800398c:	4b62      	ldr	r3, [pc, #392]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003992:	f7fc fe53 	bl	800063c <HAL_GetTick>
 8003996:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003998:	e008      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800399a:	f7fc fe4f 	bl	800063c <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e0b0      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039ac:	4b5b      	ldr	r3, [pc, #364]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f0      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	019a      	lsls	r2, r3, #6
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	071b      	lsls	r3, r3, #28
 80039c4:	4955      	ldr	r1, [pc, #340]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80039cc:	4b52      	ldr	r3, [pc, #328]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039d2:	f7fc fe33 	bl	800063c <HAL_GetTick>
 80039d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80039da:	f7fc fe2f 	bl	800063c <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e090      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80039ec:	4b4b      	ldr	r3, [pc, #300]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0f0      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 8083 	beq.w	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	4b44      	ldr	r3, [pc, #272]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	4a43      	ldr	r2, [pc, #268]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a14:	6413      	str	r3, [r2, #64]	; 0x40
 8003a16:	4b41      	ldr	r3, [pc, #260]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a22:	4b3f      	ldr	r3, [pc, #252]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a3e      	ldr	r2, [pc, #248]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a2e:	f7fc fe05 	bl	800063c <HAL_GetTick>
 8003a32:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a34:	e008      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a36:	f7fc fe01 	bl	800063c <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e062      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a48:	4b35      	ldr	r3, [pc, #212]	; (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a54:	4b31      	ldr	r3, [pc, #196]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d02f      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d028      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a72:	4b2a      	ldr	r3, [pc, #168]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a7a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a7c:	4b29      	ldr	r3, [pc, #164]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a82:	4b28      	ldr	r3, [pc, #160]	; (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a88:	4a24      	ldr	r2, [pc, #144]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a8e:	4b23      	ldr	r3, [pc, #140]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d114      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a9a:	f7fc fdcf 	bl	800063c <HAL_GetTick>
 8003a9e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa0:	e00a      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa2:	f7fc fdcb 	bl	800063c <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e02a      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab8:	4b18      	ldr	r3, [pc, #96]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0ee      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003acc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ad0:	d10d      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003ad2:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae6:	490d      	ldr	r1, [pc, #52]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	608b      	str	r3, [r1, #8]
 8003aec:	e005      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	4a0a      	ldr	r2, [pc, #40]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003af4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003af8:	6093      	str	r3, [r2, #8]
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003afc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b06:	4905      	ldr	r1, [pc, #20]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	42470068 	.word	0x42470068
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	40007000 	.word	0x40007000
 8003b24:	42470e40 	.word	0x42470e40

08003b28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003b34:	2300      	movs	r3, #0
 8003b36:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d13d      	bne.n	8003bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003b46:	4b22      	ldr	r3, [pc, #136]	; (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b4e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d004      	beq.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d12f      	bne.n	8003bba <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003b5a:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003b5c:	617b      	str	r3, [r7, #20]
          break;
 8003b5e:	e02f      	b.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b60:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b6c:	d108      	bne.n	8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b6e:	4b18      	ldr	r3, [pc, #96]	; (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b76:	4a18      	ldr	r2, [pc, #96]	; (8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	e007      	b.n	8003b90 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b80:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b88:	4a14      	ldr	r2, [pc, #80]	; (8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b90:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b96:	099b      	lsrs	r3, r3, #6
 8003b98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ba2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003ba6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003baa:	0f1b      	lsrs	r3, r3, #28
 8003bac:	f003 0307 	and.w	r3, r3, #7
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb6:	617b      	str	r3, [r7, #20]
          break;
 8003bb8:	e002      	b.n	8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
          break;
 8003bbe:	bf00      	nop
        }
      }
      break;
 8003bc0:	bf00      	nop
    }
  }
  return frequency;
 8003bc2:	697b      	ldr	r3, [r7, #20]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	00bb8000 	.word	0x00bb8000
 8003bd8:	007a1200 	.word	0x007a1200
 8003bdc:	00f42400 	.word	0x00f42400

08003be0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e056      	b.n	8003ca0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d106      	bne.n	8003c12 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f004 f847 	bl	8007ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2202      	movs	r2, #2
 8003c16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c28:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	ea42 0103 	orr.w	r1, r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	0c1b      	lsrs	r3, r3, #16
 8003c70:	f003 0104 	and.w	r1, r3, #4
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	69da      	ldr	r2, [r3, #28]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e01d      	b.n	8003cf6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f004 f82e 	bl	8007d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	f000 f8c0 	bl	8003e6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_TIM_ConfigClockSource+0x18>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e0a6      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x166>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d34:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d3c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b40      	cmp	r3, #64	; 0x40
 8003d4c:	d067      	beq.n	8003e1e <HAL_TIM_ConfigClockSource+0x120>
 8003d4e:	2b40      	cmp	r3, #64	; 0x40
 8003d50:	d80b      	bhi.n	8003d6a <HAL_TIM_ConfigClockSource+0x6c>
 8003d52:	2b10      	cmp	r3, #16
 8003d54:	d073      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x140>
 8003d56:	2b10      	cmp	r3, #16
 8003d58:	d802      	bhi.n	8003d60 <HAL_TIM_ConfigClockSource+0x62>
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d06f      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003d5e:	e078      	b.n	8003e52 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d60:	2b20      	cmp	r3, #32
 8003d62:	d06c      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x140>
 8003d64:	2b30      	cmp	r3, #48	; 0x30
 8003d66:	d06a      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d68:	e073      	b.n	8003e52 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d6a:	2b70      	cmp	r3, #112	; 0x70
 8003d6c:	d00d      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x8c>
 8003d6e:	2b70      	cmp	r3, #112	; 0x70
 8003d70:	d804      	bhi.n	8003d7c <HAL_TIM_ConfigClockSource+0x7e>
 8003d72:	2b50      	cmp	r3, #80	; 0x50
 8003d74:	d033      	beq.n	8003dde <HAL_TIM_ConfigClockSource+0xe0>
 8003d76:	2b60      	cmp	r3, #96	; 0x60
 8003d78:	d041      	beq.n	8003dfe <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d7a:	e06a      	b.n	8003e52 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d80:	d066      	beq.n	8003e50 <HAL_TIM_ConfigClockSource+0x152>
 8003d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d86:	d017      	beq.n	8003db8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d88:	e063      	b.n	8003e52 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6899      	ldr	r1, [r3, #8]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f000 f981 	bl	80040a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	609a      	str	r2, [r3, #8]
      break;
 8003db6:	e04c      	b.n	8003e52 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	6899      	ldr	r1, [r3, #8]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f000 f96a 	bl	80040a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dda:	609a      	str	r2, [r3, #8]
      break;
 8003ddc:	e039      	b.n	8003e52 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6859      	ldr	r1, [r3, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	461a      	mov	r2, r3
 8003dec:	f000 f8de 	bl	8003fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2150      	movs	r1, #80	; 0x50
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 f937 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003dfc:	e029      	b.n	8003e52 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6859      	ldr	r1, [r3, #4]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f000 f8fd 	bl	800400a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2160      	movs	r1, #96	; 0x60
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f927 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003e1c:	e019      	b.n	8003e52 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	6859      	ldr	r1, [r3, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f000 f8be 	bl	8003fac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2140      	movs	r1, #64	; 0x40
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f917 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003e3c:	e009      	b.n	8003e52 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4619      	mov	r1, r3
 8003e48:	4610      	mov	r0, r2
 8003e4a:	f000 f90e 	bl	800406a <TIM_ITRx_SetConfig>
      break;
 8003e4e:	e000      	b.n	8003e52 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e50:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a40      	ldr	r2, [pc, #256]	; (8003f80 <TIM_Base_SetConfig+0x114>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8a:	d00f      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a3d      	ldr	r2, [pc, #244]	; (8003f84 <TIM_Base_SetConfig+0x118>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d00b      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a3c      	ldr	r2, [pc, #240]	; (8003f88 <TIM_Base_SetConfig+0x11c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d007      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3b      	ldr	r2, [pc, #236]	; (8003f8c <TIM_Base_SetConfig+0x120>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3a      	ldr	r2, [pc, #232]	; (8003f90 <TIM_Base_SetConfig+0x124>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d108      	bne.n	8003ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a2f      	ldr	r2, [pc, #188]	; (8003f80 <TIM_Base_SetConfig+0x114>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d02b      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ecc:	d027      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a2c      	ldr	r2, [pc, #176]	; (8003f84 <TIM_Base_SetConfig+0x118>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d023      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2b      	ldr	r2, [pc, #172]	; (8003f88 <TIM_Base_SetConfig+0x11c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d01f      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2a      	ldr	r2, [pc, #168]	; (8003f8c <TIM_Base_SetConfig+0x120>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01b      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a29      	ldr	r2, [pc, #164]	; (8003f90 <TIM_Base_SetConfig+0x124>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d017      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a28      	ldr	r2, [pc, #160]	; (8003f94 <TIM_Base_SetConfig+0x128>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <TIM_Base_SetConfig+0x12c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00f      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <TIM_Base_SetConfig+0x130>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00b      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a25      	ldr	r2, [pc, #148]	; (8003fa0 <TIM_Base_SetConfig+0x134>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d007      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a24      	ldr	r2, [pc, #144]	; (8003fa4 <TIM_Base_SetConfig+0x138>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d003      	beq.n	8003f1e <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a23      	ldr	r2, [pc, #140]	; (8003fa8 <TIM_Base_SetConfig+0x13c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d108      	bne.n	8003f30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a0a      	ldr	r2, [pc, #40]	; (8003f80 <TIM_Base_SetConfig+0x114>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_Base_SetConfig+0xf8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a0c      	ldr	r2, [pc, #48]	; (8003f90 <TIM_Base_SetConfig+0x124>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d103      	bne.n	8003f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	615a      	str	r2, [r3, #20]
}
 8003f72:	bf00      	nop
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40010000 	.word	0x40010000
 8003f84:	40000400 	.word	0x40000400
 8003f88:	40000800 	.word	0x40000800
 8003f8c:	40000c00 	.word	0x40000c00
 8003f90:	40010400 	.word	0x40010400
 8003f94:	40014000 	.word	0x40014000
 8003f98:	40014400 	.word	0x40014400
 8003f9c:	40014800 	.word	0x40014800
 8003fa0:	40001800 	.word	0x40001800
 8003fa4:	40001c00 	.word	0x40001c00
 8003fa8:	40002000 	.word	0x40002000

08003fac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f023 0201 	bic.w	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f023 030a 	bic.w	r3, r3, #10
 8003fe8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	621a      	str	r2, [r3, #32]
}
 8003ffe:	bf00      	nop
 8004000:	371c      	adds	r7, #28
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800400a:	b480      	push	{r7}
 800400c:	b087      	sub	sp, #28
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	f023 0210 	bic.w	r2, r3, #16
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004034:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	031b      	lsls	r3, r3, #12
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004046:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	4313      	orrs	r3, r2
 8004050:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	621a      	str	r2, [r3, #32]
}
 800405e:	bf00      	nop
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800406a:	b480      	push	{r7}
 800406c:	b085      	sub	sp, #20
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004080:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	f043 0307 	orr.w	r3, r3, #7
 800408c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	609a      	str	r2, [r3, #8]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	021a      	lsls	r2, r3, #8
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	609a      	str	r2, [r3, #8]
}
 80040d4:	bf00      	nop
 80040d6:	371c      	adds	r7, #28
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e05a      	b.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a21      	ldr	r2, [pc, #132]	; (80041bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d022      	beq.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004144:	d01d      	beq.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1d      	ldr	r2, [pc, #116]	; (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d018      	beq.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1b      	ldr	r2, [pc, #108]	; (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d013      	beq.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a1a      	ldr	r2, [pc, #104]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00e      	beq.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a18      	ldr	r2, [pc, #96]	; (80041cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d009      	beq.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a17      	ldr	r2, [pc, #92]	; (80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d004      	beq.n	8004182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d10c      	bne.n	800419c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004188:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	4313      	orrs	r3, r2
 8004192:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40000800 	.word	0x40000800
 80041c8:	40000c00 	.word	0x40000c00
 80041cc:	40010400 	.word	0x40010400
 80041d0:	40014000 	.word	0x40014000
 80041d4:	40001800 	.word	0x40001800

080041d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e03f      	b.n	800426a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f003 fdb8 	bl	8007d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2224      	movs	r2, #36	; 0x24
 8004208:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800421a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f90b 	bl	8004438 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b088      	sub	sp, #32
 8004276:	af02      	add	r7, sp, #8
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	4613      	mov	r3, r2
 8004280:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b20      	cmp	r3, #32
 8004290:	f040 8083 	bne.w	800439a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_UART_Transmit+0x2e>
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e07b      	b.n	800439c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Transmit+0x40>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e074      	b.n	800439c <HAL_UART_Transmit+0x12a>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2221      	movs	r2, #33	; 0x21
 80042c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80042c8:	f7fc f9b8 	bl	800063c <HAL_GetTick>
 80042cc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	88fa      	ldrh	r2, [r7, #6]
 80042d2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	88fa      	ldrh	r2, [r7, #6]
 80042d8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80042e2:	e042      	b.n	800436a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fa:	d122      	bne.n	8004342 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2200      	movs	r2, #0
 8004304:	2180      	movs	r1, #128	; 0x80
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f84c 	bl	80043a4 <UART_WaitOnFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e042      	b.n	800439c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004328:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d103      	bne.n	800433a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	3302      	adds	r3, #2
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	e017      	b.n	800436a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	3301      	adds	r3, #1
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	e013      	b.n	800436a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2200      	movs	r2, #0
 800434a:	2180      	movs	r1, #128	; 0x80
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f829 	bl	80043a4 <UART_WaitOnFlagUntilTimeout>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e01f      	b.n	800439c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	60ba      	str	r2, [r7, #8]
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1b7      	bne.n	80042e4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2200      	movs	r2, #0
 800437c:	2140      	movs	r1, #64	; 0x40
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f810 	bl	80043a4 <UART_WaitOnFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e006      	b.n	800439c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	e000      	b.n	800439c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800439a:	2302      	movs	r3, #2
  }
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	4613      	mov	r3, r2
 80043b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b4:	e02c      	b.n	8004410 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043bc:	d028      	beq.n	8004410 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80043c4:	f7fc f93a 	bl	800063c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d21d      	bcs.n	8004410 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043e2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	695a      	ldr	r2, [r3, #20]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2220      	movs	r2, #32
 8004400:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e00f      	b.n	8004430 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	4013      	ands	r3, r2
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	429a      	cmp	r2, r3
 800441e:	bf0c      	ite	eq
 8004420:	2301      	moveq	r3, #1
 8004422:	2300      	movne	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	461a      	mov	r2, r3
 8004428:	79fb      	ldrb	r3, [r7, #7]
 800442a:	429a      	cmp	r2, r3
 800442c:	d0c3      	beq.n	80043b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800447a:	f023 030c 	bic.w	r3, r3, #12
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	68f9      	ldr	r1, [r7, #12]
 8004484:	430b      	orrs	r3, r1
 8004486:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699a      	ldr	r2, [r3, #24]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a6:	f040 818b 	bne.w	80047c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4ac1      	ldr	r2, [pc, #772]	; (80047b4 <UART_SetConfig+0x37c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d005      	beq.n	80044c0 <UART_SetConfig+0x88>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4abf      	ldr	r2, [pc, #764]	; (80047b8 <UART_SetConfig+0x380>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	f040 80bd 	bne.w	800463a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044c0:	f7ff fa3c 	bl	800393c <HAL_RCC_GetPCLK2Freq>
 80044c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	461d      	mov	r5, r3
 80044ca:	f04f 0600 	mov.w	r6, #0
 80044ce:	46a8      	mov	r8, r5
 80044d0:	46b1      	mov	r9, r6
 80044d2:	eb18 0308 	adds.w	r3, r8, r8
 80044d6:	eb49 0409 	adc.w	r4, r9, r9
 80044da:	4698      	mov	r8, r3
 80044dc:	46a1      	mov	r9, r4
 80044de:	eb18 0805 	adds.w	r8, r8, r5
 80044e2:	eb49 0906 	adc.w	r9, r9, r6
 80044e6:	f04f 0100 	mov.w	r1, #0
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80044f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80044f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80044fa:	4688      	mov	r8, r1
 80044fc:	4691      	mov	r9, r2
 80044fe:	eb18 0005 	adds.w	r0, r8, r5
 8004502:	eb49 0106 	adc.w	r1, r9, r6
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	461d      	mov	r5, r3
 800450c:	f04f 0600 	mov.w	r6, #0
 8004510:	196b      	adds	r3, r5, r5
 8004512:	eb46 0406 	adc.w	r4, r6, r6
 8004516:	461a      	mov	r2, r3
 8004518:	4623      	mov	r3, r4
 800451a:	f7fb fea9 	bl	8000270 <__aeabi_uldivmod>
 800451e:	4603      	mov	r3, r0
 8004520:	460c      	mov	r4, r1
 8004522:	461a      	mov	r2, r3
 8004524:	4ba5      	ldr	r3, [pc, #660]	; (80047bc <UART_SetConfig+0x384>)
 8004526:	fba3 2302 	umull	r2, r3, r3, r2
 800452a:	095b      	lsrs	r3, r3, #5
 800452c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	461d      	mov	r5, r3
 8004534:	f04f 0600 	mov.w	r6, #0
 8004538:	46a9      	mov	r9, r5
 800453a:	46b2      	mov	sl, r6
 800453c:	eb19 0309 	adds.w	r3, r9, r9
 8004540:	eb4a 040a 	adc.w	r4, sl, sl
 8004544:	4699      	mov	r9, r3
 8004546:	46a2      	mov	sl, r4
 8004548:	eb19 0905 	adds.w	r9, r9, r5
 800454c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004550:	f04f 0100 	mov.w	r1, #0
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800455c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004560:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004564:	4689      	mov	r9, r1
 8004566:	4692      	mov	sl, r2
 8004568:	eb19 0005 	adds.w	r0, r9, r5
 800456c:	eb4a 0106 	adc.w	r1, sl, r6
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	461d      	mov	r5, r3
 8004576:	f04f 0600 	mov.w	r6, #0
 800457a:	196b      	adds	r3, r5, r5
 800457c:	eb46 0406 	adc.w	r4, r6, r6
 8004580:	461a      	mov	r2, r3
 8004582:	4623      	mov	r3, r4
 8004584:	f7fb fe74 	bl	8000270 <__aeabi_uldivmod>
 8004588:	4603      	mov	r3, r0
 800458a:	460c      	mov	r4, r1
 800458c:	461a      	mov	r2, r3
 800458e:	4b8b      	ldr	r3, [pc, #556]	; (80047bc <UART_SetConfig+0x384>)
 8004590:	fba3 1302 	umull	r1, r3, r3, r2
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	2164      	movs	r1, #100	; 0x64
 8004598:	fb01 f303 	mul.w	r3, r1, r3
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	3332      	adds	r3, #50	; 0x32
 80045a2:	4a86      	ldr	r2, [pc, #536]	; (80047bc <UART_SetConfig+0x384>)
 80045a4:	fba2 2303 	umull	r2, r3, r2, r3
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045b0:	4498      	add	r8, r3
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	461d      	mov	r5, r3
 80045b6:	f04f 0600 	mov.w	r6, #0
 80045ba:	46a9      	mov	r9, r5
 80045bc:	46b2      	mov	sl, r6
 80045be:	eb19 0309 	adds.w	r3, r9, r9
 80045c2:	eb4a 040a 	adc.w	r4, sl, sl
 80045c6:	4699      	mov	r9, r3
 80045c8:	46a2      	mov	sl, r4
 80045ca:	eb19 0905 	adds.w	r9, r9, r5
 80045ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80045d2:	f04f 0100 	mov.w	r1, #0
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045e6:	4689      	mov	r9, r1
 80045e8:	4692      	mov	sl, r2
 80045ea:	eb19 0005 	adds.w	r0, r9, r5
 80045ee:	eb4a 0106 	adc.w	r1, sl, r6
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	461d      	mov	r5, r3
 80045f8:	f04f 0600 	mov.w	r6, #0
 80045fc:	196b      	adds	r3, r5, r5
 80045fe:	eb46 0406 	adc.w	r4, r6, r6
 8004602:	461a      	mov	r2, r3
 8004604:	4623      	mov	r3, r4
 8004606:	f7fb fe33 	bl	8000270 <__aeabi_uldivmod>
 800460a:	4603      	mov	r3, r0
 800460c:	460c      	mov	r4, r1
 800460e:	461a      	mov	r2, r3
 8004610:	4b6a      	ldr	r3, [pc, #424]	; (80047bc <UART_SetConfig+0x384>)
 8004612:	fba3 1302 	umull	r1, r3, r3, r2
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	2164      	movs	r1, #100	; 0x64
 800461a:	fb01 f303 	mul.w	r3, r1, r3
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	3332      	adds	r3, #50	; 0x32
 8004624:	4a65      	ldr	r2, [pc, #404]	; (80047bc <UART_SetConfig+0x384>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	f003 0207 	and.w	r2, r3, #7
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4442      	add	r2, r8
 8004636:	609a      	str	r2, [r3, #8]
 8004638:	e26f      	b.n	8004b1a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800463a:	f7ff f96b 	bl	8003914 <HAL_RCC_GetPCLK1Freq>
 800463e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	461d      	mov	r5, r3
 8004644:	f04f 0600 	mov.w	r6, #0
 8004648:	46a8      	mov	r8, r5
 800464a:	46b1      	mov	r9, r6
 800464c:	eb18 0308 	adds.w	r3, r8, r8
 8004650:	eb49 0409 	adc.w	r4, r9, r9
 8004654:	4698      	mov	r8, r3
 8004656:	46a1      	mov	r9, r4
 8004658:	eb18 0805 	adds.w	r8, r8, r5
 800465c:	eb49 0906 	adc.w	r9, r9, r6
 8004660:	f04f 0100 	mov.w	r1, #0
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800466c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004670:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004674:	4688      	mov	r8, r1
 8004676:	4691      	mov	r9, r2
 8004678:	eb18 0005 	adds.w	r0, r8, r5
 800467c:	eb49 0106 	adc.w	r1, r9, r6
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	461d      	mov	r5, r3
 8004686:	f04f 0600 	mov.w	r6, #0
 800468a:	196b      	adds	r3, r5, r5
 800468c:	eb46 0406 	adc.w	r4, r6, r6
 8004690:	461a      	mov	r2, r3
 8004692:	4623      	mov	r3, r4
 8004694:	f7fb fdec 	bl	8000270 <__aeabi_uldivmod>
 8004698:	4603      	mov	r3, r0
 800469a:	460c      	mov	r4, r1
 800469c:	461a      	mov	r2, r3
 800469e:	4b47      	ldr	r3, [pc, #284]	; (80047bc <UART_SetConfig+0x384>)
 80046a0:	fba3 2302 	umull	r2, r3, r3, r2
 80046a4:	095b      	lsrs	r3, r3, #5
 80046a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	461d      	mov	r5, r3
 80046ae:	f04f 0600 	mov.w	r6, #0
 80046b2:	46a9      	mov	r9, r5
 80046b4:	46b2      	mov	sl, r6
 80046b6:	eb19 0309 	adds.w	r3, r9, r9
 80046ba:	eb4a 040a 	adc.w	r4, sl, sl
 80046be:	4699      	mov	r9, r3
 80046c0:	46a2      	mov	sl, r4
 80046c2:	eb19 0905 	adds.w	r9, r9, r5
 80046c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80046ca:	f04f 0100 	mov.w	r1, #0
 80046ce:	f04f 0200 	mov.w	r2, #0
 80046d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046de:	4689      	mov	r9, r1
 80046e0:	4692      	mov	sl, r2
 80046e2:	eb19 0005 	adds.w	r0, r9, r5
 80046e6:	eb4a 0106 	adc.w	r1, sl, r6
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	461d      	mov	r5, r3
 80046f0:	f04f 0600 	mov.w	r6, #0
 80046f4:	196b      	adds	r3, r5, r5
 80046f6:	eb46 0406 	adc.w	r4, r6, r6
 80046fa:	461a      	mov	r2, r3
 80046fc:	4623      	mov	r3, r4
 80046fe:	f7fb fdb7 	bl	8000270 <__aeabi_uldivmod>
 8004702:	4603      	mov	r3, r0
 8004704:	460c      	mov	r4, r1
 8004706:	461a      	mov	r2, r3
 8004708:	4b2c      	ldr	r3, [pc, #176]	; (80047bc <UART_SetConfig+0x384>)
 800470a:	fba3 1302 	umull	r1, r3, r3, r2
 800470e:	095b      	lsrs	r3, r3, #5
 8004710:	2164      	movs	r1, #100	; 0x64
 8004712:	fb01 f303 	mul.w	r3, r1, r3
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	3332      	adds	r3, #50	; 0x32
 800471c:	4a27      	ldr	r2, [pc, #156]	; (80047bc <UART_SetConfig+0x384>)
 800471e:	fba2 2303 	umull	r2, r3, r2, r3
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800472a:	4498      	add	r8, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	461d      	mov	r5, r3
 8004730:	f04f 0600 	mov.w	r6, #0
 8004734:	46a9      	mov	r9, r5
 8004736:	46b2      	mov	sl, r6
 8004738:	eb19 0309 	adds.w	r3, r9, r9
 800473c:	eb4a 040a 	adc.w	r4, sl, sl
 8004740:	4699      	mov	r9, r3
 8004742:	46a2      	mov	sl, r4
 8004744:	eb19 0905 	adds.w	r9, r9, r5
 8004748:	eb4a 0a06 	adc.w	sl, sl, r6
 800474c:	f04f 0100 	mov.w	r1, #0
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004758:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800475c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004760:	4689      	mov	r9, r1
 8004762:	4692      	mov	sl, r2
 8004764:	eb19 0005 	adds.w	r0, r9, r5
 8004768:	eb4a 0106 	adc.w	r1, sl, r6
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	461d      	mov	r5, r3
 8004772:	f04f 0600 	mov.w	r6, #0
 8004776:	196b      	adds	r3, r5, r5
 8004778:	eb46 0406 	adc.w	r4, r6, r6
 800477c:	461a      	mov	r2, r3
 800477e:	4623      	mov	r3, r4
 8004780:	f7fb fd76 	bl	8000270 <__aeabi_uldivmod>
 8004784:	4603      	mov	r3, r0
 8004786:	460c      	mov	r4, r1
 8004788:	461a      	mov	r2, r3
 800478a:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <UART_SetConfig+0x384>)
 800478c:	fba3 1302 	umull	r1, r3, r3, r2
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	2164      	movs	r1, #100	; 0x64
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	3332      	adds	r3, #50	; 0x32
 800479e:	4a07      	ldr	r2, [pc, #28]	; (80047bc <UART_SetConfig+0x384>)
 80047a0:	fba2 2303 	umull	r2, r3, r2, r3
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	f003 0207 	and.w	r2, r3, #7
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4442      	add	r2, r8
 80047b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80047b2:	e1b2      	b.n	8004b1a <UART_SetConfig+0x6e2>
 80047b4:	40011000 	.word	0x40011000
 80047b8:	40011400 	.word	0x40011400
 80047bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4ad7      	ldr	r2, [pc, #860]	; (8004b24 <UART_SetConfig+0x6ec>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d005      	beq.n	80047d6 <UART_SetConfig+0x39e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4ad6      	ldr	r2, [pc, #856]	; (8004b28 <UART_SetConfig+0x6f0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	f040 80d1 	bne.w	8004978 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80047d6:	f7ff f8b1 	bl	800393c <HAL_RCC_GetPCLK2Freq>
 80047da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	469a      	mov	sl, r3
 80047e0:	f04f 0b00 	mov.w	fp, #0
 80047e4:	46d0      	mov	r8, sl
 80047e6:	46d9      	mov	r9, fp
 80047e8:	eb18 0308 	adds.w	r3, r8, r8
 80047ec:	eb49 0409 	adc.w	r4, r9, r9
 80047f0:	4698      	mov	r8, r3
 80047f2:	46a1      	mov	r9, r4
 80047f4:	eb18 080a 	adds.w	r8, r8, sl
 80047f8:	eb49 090b 	adc.w	r9, r9, fp
 80047fc:	f04f 0100 	mov.w	r1, #0
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004808:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800480c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004810:	4688      	mov	r8, r1
 8004812:	4691      	mov	r9, r2
 8004814:	eb1a 0508 	adds.w	r5, sl, r8
 8004818:	eb4b 0609 	adc.w	r6, fp, r9
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	4619      	mov	r1, r3
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	f04f 0400 	mov.w	r4, #0
 800482e:	0094      	lsls	r4, r2, #2
 8004830:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004834:	008b      	lsls	r3, r1, #2
 8004836:	461a      	mov	r2, r3
 8004838:	4623      	mov	r3, r4
 800483a:	4628      	mov	r0, r5
 800483c:	4631      	mov	r1, r6
 800483e:	f7fb fd17 	bl	8000270 <__aeabi_uldivmod>
 8004842:	4603      	mov	r3, r0
 8004844:	460c      	mov	r4, r1
 8004846:	461a      	mov	r2, r3
 8004848:	4bb8      	ldr	r3, [pc, #736]	; (8004b2c <UART_SetConfig+0x6f4>)
 800484a:	fba3 2302 	umull	r2, r3, r3, r2
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	469b      	mov	fp, r3
 8004858:	f04f 0c00 	mov.w	ip, #0
 800485c:	46d9      	mov	r9, fp
 800485e:	46e2      	mov	sl, ip
 8004860:	eb19 0309 	adds.w	r3, r9, r9
 8004864:	eb4a 040a 	adc.w	r4, sl, sl
 8004868:	4699      	mov	r9, r3
 800486a:	46a2      	mov	sl, r4
 800486c:	eb19 090b 	adds.w	r9, r9, fp
 8004870:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004874:	f04f 0100 	mov.w	r1, #0
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004880:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004884:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004888:	4689      	mov	r9, r1
 800488a:	4692      	mov	sl, r2
 800488c:	eb1b 0509 	adds.w	r5, fp, r9
 8004890:	eb4c 060a 	adc.w	r6, ip, sl
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4619      	mov	r1, r3
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	f04f 0400 	mov.w	r4, #0
 80048a6:	0094      	lsls	r4, r2, #2
 80048a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048ac:	008b      	lsls	r3, r1, #2
 80048ae:	461a      	mov	r2, r3
 80048b0:	4623      	mov	r3, r4
 80048b2:	4628      	mov	r0, r5
 80048b4:	4631      	mov	r1, r6
 80048b6:	f7fb fcdb 	bl	8000270 <__aeabi_uldivmod>
 80048ba:	4603      	mov	r3, r0
 80048bc:	460c      	mov	r4, r1
 80048be:	461a      	mov	r2, r3
 80048c0:	4b9a      	ldr	r3, [pc, #616]	; (8004b2c <UART_SetConfig+0x6f4>)
 80048c2:	fba3 1302 	umull	r1, r3, r3, r2
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	2164      	movs	r1, #100	; 0x64
 80048ca:	fb01 f303 	mul.w	r3, r1, r3
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	3332      	adds	r3, #50	; 0x32
 80048d4:	4a95      	ldr	r2, [pc, #596]	; (8004b2c <UART_SetConfig+0x6f4>)
 80048d6:	fba2 2303 	umull	r2, r3, r2, r3
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048e0:	4498      	add	r8, r3
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	469b      	mov	fp, r3
 80048e6:	f04f 0c00 	mov.w	ip, #0
 80048ea:	46d9      	mov	r9, fp
 80048ec:	46e2      	mov	sl, ip
 80048ee:	eb19 0309 	adds.w	r3, r9, r9
 80048f2:	eb4a 040a 	adc.w	r4, sl, sl
 80048f6:	4699      	mov	r9, r3
 80048f8:	46a2      	mov	sl, r4
 80048fa:	eb19 090b 	adds.w	r9, r9, fp
 80048fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004902:	f04f 0100 	mov.w	r1, #0
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800490e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004912:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004916:	4689      	mov	r9, r1
 8004918:	4692      	mov	sl, r2
 800491a:	eb1b 0509 	adds.w	r5, fp, r9
 800491e:	eb4c 060a 	adc.w	r6, ip, sl
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4619      	mov	r1, r3
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	f04f 0400 	mov.w	r4, #0
 8004934:	0094      	lsls	r4, r2, #2
 8004936:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800493a:	008b      	lsls	r3, r1, #2
 800493c:	461a      	mov	r2, r3
 800493e:	4623      	mov	r3, r4
 8004940:	4628      	mov	r0, r5
 8004942:	4631      	mov	r1, r6
 8004944:	f7fb fc94 	bl	8000270 <__aeabi_uldivmod>
 8004948:	4603      	mov	r3, r0
 800494a:	460c      	mov	r4, r1
 800494c:	461a      	mov	r2, r3
 800494e:	4b77      	ldr	r3, [pc, #476]	; (8004b2c <UART_SetConfig+0x6f4>)
 8004950:	fba3 1302 	umull	r1, r3, r3, r2
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	2164      	movs	r1, #100	; 0x64
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	3332      	adds	r3, #50	; 0x32
 8004962:	4a72      	ldr	r2, [pc, #456]	; (8004b2c <UART_SetConfig+0x6f4>)
 8004964:	fba2 2303 	umull	r2, r3, r2, r3
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	f003 020f 	and.w	r2, r3, #15
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4442      	add	r2, r8
 8004974:	609a      	str	r2, [r3, #8]
 8004976:	e0d0      	b.n	8004b1a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004978:	f7fe ffcc 	bl	8003914 <HAL_RCC_GetPCLK1Freq>
 800497c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	469a      	mov	sl, r3
 8004982:	f04f 0b00 	mov.w	fp, #0
 8004986:	46d0      	mov	r8, sl
 8004988:	46d9      	mov	r9, fp
 800498a:	eb18 0308 	adds.w	r3, r8, r8
 800498e:	eb49 0409 	adc.w	r4, r9, r9
 8004992:	4698      	mov	r8, r3
 8004994:	46a1      	mov	r9, r4
 8004996:	eb18 080a 	adds.w	r8, r8, sl
 800499a:	eb49 090b 	adc.w	r9, r9, fp
 800499e:	f04f 0100 	mov.w	r1, #0
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80049aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80049ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80049b2:	4688      	mov	r8, r1
 80049b4:	4691      	mov	r9, r2
 80049b6:	eb1a 0508 	adds.w	r5, sl, r8
 80049ba:	eb4b 0609 	adc.w	r6, fp, r9
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	4619      	mov	r1, r3
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	f04f 0400 	mov.w	r4, #0
 80049d0:	0094      	lsls	r4, r2, #2
 80049d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049d6:	008b      	lsls	r3, r1, #2
 80049d8:	461a      	mov	r2, r3
 80049da:	4623      	mov	r3, r4
 80049dc:	4628      	mov	r0, r5
 80049de:	4631      	mov	r1, r6
 80049e0:	f7fb fc46 	bl	8000270 <__aeabi_uldivmod>
 80049e4:	4603      	mov	r3, r0
 80049e6:	460c      	mov	r4, r1
 80049e8:	461a      	mov	r2, r3
 80049ea:	4b50      	ldr	r3, [pc, #320]	; (8004b2c <UART_SetConfig+0x6f4>)
 80049ec:	fba3 2302 	umull	r2, r3, r3, r2
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	469b      	mov	fp, r3
 80049fa:	f04f 0c00 	mov.w	ip, #0
 80049fe:	46d9      	mov	r9, fp
 8004a00:	46e2      	mov	sl, ip
 8004a02:	eb19 0309 	adds.w	r3, r9, r9
 8004a06:	eb4a 040a 	adc.w	r4, sl, sl
 8004a0a:	4699      	mov	r9, r3
 8004a0c:	46a2      	mov	sl, r4
 8004a0e:	eb19 090b 	adds.w	r9, r9, fp
 8004a12:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a16:	f04f 0100 	mov.w	r1, #0
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a2a:	4689      	mov	r9, r1
 8004a2c:	4692      	mov	sl, r2
 8004a2e:	eb1b 0509 	adds.w	r5, fp, r9
 8004a32:	eb4c 060a 	adc.w	r6, ip, sl
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	f04f 0400 	mov.w	r4, #0
 8004a48:	0094      	lsls	r4, r2, #2
 8004a4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a4e:	008b      	lsls	r3, r1, #2
 8004a50:	461a      	mov	r2, r3
 8004a52:	4623      	mov	r3, r4
 8004a54:	4628      	mov	r0, r5
 8004a56:	4631      	mov	r1, r6
 8004a58:	f7fb fc0a 	bl	8000270 <__aeabi_uldivmod>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	461a      	mov	r2, r3
 8004a62:	4b32      	ldr	r3, [pc, #200]	; (8004b2c <UART_SetConfig+0x6f4>)
 8004a64:	fba3 1302 	umull	r1, r3, r3, r2
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	2164      	movs	r1, #100	; 0x64
 8004a6c:	fb01 f303 	mul.w	r3, r1, r3
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	3332      	adds	r3, #50	; 0x32
 8004a76:	4a2d      	ldr	r2, [pc, #180]	; (8004b2c <UART_SetConfig+0x6f4>)
 8004a78:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7c:	095b      	lsrs	r3, r3, #5
 8004a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a82:	4498      	add	r8, r3
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	469b      	mov	fp, r3
 8004a88:	f04f 0c00 	mov.w	ip, #0
 8004a8c:	46d9      	mov	r9, fp
 8004a8e:	46e2      	mov	sl, ip
 8004a90:	eb19 0309 	adds.w	r3, r9, r9
 8004a94:	eb4a 040a 	adc.w	r4, sl, sl
 8004a98:	4699      	mov	r9, r3
 8004a9a:	46a2      	mov	sl, r4
 8004a9c:	eb19 090b 	adds.w	r9, r9, fp
 8004aa0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004aa4:	f04f 0100 	mov.w	r1, #0
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ab0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ab4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ab8:	4689      	mov	r9, r1
 8004aba:	4692      	mov	sl, r2
 8004abc:	eb1b 0509 	adds.w	r5, fp, r9
 8004ac0:	eb4c 060a 	adc.w	r6, ip, sl
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	f04f 0400 	mov.w	r4, #0
 8004ad6:	0094      	lsls	r4, r2, #2
 8004ad8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004adc:	008b      	lsls	r3, r1, #2
 8004ade:	461a      	mov	r2, r3
 8004ae0:	4623      	mov	r3, r4
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	4631      	mov	r1, r6
 8004ae6:	f7fb fbc3 	bl	8000270 <__aeabi_uldivmod>
 8004aea:	4603      	mov	r3, r0
 8004aec:	460c      	mov	r4, r1
 8004aee:	461a      	mov	r2, r3
 8004af0:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <UART_SetConfig+0x6f4>)
 8004af2:	fba3 1302 	umull	r1, r3, r3, r2
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	2164      	movs	r1, #100	; 0x64
 8004afa:	fb01 f303 	mul.w	r3, r1, r3
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	011b      	lsls	r3, r3, #4
 8004b02:	3332      	adds	r3, #50	; 0x32
 8004b04:	4a09      	ldr	r2, [pc, #36]	; (8004b2c <UART_SetConfig+0x6f4>)
 8004b06:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0a:	095b      	lsrs	r3, r3, #5
 8004b0c:	f003 020f 	and.w	r2, r3, #15
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4442      	add	r2, r8
 8004b16:	609a      	str	r2, [r3, #8]
}
 8004b18:	e7ff      	b.n	8004b1a <UART_SetConfig+0x6e2>
 8004b1a:	bf00      	nop
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b24:	40011000 	.word	0x40011000
 8004b28:	40011400 	.word	0x40011400
 8004b2c:	51eb851f 	.word	0x51eb851f

08004b30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b30:	b084      	sub	sp, #16
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	f107 001c 	add.w	r0, r7, #28
 8004b3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d122      	bne.n	8004b8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d105      	bne.n	8004b82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f94a 	bl	8004e1c <USB_CoreReset>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	73fb      	strb	r3, [r7, #15]
 8004b8c:	e01a      	b.n	8004bc4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f93e 	bl	8004e1c <USB_CoreReset>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d106      	bne.n	8004bb8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	639a      	str	r2, [r3, #56]	; 0x38
 8004bb6:	e005      	b.n	8004bc4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d10b      	bne.n	8004be2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f043 0206 	orr.w	r2, r3, #6
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f043 0220 	orr.w	r2, r3, #32
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bee:	b004      	add	sp, #16
 8004bf0:	4770      	bx	lr

08004bf2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f043 0201 	orr.w	r2, r3, #1
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	f023 0201 	bic.w	r2, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c4e:	78fb      	ldrb	r3, [r7, #3]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d106      	bne.n	8004c62 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	60da      	str	r2, [r3, #12]
 8004c60:	e00b      	b.n	8004c7a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d106      	bne.n	8004c76 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	60da      	str	r2, [r3, #12]
 8004c74:	e001      	b.n	8004c7a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e003      	b.n	8004c82 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004c7a:	2032      	movs	r0, #50	; 0x32
 8004c7c:	f7fb fcea 	bl	8000654 <HAL_Delay>

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
	...

08004c8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	019b      	lsls	r3, r3, #6
 8004c9e:	f043 0220 	orr.w	r2, r3, #32
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4a09      	ldr	r2, [pc, #36]	; (8004cd4 <USB_FlushTxFifo+0x48>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e006      	b.n	8004cc6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	d0f0      	beq.n	8004ca6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3714      	adds	r7, #20
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	00030d40 	.word	0x00030d40

08004cd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2210      	movs	r2, #16
 8004ce8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3301      	adds	r3, #1
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a09      	ldr	r2, [pc, #36]	; (8004d18 <USB_FlushRxFifo+0x40>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d901      	bls.n	8004cfc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e006      	b.n	8004d0a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d0f0      	beq.n	8004cea <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	00030d40 	.word	0x00030d40

08004d1c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b089      	sub	sp, #36	; 0x24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	4611      	mov	r1, r2
 8004d28:	461a      	mov	r2, r3
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	71fb      	strb	r3, [r7, #7]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004d3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d11a      	bne.n	8004d78 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d42:	88bb      	ldrh	r3, [r7, #4]
 8004d44:	3303      	adds	r3, #3
 8004d46:	089b      	lsrs	r3, r3, #2
 8004d48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	e00f      	b.n	8004d70 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	031a      	lsls	r2, r3, #12
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	3304      	adds	r3, #4
 8004d68:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	61bb      	str	r3, [r7, #24]
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d3eb      	bcc.n	8004d50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3724      	adds	r7, #36	; 0x24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b089      	sub	sp, #36	; 0x24
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	4613      	mov	r3, r2
 8004d92:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004d9c:	88fb      	ldrh	r3, [r7, #6]
 8004d9e:	3303      	adds	r3, #3
 8004da0:	089b      	lsrs	r3, r3, #2
 8004da2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004da4:	2300      	movs	r3, #0
 8004da6:	61bb      	str	r3, [r7, #24]
 8004da8:	e00b      	b.n	8004dc2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	601a      	str	r2, [r3, #0]
    pDest++;
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3304      	adds	r3, #4
 8004dba:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d3ef      	bcc.n	8004daa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004dca:	69fb      	ldr	r3, [r7, #28]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3724      	adds	r7, #36	; 0x24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	4013      	ands	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004df0:	68fb      	ldr	r3, [r7, #12]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4a13      	ldr	r2, [pc, #76]	; (8004e80 <USB_CoreReset+0x64>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d901      	bls.n	8004e3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e01b      	b.n	8004e72 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	daf2      	bge.n	8004e28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f043 0201 	orr.w	r2, r3, #1
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3301      	adds	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4a09      	ldr	r2, [pc, #36]	; (8004e80 <USB_CoreReset+0x64>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d901      	bls.n	8004e64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e006      	b.n	8004e72 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d0f0      	beq.n	8004e52 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	00030d40 	.word	0x00030d40

08004e84 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e84:	b084      	sub	sp, #16
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	f107 001c 	add.w	r0, r7, #28
 8004e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eaa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d018      	beq.n	8004f08 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d10a      	bne.n	8004ef2 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004eea:	f043 0304 	orr.w	r3, r3, #4
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	e014      	b.n	8004f1c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f00:	f023 0304 	bic.w	r3, r3, #4
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	e009      	b.n	8004f1c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f16:	f023 0304 	bic.w	r3, r3, #4
 8004f1a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004f1c:	2110      	movs	r1, #16
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7ff feb4 	bl	8004c8c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff fed7 	bl	8004cd8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	e015      	b.n	8004f5c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f42:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f50:	461a      	mov	r2, r3
 8004f52:	2300      	movs	r3, #0
 8004f54:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d3e5      	bcc.n	8004f30 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004f64:	2101      	movs	r1, #1
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f8ac 	bl	80050c4 <USB_DriveVbus>

  HAL_Delay(200U);
 8004f6c:	20c8      	movs	r0, #200	; 0xc8
 8004f6e:	f7fb fb71 	bl	8000654 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00b      	beq.n	8004fa4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f92:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a14      	ldr	r2, [pc, #80]	; (8004fe8 <USB_HostInit+0x164>)
 8004f98:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a13      	ldr	r2, [pc, #76]	; (8004fec <USB_HostInit+0x168>)
 8004f9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004fa2:	e009      	b.n	8004fb8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2280      	movs	r2, #128	; 0x80
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a10      	ldr	r2, [pc, #64]	; (8004ff0 <USB_HostInit+0x16c>)
 8004fae:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a10      	ldr	r2, [pc, #64]	; (8004ff4 <USB_HostInit+0x170>)
 8004fb4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d105      	bne.n	8004fca <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	f043 0210 	orr.w	r2, r3, #16
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	699a      	ldr	r2, [r3, #24]
 8004fce:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <USB_HostInit+0x174>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fe2:	b004      	add	sp, #16
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	01000200 	.word	0x01000200
 8004fec:	00e00300 	.word	0x00e00300
 8004ff0:	00600080 	.word	0x00600080
 8004ff4:	004000e0 	.word	0x004000e0
 8004ff8:	a3200008 	.word	0xa3200008

08004ffc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800501a:	f023 0303 	bic.w	r3, r3, #3
 800501e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005034:	4313      	orrs	r3, r2
 8005036:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d107      	bne.n	800504e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005044:	461a      	mov	r2, r3
 8005046:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800504a:	6053      	str	r3, [r2, #4]
 800504c:	e009      	b.n	8005062 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d106      	bne.n	8005062 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800505a:	461a      	mov	r2, r3
 800505c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005060:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005090:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800509a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80050a0:	2064      	movs	r0, #100	; 0x64
 80050a2:	f7fb fad7 	bl	8000654 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80050b4:	200a      	movs	r0, #10
 80050b6:	f7fb facd 	bl	8000654 <HAL_Delay>

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050e8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d109      	bne.n	8005108 <USB_DriveVbus+0x44>
 80050f4:	78fb      	ldrb	r3, [r7, #3]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d106      	bne.n	8005108 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005102:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005106:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800510e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005112:	d109      	bne.n	8005128 <USB_DriveVbus+0x64>
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005126:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	0c5b      	lsrs	r3, r3, #17
 8005154:	f003 0303 	and.w	r3, r3, #3
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	b29b      	uxth	r3, r3
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
	...

08005188 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	4608      	mov	r0, r1
 8005192:	4611      	mov	r1, r2
 8005194:	461a      	mov	r2, r3
 8005196:	4603      	mov	r3, r0
 8005198:	70fb      	strb	r3, [r7, #3]
 800519a:	460b      	mov	r3, r1
 800519c:	70bb      	strb	r3, [r7, #2]
 800519e:	4613      	mov	r3, r2
 80051a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b6:	461a      	mov	r2, r3
 80051b8:	f04f 33ff 	mov.w	r3, #4294967295
 80051bc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80051be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d87e      	bhi.n	80052c4 <USB_HC_Init+0x13c>
 80051c6:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <USB_HC_Init+0x44>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	080051dd 	.word	0x080051dd
 80051d0:	08005287 	.word	0x08005287
 80051d4:	080051dd 	.word	0x080051dd
 80051d8:	08005249 	.word	0x08005249
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e8:	461a      	mov	r2, r3
 80051ea:	f240 439d 	movw	r3, #1181	; 0x49d
 80051ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80051f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	da10      	bge.n	800521a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	78fa      	ldrb	r2, [r7, #3]
 8005208:	0151      	lsls	r1, r2, #5
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	440a      	add	r2, r1
 800520e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005216:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005218:	e057      	b.n	80052ca <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d051      	beq.n	80052ca <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005226:	78fb      	ldrb	r3, [r7, #3]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	4413      	add	r3, r2
 800522e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	78fa      	ldrb	r2, [r7, #3]
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	440a      	add	r2, r1
 800523c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005240:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005244:	60d3      	str	r3, [r2, #12]
      break;
 8005246:	e040      	b.n	80052ca <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4413      	add	r3, r2
 8005250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005254:	461a      	mov	r2, r3
 8005256:	f240 639d 	movw	r3, #1693	; 0x69d
 800525a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800525c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005260:	2b00      	cmp	r3, #0
 8005262:	da34      	bge.n	80052ce <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4413      	add	r3, r2
 800526c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	0151      	lsls	r1, r2, #5
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	440a      	add	r2, r1
 800527a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800527e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005282:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005284:	e023      	b.n	80052ce <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005286:	78fb      	ldrb	r3, [r7, #3]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	4413      	add	r3, r2
 800528e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005292:	461a      	mov	r2, r3
 8005294:	f240 2325 	movw	r3, #549	; 0x225
 8005298:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800529a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	da17      	bge.n	80052d2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80052a2:	78fb      	ldrb	r3, [r7, #3]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	78fa      	ldrb	r2, [r7, #3]
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052bc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80052c0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80052c2:	e006      	b.n	80052d2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	75fb      	strb	r3, [r7, #23]
      break;
 80052c8:	e004      	b.n	80052d4 <USB_HC_Init+0x14c>
      break;
 80052ca:	bf00      	nop
 80052cc:	e002      	b.n	80052d4 <USB_HC_Init+0x14c>
      break;
 80052ce:	bf00      	nop
 80052d0:	e000      	b.n	80052d4 <USB_HC_Init+0x14c>
      break;
 80052d2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052da:	699a      	ldr	r2, [r3, #24]
 80052dc:	78fb      	ldrb	r3, [r7, #3]
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	2101      	movs	r1, #1
 80052e4:	fa01 f303 	lsl.w	r3, r1, r3
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052ee:	4313      	orrs	r3, r2
 80052f0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80052fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005302:	2b00      	cmp	r3, #0
 8005304:	da03      	bge.n	800530e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800530a:	613b      	str	r3, [r7, #16]
 800530c:	e001      	b.n	8005312 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005312:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005316:	2b02      	cmp	r3, #2
 8005318:	d103      	bne.n	8005322 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800531a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	e001      	b.n	8005326 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005326:	787b      	ldrb	r3, [r7, #1]
 8005328:	059b      	lsls	r3, r3, #22
 800532a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800532e:	78bb      	ldrb	r3, [r7, #2]
 8005330:	02db      	lsls	r3, r3, #11
 8005332:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005336:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005338:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800533c:	049b      	lsls	r3, r3, #18
 800533e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005342:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005344:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005346:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800534a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	0159      	lsls	r1, r3, #5
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	440b      	add	r3, r1
 8005358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005362:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005364:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005368:	2b03      	cmp	r3, #3
 800536a:	d10f      	bne.n	800538c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4413      	add	r3, r2
 8005374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	78fa      	ldrb	r2, [r7, #3]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	440a      	add	r2, r1
 8005382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005386:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800538a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800538c:	7dfb      	ldrb	r3, [r7, #23]
}
 800538e:	4618      	mov	r0, r3
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop

0800539c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08c      	sub	sp, #48	; 0x30
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	4613      	mov	r3, r2
 80053a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80053b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053b8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d028      	beq.n	8005418 <USB_HC_StartXfer+0x7c>
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	791b      	ldrb	r3, [r3, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d124      	bne.n	8005418 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10b      	bne.n	80053ec <USB_HC_StartXfer+0x50>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	795b      	ldrb	r3, [r3, #5]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d107      	bne.n	80053ec <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	785b      	ldrb	r3, [r3, #1]
 80053e0:	4619      	mov	r1, r3
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f000 fa2e 	bl	8005844 <USB_DoPing>
      return HAL_OK;
 80053e8:	2300      	movs	r3, #0
 80053ea:	e112      	b.n	8005612 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80053ec:	79fb      	ldrb	r3, [r7, #7]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d112      	bne.n	8005418 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	6a3a      	ldr	r2, [r7, #32]
 8005406:	440a      	add	r2, r1
 8005408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800540c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005410:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2200      	movs	r2, #0
 8005416:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d018      	beq.n	8005452 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	8912      	ldrh	r2, [r2, #8]
 8005428:	4413      	add	r3, r2
 800542a:	3b01      	subs	r3, #1
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	8912      	ldrh	r2, [r2, #8]
 8005430:	fbb3 f3f2 	udiv	r3, r3, r2
 8005434:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005436:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005438:	8b7b      	ldrh	r3, [r7, #26]
 800543a:	429a      	cmp	r2, r3
 800543c:	d90b      	bls.n	8005456 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800543e:	8b7b      	ldrh	r3, [r7, #26]
 8005440:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005442:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	8912      	ldrh	r2, [r2, #8]
 8005448:	fb02 f203 	mul.w	r2, r2, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	611a      	str	r2, [r3, #16]
 8005450:	e001      	b.n	8005456 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005452:	2301      	movs	r3, #1
 8005454:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	78db      	ldrb	r3, [r3, #3]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d006      	beq.n	800546c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800545e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	8912      	ldrh	r2, [r2, #8]
 8005464:	fb02 f203 	mul.w	r2, r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005474:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005476:	04d9      	lsls	r1, r3, #19
 8005478:	4b68      	ldr	r3, [pc, #416]	; (800561c <USB_HC_StartXfer+0x280>)
 800547a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800547c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	7a9b      	ldrb	r3, [r3, #10]
 8005482:	075b      	lsls	r3, r3, #29
 8005484:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005488:	69f9      	ldr	r1, [r7, #28]
 800548a:	0148      	lsls	r0, r1, #5
 800548c:	6a39      	ldr	r1, [r7, #32]
 800548e:	4401      	add	r1, r0
 8005490:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005494:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005496:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	68d9      	ldr	r1, [r3, #12]
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ae:	460a      	mov	r2, r1
 80054b0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	bf0c      	ite	eq
 80054c2:	2301      	moveq	r3, #1
 80054c4:	2300      	movne	r3, #0
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	015a      	lsls	r2, r3, #5
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	4413      	add	r3, r2
 80054d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	0151      	lsls	r1, r2, #5
 80054dc:	6a3a      	ldr	r2, [r7, #32]
 80054de:	440a      	add	r2, r1
 80054e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80054e8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	7e7b      	ldrb	r3, [r7, #25]
 80054fa:	075b      	lsls	r3, r3, #29
 80054fc:	69f9      	ldr	r1, [r7, #28]
 80054fe:	0148      	lsls	r0, r1, #5
 8005500:	6a39      	ldr	r1, [r7, #32]
 8005502:	4401      	add	r1, r0
 8005504:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005508:	4313      	orrs	r3, r2
 800550a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	4413      	add	r3, r2
 8005514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a41      	ldr	r2, [pc, #260]	; (8005620 <USB_HC_StartXfer+0x284>)
 800551c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800551e:	4b40      	ldr	r3, [pc, #256]	; (8005620 <USB_HC_StartXfer+0x284>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005526:	4a3e      	ldr	r2, [pc, #248]	; (8005620 <USB_HC_StartXfer+0x284>)
 8005528:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	78db      	ldrb	r3, [r3, #3]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d006      	beq.n	8005540 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005532:	4b3b      	ldr	r3, [pc, #236]	; (8005620 <USB_HC_StartXfer+0x284>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553a:	4a39      	ldr	r2, [pc, #228]	; (8005620 <USB_HC_StartXfer+0x284>)
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	e005      	b.n	800554c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005540:	4b37      	ldr	r3, [pc, #220]	; (8005620 <USB_HC_StartXfer+0x284>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005548:	4a35      	ldr	r2, [pc, #212]	; (8005620 <USB_HC_StartXfer+0x284>)
 800554a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800554c:	4b34      	ldr	r3, [pc, #208]	; (8005620 <USB_HC_StartXfer+0x284>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005554:	4a32      	ldr	r2, [pc, #200]	; (8005620 <USB_HC_StartXfer+0x284>)
 8005556:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	4413      	add	r3, r2
 8005560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005564:	461a      	mov	r2, r3
 8005566:	4b2e      	ldr	r3, [pc, #184]	; (8005620 <USB_HC_StartXfer+0x284>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d14e      	bne.n	8005610 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	78db      	ldrb	r3, [r3, #3]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d14a      	bne.n	8005610 <USB_HC_StartXfer+0x274>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d046      	beq.n	8005610 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	79db      	ldrb	r3, [r3, #7]
 8005586:	2b03      	cmp	r3, #3
 8005588:	d830      	bhi.n	80055ec <USB_HC_StartXfer+0x250>
 800558a:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <USB_HC_StartXfer+0x1f4>)
 800558c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005590:	080055a1 	.word	0x080055a1
 8005594:	080055c5 	.word	0x080055c5
 8005598:	080055a1 	.word	0x080055a1
 800559c:	080055c5 	.word	0x080055c5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	3303      	adds	r3, #3
 80055a6:	089b      	lsrs	r3, r3, #2
 80055a8:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80055aa:	8afa      	ldrh	r2, [r7, #22]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d91c      	bls.n	80055f0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	619a      	str	r2, [r3, #24]
          }
          break;
 80055c2:	e015      	b.n	80055f0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	3303      	adds	r3, #3
 80055ca:	089b      	lsrs	r3, r3, #2
 80055cc:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80055ce:	8afa      	ldrh	r2, [r7, #22]
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	429a      	cmp	r2, r3
 80055dc:	d90a      	bls.n	80055f4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	619a      	str	r2, [r3, #24]
          }
          break;
 80055ea:	e003      	b.n	80055f4 <USB_HC_StartXfer+0x258>

        default:
          break;
 80055ec:	bf00      	nop
 80055ee:	e002      	b.n	80055f6 <USB_HC_StartXfer+0x25a>
          break;
 80055f0:	bf00      	nop
 80055f2:	e000      	b.n	80055f6 <USB_HC_StartXfer+0x25a>
          break;
 80055f4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	68d9      	ldr	r1, [r3, #12]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	785a      	ldrb	r2, [r3, #1]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	b298      	uxth	r0, r3
 8005604:	2300      	movs	r3, #0
 8005606:	9300      	str	r3, [sp, #0]
 8005608:	4603      	mov	r3, r0
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f7ff fb86 	bl	8004d1c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3728      	adds	r7, #40	; 0x28
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	1ff80000 	.word	0x1ff80000
 8005620:	200000ac 	.word	0x200000ac

08005624 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	b29b      	uxth	r3, r3
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005646:	b480      	push	{r7}
 8005648:	b087      	sub	sp, #28
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	460b      	mov	r3, r1
 8005650:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	4413      	add	r3, r2
 8005666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	0c9b      	lsrs	r3, r3, #18
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <USB_HC_Halt+0x3a>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d16c      	bne.n	800575a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4413      	add	r3, r2
 8005688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	440a      	add	r2, r1
 8005696:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800569a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800569e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d143      	bne.n	8005734 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	0151      	lsls	r1, r2, #5
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	440a      	add	r2, r1
 80056c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	0151      	lsls	r1, r2, #5
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	440a      	add	r2, r1
 80056e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	440a      	add	r2, r1
 8005702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005706:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800570a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	3301      	adds	r3, #1
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005718:	d81d      	bhi.n	8005756 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	4413      	add	r3, r2
 8005722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800572c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005730:	d0ec      	beq.n	800570c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005732:	e080      	b.n	8005836 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	4413      	add	r3, r2
 800573c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	0151      	lsls	r1, r2, #5
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	440a      	add	r2, r1
 800574a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800574e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005752:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005754:	e06f      	b.n	8005836 <USB_HC_Halt+0x1f0>
          break;
 8005756:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005758:	e06d      	b.n	8005836 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4413      	add	r3, r2
 8005762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	0151      	lsls	r1, r2, #5
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	440a      	add	r2, r1
 8005770:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005774:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005778:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d143      	bne.n	8005812 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	4413      	add	r3, r2
 8005792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057a8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057c8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057e8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	3301      	adds	r3, #1
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057f6:	d81d      	bhi.n	8005834 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800580a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800580e:	d0ec      	beq.n	80057ea <USB_HC_Halt+0x1a4>
 8005810:	e011      	b.n	8005836 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	4413      	add	r3, r2
 800581a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	0151      	lsls	r1, r2, #5
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	440a      	add	r2, r1
 8005828:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800582c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	e000      	b.n	8005836 <USB_HC_Halt+0x1f0>
          break;
 8005834:	bf00      	nop
    }
  }

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	371c      	adds	r7, #28
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	460b      	mov	r3, r1
 800584e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005858:	2301      	movs	r3, #1
 800585a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	04da      	lsls	r2, r3, #19
 8005860:	4b15      	ldr	r3, [pc, #84]	; (80058b8 <USB_DoPing+0x74>)
 8005862:	4013      	ands	r3, r2
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	440a      	add	r2, r1
 800586c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005870:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005874:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	4413      	add	r3, r2
 800587e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800588c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005894:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	4413      	add	r3, r2
 800589e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a2:	461a      	mov	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	1ff80000 	.word	0x1ff80000

080058bc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff f9a1 	bl	8004c14 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80058d2:	2110      	movs	r1, #16
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff f9d9 	bl	8004c8c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7ff f9fc 	bl	8004cd8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80058e0:	2300      	movs	r3, #0
 80058e2:	613b      	str	r3, [r7, #16]
 80058e4:	e01f      	b.n	8005926 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005904:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800590c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591a:	461a      	mov	r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	3301      	adds	r3, #1
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2b0f      	cmp	r3, #15
 800592a:	d9dc      	bls.n	80058e6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800592c:	2300      	movs	r3, #0
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	e034      	b.n	800599c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005948:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005950:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005958:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	4413      	add	r3, r2
 8005962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005966:	461a      	mov	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	3301      	adds	r3, #1
 8005970:	617b      	str	r3, [r7, #20]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005978:	d80c      	bhi.n	8005994 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800598c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005990:	d0ec      	beq.n	800596c <USB_StopHost+0xb0>
 8005992:	e000      	b.n	8005996 <USB_StopHost+0xda>
        break;
 8005994:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	3301      	adds	r3, #1
 800599a:	613b      	str	r3, [r7, #16]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b0f      	cmp	r3, #15
 80059a0:	d9c7      	bls.n	8005932 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059a8:	461a      	mov	r2, r3
 80059aa:	f04f 33ff 	mov.w	r3, #4294967295
 80059ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f04f 32ff 	mov.w	r2, #4294967295
 80059b6:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff f91a 	bl	8004bf2 <USB_EnableGlobalInt>

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3718      	adds	r7, #24
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80059c8:	b590      	push	{r4, r7, lr}
 80059ca:	b089      	sub	sp, #36	; 0x24
 80059cc:	af04      	add	r7, sp, #16
 80059ce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80059d0:	2302      	movs	r3, #2
 80059d2:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80059d4:	2301      	movs	r3, #1
 80059d6:	2202      	movs	r2, #2
 80059d8:	2102      	movs	r1, #2
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fc3a 	bl	8006254 <USBH_FindInterface>
 80059e0:	4603      	mov	r3, r0
 80059e2:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80059e4:	7bbb      	ldrb	r3, [r7, #14]
 80059e6:	2bff      	cmp	r3, #255	; 0xff
 80059e8:	f000 812a 	beq.w	8005c40 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80059ec:	7bbb      	ldrb	r3, [r7, #14]
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 fc13 	bl	800621c <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80059fc:	2050      	movs	r0, #80	; 0x50
 80059fe:	f002 fdd7 	bl	80085b0 <malloc>
 8005a02:	4603      	mov	r3, r0
 8005a04:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005a10:	7bbb      	ldrb	r3, [r7, #14]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	211a      	movs	r1, #26
 8005a16:	fb01 f303 	mul.w	r3, r1, r3
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	b25b      	sxtb	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	da15      	bge.n	8005a54 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005a28:	7bbb      	ldrb	r3, [r7, #14]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	211a      	movs	r1, #26
 8005a2e:	fb01 f303 	mul.w	r3, r1, r3
 8005a32:	4413      	add	r3, r2
 8005a34:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005a38:	781a      	ldrb	r2, [r3, #0]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005a3e:	7bbb      	ldrb	r3, [r7, #14]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	211a      	movs	r1, #26
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005a4e:	881a      	ldrh	r2, [r3, #0]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	785b      	ldrb	r3, [r3, #1]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f001 fd21 	bl	80074a2 <USBH_AllocPipe>
 8005a60:	4603      	mov	r3, r0
 8005a62:	461a      	mov	r2, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	7819      	ldrb	r1, [r3, #0]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	7858      	ldrb	r0, [r3, #1]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	8952      	ldrh	r2, [r2, #10]
 8005a80:	9202      	str	r2, [sp, #8]
 8005a82:	2203      	movs	r2, #3
 8005a84:	9201      	str	r2, [sp, #4]
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	4623      	mov	r3, r4
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f001 fcd9 	bl	8007444 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2200      	movs	r2, #0
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f002 fcae 	bl	80083fc <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	210a      	movs	r1, #10
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fbd4 	bl	8006254 <USBH_FindInterface>
 8005aac:	4603      	mov	r3, r0
 8005aae:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005ab0:	7bbb      	ldrb	r3, [r7, #14]
 8005ab2:	2bff      	cmp	r3, #255	; 0xff
 8005ab4:	f000 80c4 	beq.w	8005c40 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005ab8:	7bbb      	ldrb	r3, [r7, #14]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	211a      	movs	r1, #26
 8005abe:	fb01 f303 	mul.w	r3, r1, r3
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	b25b      	sxtb	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	da16      	bge.n	8005afe <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ad0:	7bbb      	ldrb	r3, [r7, #14]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	211a      	movs	r1, #26
 8005ad6:	fb01 f303 	mul.w	r3, r1, r3
 8005ada:	4413      	add	r3, r2
 8005adc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005ae0:	781a      	ldrb	r2, [r3, #0]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	211a      	movs	r1, #26
 8005aec:	fb01 f303 	mul.w	r3, r1, r3
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005af6:	881a      	ldrh	r2, [r3, #0]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	835a      	strh	r2, [r3, #26]
 8005afc:	e015      	b.n	8005b2a <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005afe:	7bbb      	ldrb	r3, [r7, #14]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	211a      	movs	r1, #26
 8005b04:	fb01 f303 	mul.w	r3, r1, r3
 8005b08:	4413      	add	r3, r2
 8005b0a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005b0e:	781a      	ldrb	r2, [r3, #0]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005b14:	7bbb      	ldrb	r3, [r7, #14]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	211a      	movs	r1, #26
 8005b1a:	fb01 f303 	mul.w	r3, r1, r3
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005b24:	881a      	ldrh	r2, [r3, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005b2a:	7bbb      	ldrb	r3, [r7, #14]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	211a      	movs	r1, #26
 8005b30:	fb01 f303 	mul.w	r3, r1, r3
 8005b34:	4413      	add	r3, r2
 8005b36:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	b25b      	sxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	da16      	bge.n	8005b70 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005b42:	7bbb      	ldrb	r3, [r7, #14]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	211a      	movs	r1, #26
 8005b48:	fb01 f303 	mul.w	r3, r1, r3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005b52:	781a      	ldrb	r2, [r3, #0]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005b58:	7bbb      	ldrb	r3, [r7, #14]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	211a      	movs	r1, #26
 8005b5e:	fb01 f303 	mul.w	r3, r1, r3
 8005b62:	4413      	add	r3, r2
 8005b64:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005b68:	881a      	ldrh	r2, [r3, #0]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	835a      	strh	r2, [r3, #26]
 8005b6e:	e015      	b.n	8005b9c <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005b70:	7bbb      	ldrb	r3, [r7, #14]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	211a      	movs	r1, #26
 8005b76:	fb01 f303 	mul.w	r3, r1, r3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005b80:	781a      	ldrb	r2, [r3, #0]
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005b86:	7bbb      	ldrb	r3, [r7, #14]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	211a      	movs	r1, #26
 8005b8c:	fb01 f303 	mul.w	r3, r1, r3
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8005b96:	881a      	ldrh	r2, [r3, #0]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	7b9b      	ldrb	r3, [r3, #14]
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f001 fc7d 	bl	80074a2 <USBH_AllocPipe>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	461a      	mov	r2, r3
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	7bdb      	ldrb	r3, [r3, #15]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f001 fc73 	bl	80074a2 <USBH_AllocPipe>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	7b59      	ldrb	r1, [r3, #13]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	7b98      	ldrb	r0, [r3, #14]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	8b12      	ldrh	r2, [r2, #24]
 8005bdc:	9202      	str	r2, [sp, #8]
 8005bde:	2202      	movs	r2, #2
 8005be0:	9201      	str	r2, [sp, #4]
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	4623      	mov	r3, r4
 8005be6:	4602      	mov	r2, r0
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f001 fc2b 	bl	8007444 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	7b19      	ldrb	r1, [r3, #12]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	7bd8      	ldrb	r0, [r3, #15]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	8b52      	ldrh	r2, [r2, #26]
 8005c06:	9202      	str	r2, [sp, #8]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	9201      	str	r2, [sp, #4]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	4623      	mov	r3, r4
 8005c10:	4602      	mov	r2, r0
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f001 fc16 	bl	8007444 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	7b5b      	ldrb	r3, [r3, #13]
 8005c24:	2200      	movs	r2, #0
 8005c26:	4619      	mov	r1, r3
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f002 fbe7 	bl	80083fc <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	7b1b      	ldrb	r3, [r3, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	4619      	mov	r1, r3
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f002 fbe0 	bl	80083fc <USBH_LL_SetToggle>
      status = USBH_OK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd90      	pop	{r4, r7, pc}

08005c4a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00e      	beq.n	8005c82 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f001 fc09 	bl	8007482 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	4619      	mov	r1, r3
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f001 fc31 	bl	80074de <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	7b1b      	ldrb	r3, [r3, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00e      	beq.n	8005ca8 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	7b1b      	ldrb	r3, [r3, #12]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f001 fbf6 	bl	8007482 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	7b1b      	ldrb	r3, [r3, #12]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f001 fc1e 	bl	80074de <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	7b5b      	ldrb	r3, [r3, #13]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00e      	beq.n	8005cce <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	7b5b      	ldrb	r3, [r3, #13]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f001 fbe3 	bl	8007482 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	7b5b      	ldrb	r3, [r3, #13]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f001 fc0b 	bl	80074de <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00b      	beq.n	8005cf2 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f002 fc6c 	bl	80085c0 <free>
    phost->pActiveClass->pData = 0U;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005cee:	2200      	movs	r2, #0
 8005cf0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005d04:	2302      	movs	r3, #2
 8005d06:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	3340      	adds	r3, #64	; 0x40
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f8b2 	bl	8005e82 <GetLineCoding>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d105      	bne.n	8005d34 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005d2e:	2102      	movs	r1, #2
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	4798      	blx	r3
  }
  return status;
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d877      	bhi.n	8005e54 <USBH_CDC_Process+0x114>
 8005d64:	a201      	add	r2, pc, #4	; (adr r2, 8005d6c <USBH_CDC_Process+0x2c>)
 8005d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6a:	bf00      	nop
 8005d6c:	08005d81 	.word	0x08005d81
 8005d70:	08005d87 	.word	0x08005d87
 8005d74:	08005db7 	.word	0x08005db7
 8005d78:	08005e2b 	.word	0x08005e2b
 8005d7c:	08005e39 	.word	0x08005e39
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	73fb      	strb	r3, [r7, #15]
    break;
 80056b8:	e06d      	b.n	8005796 <USBH_CDC_Process+0x122>
 8005d84:	e06d      	b.n	8005e62 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056be:	4619      	mov	r1, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f897 	bl	8005ec0 <SetLineCoding>
 8005d92:	4603      	mov	r3, r0
 8005d94:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005d96:	7bbb      	ldrb	r3, [r7, #14]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d104      	bne.n	8005da6 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005da4:	e058      	b.n	8005e58 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8005da6:	7bbb      	ldrb	r3, [r7, #14]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d055      	beq.n	8005e58 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2204      	movs	r2, #4
 8005db0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005db4:	e050      	b.n	8005e58 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	3340      	adds	r3, #64	; 0x40
 8005dba:	4619      	mov	r1, r3
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f860 	bl	8005e82 <GetLineCoding>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005dc6:	7bbb      	ldrb	r3, [r7, #14]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d126      	bne.n	8005e1a <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dde:	791b      	ldrb	r3, [r3, #4]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d13b      	bne.n	8005e5c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dee:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d133      	bne.n	8005e5c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dfe:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d12b      	bne.n	8005e5c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e0c:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d124      	bne.n	8005e5c <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f95a 	bl	80060cc <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005e18:	e020      	b.n	8005e5c <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005e1a:	7bbb      	ldrb	r3, [r7, #14]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d01d      	beq.n	8005e5c <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2204      	movs	r2, #4
 8005e24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005e28:	e018      	b.n	8005e5c <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f867 	bl	8005efe <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f8dc 	bl	8005fee <CDC_ProcessReception>
    break;
 8005e36:	e014      	b.n	8005e62 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005e38:	2100      	movs	r1, #0
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fece 	bl	8006bdc <USBH_ClrFeature>
 8005e40:	4603      	mov	r3, r0
 8005e42:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8005e44:	7bbb      	ldrb	r3, [r7, #14]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8005e52:	e005      	b.n	8005e60 <USBH_CDC_Process+0x120>

  default:
    break;
 8005e54:	bf00      	nop
 8005e56:	e004      	b.n	8005e62 <USBH_CDC_Process+0x122>
    break;
 8005e58:	bf00      	nop
 8005e5a:	e002      	b.n	8005e62 <USBH_CDC_Process+0x122>
    break;
 8005e5c:	bf00      	nop
 8005e5e:	e000      	b.n	8005e62 <USBH_CDC_Process+0x122>
    break;
 8005e60:	bf00      	nop

  }

  return status;
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b082      	sub	sp, #8
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	22a1      	movs	r2, #161	; 0xa1
 8005e90:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2221      	movs	r2, #33	; 0x21
 8005e96:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2207      	movs	r2, #7
 8005ea8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2207      	movs	r2, #7
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f001 f873 	bl	8006f9c <USBH_CtlReq>
 8005eb6:	4603      	mov	r3, r0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2221      	movs	r2, #33	; 0x21
 8005ece:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2207      	movs	r2, #7
 8005ee6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2207      	movs	r2, #7
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f001 f854 	bl	8006f9c <USBH_CtlReq>
 8005ef4:	4603      	mov	r3, r0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b086      	sub	sp, #24
 8005f02:	af02      	add	r7, sp, #8
 8005f04:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005f10:	2300      	movs	r3, #0
 8005f12:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d002      	beq.n	8005f24 <CDC_ProcessTransmission+0x26>
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d025      	beq.n	8005f6e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8005f22:	e060      	b.n	8005fe6 <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	8b12      	ldrh	r2, [r2, #24]
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d90c      	bls.n	8005f4a <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	69d9      	ldr	r1, [r3, #28]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8b1a      	ldrh	r2, [r3, #24]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	7b58      	ldrb	r0, [r3, #13]
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	4603      	mov	r3, r0
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f001 fa3b 	bl	80073be <USBH_BulkSendData>
 8005f48:	e00c      	b.n	8005f64 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	7b58      	ldrb	r0, [r3, #13]
 8005f58:	2301      	movs	r3, #1
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f001 fa2d 	bl	80073be <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005f6c:	e03b      	b.n	8005fe6 <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	7b5b      	ldrb	r3, [r3, #13]
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f002 fa17 	bl	80083a8 <USBH_LL_GetURBState>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8005f7e:	7afb      	ldrb	r3, [r7, #11]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d128      	bne.n	8005fd6 <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	8b12      	ldrh	r2, [r2, #24]
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d90e      	bls.n	8005fae <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	8b12      	ldrh	r2, [r2, #24]
 8005f98:	1a9a      	subs	r2, r3, r2
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	8b12      	ldrh	r2, [r2, #24]
 8005fa6:	441a      	add	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	61da      	str	r2, [r3, #28]
 8005fac:	e002      	b.n	8005fb4 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d004      	beq.n	8005fc6 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005fc4:	e00e      	b.n	8005fe4 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f868 	bl	80060a4 <USBH_CDC_TransmitCallback>
    break;
 8005fd4:	e006      	b.n	8005fe4 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005fd6:	7afb      	ldrb	r3, [r7, #11]
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d103      	bne.n	8005fe4 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005fe4:	bf00      	nop
  }
}
 8005fe6:	bf00      	nop
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b086      	sub	sp, #24
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006000:	2300      	movs	r3, #0
 8006002:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800600a:	2b03      	cmp	r3, #3
 800600c:	d002      	beq.n	8006014 <CDC_ProcessReception+0x26>
 800600e:	2b04      	cmp	r3, #4
 8006010:	d00e      	beq.n	8006030 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8006012:	e043      	b.n	800609c <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	6a19      	ldr	r1, [r3, #32]
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	8b5a      	ldrh	r2, [r3, #26]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	7b1b      	ldrb	r3, [r3, #12]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 f9f1 	bl	8007408 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2204      	movs	r2, #4
 800602a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800602e:	e035      	b.n	800609c <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	7b1b      	ldrb	r3, [r3, #12]
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f002 f9b6 	bl	80083a8 <USBH_LL_GetURBState>
 800603c:	4603      	mov	r3, r0
 800603e:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006040:	7cfb      	ldrb	r3, [r7, #19]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d129      	bne.n	800609a <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	7b1b      	ldrb	r3, [r3, #12]
 800604a:	4619      	mov	r1, r3
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f002 f919 	bl	8008284 <USBH_LL_GetLastXferSize>
 8006052:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	429a      	cmp	r2, r3
 800605c:	d016      	beq.n	800608c <CDC_ProcessReception+0x9e>
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	8b5b      	ldrh	r3, [r3, #26]
 8006062:	461a      	mov	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4293      	cmp	r3, r2
 8006068:	d910      	bls.n	800608c <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	1ad2      	subs	r2, r2, r3
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	6a1a      	ldr	r2, [r3, #32]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	441a      	add	r2, r3
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	2203      	movs	r2, #3
 8006086:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800608a:	e006      	b.n	800609a <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f80f 	bl	80060b8 <USBH_CDC_ReceiveCallback>
    break;
 800609a:	bf00      	nop
  }
}
 800609c:	bf00      	nop
 800609e:	3718      	adds	r7, #24
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]

}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]

}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]

}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	4613      	mov	r3, r2
 80060ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80060f4:	2302      	movs	r3, #2
 80060f6:	e019      	b.n	800612c <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	79fa      	ldrb	r2, [r7, #7]
 80060fc:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f80f 	bl	8006134 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	68ba      	ldr	r2, [r7, #8]
 8006120:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f001 fffb 	bl	8008120 <USBH_LL_Init>

  return USBH_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006140:	e008      	b.n	8006154 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	32e0      	adds	r2, #224	; 0xe0
 8006148:	2100      	movs	r1, #0
 800614a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3301      	adds	r3, #1
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b0e      	cmp	r3, #14
 8006158:	d9f3      	bls.n	8006142 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	e009      	b.n	8006174 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4413      	add	r3, r2
 8006166:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800616a:	2200      	movs	r2, #0
 800616c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3301      	adds	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800617a:	d3f1      	bcc.n	8006160 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2240      	movs	r2, #64	; 0x40
 80061a0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b085      	sub	sp, #20
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d017      	beq.n	800620a <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10f      	bne.n	8006204 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061ea:	1c59      	adds	r1, r3, #1
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	33dc      	adds	r3, #220	; 0xdc
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]
 8006202:	e004      	b.n	800620e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006204:	2302      	movs	r3, #2
 8006206:	73fb      	strb	r3, [r7, #15]
 8006208:	e001      	b.n	800620e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800620a:	2302      	movs	r3, #2
 800620c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800620e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	460b      	mov	r3, r1
 8006226:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006232:	78fa      	ldrb	r2, [r7, #3]
 8006234:	429a      	cmp	r2, r3
 8006236:	d204      	bcs.n	8006242 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	78fa      	ldrb	r2, [r7, #3]
 800623c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006240:	e001      	b.n	8006246 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006242:	2302      	movs	r3, #2
 8006244:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006246:	7bfb      	ldrb	r3, [r7, #15]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	4608      	mov	r0, r1
 800625e:	4611      	mov	r1, r2
 8006260:	461a      	mov	r2, r3
 8006262:	4603      	mov	r3, r0
 8006264:	70fb      	strb	r3, [r7, #3]
 8006266:	460b      	mov	r3, r1
 8006268:	70bb      	strb	r3, [r7, #2]
 800626a:	4613      	mov	r3, r2
 800626c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006272:	2300      	movs	r3, #0
 8006274:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800627c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800627e:	e025      	b.n	80062cc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006280:	7dfb      	ldrb	r3, [r7, #23]
 8006282:	221a      	movs	r2, #26
 8006284:	fb02 f303 	mul.w	r3, r2, r3
 8006288:	3308      	adds	r3, #8
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4413      	add	r3, r2
 800628e:	3302      	adds	r3, #2
 8006290:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	795b      	ldrb	r3, [r3, #5]
 8006296:	78fa      	ldrb	r2, [r7, #3]
 8006298:	429a      	cmp	r2, r3
 800629a:	d002      	beq.n	80062a2 <USBH_FindInterface+0x4e>
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	2bff      	cmp	r3, #255	; 0xff
 80062a0:	d111      	bne.n	80062c6 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 80062a6:	78ba      	ldrb	r2, [r7, #2]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d002      	beq.n	80062b2 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80062ac:	78bb      	ldrb	r3, [r7, #2]
 80062ae:	2bff      	cmp	r3, #255	; 0xff
 80062b0:	d109      	bne.n	80062c6 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 80062b6:	787a      	ldrb	r2, [r7, #1]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d002      	beq.n	80062c2 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80062bc:	787b      	ldrb	r3, [r7, #1]
 80062be:	2bff      	cmp	r3, #255	; 0xff
 80062c0:	d101      	bne.n	80062c6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80062c2:	7dfb      	ldrb	r3, [r7, #23]
 80062c4:	e006      	b.n	80062d4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80062c6:	7dfb      	ldrb	r3, [r7, #23]
 80062c8:	3301      	adds	r3, #1
 80062ca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80062cc:	7dfb      	ldrb	r3, [r7, #23]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d9d6      	bls.n	8006280 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80062d2:	23ff      	movs	r3, #255	; 0xff
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	371c      	adds	r7, #28
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f001 ff55 	bl	8008198 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80062ee:	2101      	movs	r1, #1
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f002 f86c 	bl	80083ce <USBH_LL_DriverVBUS>

  return USBH_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b088      	sub	sp, #32
 8006304:	af04      	add	r7, sp, #16
 8006306:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006308:	2302      	movs	r3, #2
 800630a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 faec 	bl	80068ee <USBH_IsPortEnabled>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10c      	bne.n	8006336 <USBH_Process+0x36>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d007      	beq.n	8006336 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b03      	cmp	r3, #3
 800632e:	d002      	beq.n	8006336 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2203      	movs	r2, #3
 8006334:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b0b      	cmp	r3, #11
 800633e:	f200 814c 	bhi.w	80065da <USBH_Process+0x2da>
 8006342:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <USBH_Process+0x48>)
 8006344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006348:	08006379 	.word	0x08006379
 800634c:	0800639b 	.word	0x0800639b
 8006350:	080063af 	.word	0x080063af
 8006354:	080065b5 	.word	0x080065b5
 8006358:	080065db 	.word	0x080065db
 800635c:	0800643d 	.word	0x0800643d
 8006360:	0800656b 	.word	0x0800656b
 8006364:	0800646d 	.word	0x0800646d
 8006368:	0800648d 	.word	0x0800648d
 800636c:	080064ad 	.word	0x080064ad
 8006370:	080064db 	.word	0x080064db
 8006374:	0800659d 	.word	0x0800659d
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 812c 	beq.w	80065de <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800638c:	20c8      	movs	r0, #200	; 0xc8
 800638e:	f002 f868 	bl	8008462 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f001 ff5b 	bl	800824e <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006398:	e121      	b.n	80065de <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	f040 811e 	bne.w	80065e2 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2202      	movs	r2, #2
 80063aa:	701a      	strb	r2, [r3, #0]
    }
    break;
 80063ac:	e119      	b.n	80065e2 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 80063ae:	2064      	movs	r0, #100	; 0x64
 80063b0:	f002 f857 	bl	8008462 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 ff25 	bl	8008204 <USBH_LL_GetSpeed>
 80063ba:	4603      	mov	r3, r0
 80063bc:	461a      	mov	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2205      	movs	r2, #5
 80063c8:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80063ca:	2100      	movs	r1, #0
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 f868 	bl	80074a2 <USBH_AllocPipe>
 80063d2:	4603      	mov	r3, r0
 80063d4:	461a      	mov	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80063da:	2180      	movs	r1, #128	; 0x80
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f001 f860 	bl	80074a2 <USBH_AllocPipe>
 80063e2:	4603      	mov	r3, r0
 80063e4:	461a      	mov	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	7919      	ldrb	r1, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80063fe:	b292      	uxth	r2, r2
 8006400:	9202      	str	r2, [sp, #8]
 8006402:	2200      	movs	r2, #0
 8006404:	9201      	str	r2, [sp, #4]
 8006406:	9300      	str	r3, [sp, #0]
 8006408:	4603      	mov	r3, r0
 800640a:	2280      	movs	r2, #128	; 0x80
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f001 f819 	bl	8007444 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	7959      	ldrb	r1, [r3, #5]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006426:	b292      	uxth	r2, r2
 8006428:	9202      	str	r2, [sp, #8]
 800642a:	2200      	movs	r2, #0
 800642c:	9201      	str	r2, [sp, #4]
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	4603      	mov	r3, r0
 8006432:	2200      	movs	r2, #0
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 f805 	bl	8007444 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800643a:	e0e3      	b.n	8006604 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f8e7 	bl	8006610 <USBH_HandleEnum>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	f040 80ce 	bne.w	80065e6 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006458:	2b01      	cmp	r3, #1
 800645a:	d103      	bne.n	8006464 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2208      	movs	r2, #8
 8006460:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006462:	e0c0      	b.n	80065e6 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2207      	movs	r2, #7
 8006468:	701a      	strb	r2, [r3, #0]
    break;
 800646a:	e0bc      	b.n	80065e6 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 80b9 	beq.w	80065ea <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800647e:	2101      	movs	r1, #1
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2208      	movs	r2, #8
 8006488:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800648a:	e0ae      	b.n	80065ea <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006492:	b29b      	uxth	r3, r3
 8006494:	4619      	mov	r1, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 fb59 	bl	8006b4e <USBH_SetCfg>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f040 80a5 	bne.w	80065ee <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2209      	movs	r2, #9
 80064a8:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80064aa:	e0a0      	b.n	80065ee <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00b      	beq.n	80064d2 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80064ba:	2101      	movs	r1, #1
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fb69 	bl	8006b94 <USBH_SetFeature>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f040 8094 	bne.w	80065f2 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	220a      	movs	r2, #10
 80064ce:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80064d0:	e08f      	b.n	80065f2 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	220a      	movs	r2, #10
 80064d6:	701a      	strb	r2, [r3, #0]
    break;
 80064d8:	e08b      	b.n	80065f2 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 8088 	beq.w	80065f6 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80064ee:	2300      	movs	r3, #0
 80064f0:	73fb      	strb	r3, [r7, #15]
 80064f2:	e017      	b.n	8006524 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	33dc      	adds	r3, #220	; 0xdc
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	791a      	ldrb	r2, [r3, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006508:	429a      	cmp	r2, r3
 800650a:	d108      	bne.n	800651e <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	33dc      	adds	r3, #220	; 0xdc
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	3301      	adds	r3, #1
 8006522:	73fb      	strb	r3, [r7, #15]
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0e4      	beq.n	80064f4 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006530:	2b00      	cmp	r3, #0
 8006532:	d016      	beq.n	8006562 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	4798      	blx	r3
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2206      	movs	r2, #6
 800654a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006552:	2103      	movs	r1, #3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006558:	e04d      	b.n	80065f6 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	220d      	movs	r2, #13
 800655e:	701a      	strb	r2, [r3, #0]
    break;
 8006560:	e049      	b.n	80065f6 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	220d      	movs	r2, #13
 8006566:	701a      	strb	r2, [r3, #0]
    break;
 8006568:	e045      	b.n	80065f6 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00f      	beq.n	8006594 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	4798      	blx	r3
 8006580:	4603      	mov	r3, r0
 8006582:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d136      	bne.n	80065fa <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	220b      	movs	r2, #11
 8006590:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8006592:	e032      	b.n	80065fa <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	220d      	movs	r2, #13
 8006598:	701a      	strb	r2, [r3, #0]
    break;
 800659a:	e02e      	b.n	80065fa <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d02b      	beq.n	80065fe <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	4798      	blx	r3
    }
    break;
 80065b2:	e024      	b.n	80065fe <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff fdbd 	bl	8006134 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01e      	beq.n	8006602 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80065d8:	e013      	b.n	8006602 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 80065da:	bf00      	nop
 80065dc:	e012      	b.n	8006604 <USBH_Process+0x304>
    break;
 80065de:	bf00      	nop
 80065e0:	e010      	b.n	8006604 <USBH_Process+0x304>
    break;
 80065e2:	bf00      	nop
 80065e4:	e00e      	b.n	8006604 <USBH_Process+0x304>
    break;
 80065e6:	bf00      	nop
 80065e8:	e00c      	b.n	8006604 <USBH_Process+0x304>
    break;
 80065ea:	bf00      	nop
 80065ec:	e00a      	b.n	8006604 <USBH_Process+0x304>
    break;
 80065ee:	bf00      	nop
 80065f0:	e008      	b.n	8006604 <USBH_Process+0x304>
    break;
 80065f2:	bf00      	nop
 80065f4:	e006      	b.n	8006604 <USBH_Process+0x304>
    break;
 80065f6:	bf00      	nop
 80065f8:	e004      	b.n	8006604 <USBH_Process+0x304>
    break;
 80065fa:	bf00      	nop
 80065fc:	e002      	b.n	8006604 <USBH_Process+0x304>
    break;
 80065fe:	bf00      	nop
 8006600:	e000      	b.n	8006604 <USBH_Process+0x304>
    break;
 8006602:	bf00      	nop
  }
 return USBH_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop

08006610 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b088      	sub	sp, #32
 8006614:	af04      	add	r7, sp, #16
 8006616:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006618:	2301      	movs	r3, #1
 800661a:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	2b07      	cmp	r3, #7
 8006622:	f200 80f8 	bhi.w	8006816 <USBH_HandleEnum+0x206>
 8006626:	a201      	add	r2, pc, #4	; (adr r2, 800662c <USBH_HandleEnum+0x1c>)
 8006628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662c:	0800664d 	.word	0x0800664d
 8006630:	080066bf 	.word	0x080066bf
 8006634:	080066d7 	.word	0x080066d7
 8006638:	0800674d 	.word	0x0800674d
 800663c:	08006763 	.word	0x08006763
 8006640:	0800677f 	.word	0x0800677f
 8006644:	080067b3 	.word	0x080067b3
 8006648:	080067e7 	.word	0x080067e7
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800664c:	2108      	movs	r1, #8
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f9ad 	bl	80069ae <USBH_Get_DevDesc>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	f040 80df 	bne.w	800681a <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	7919      	ldrb	r1, [r3, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006680:	b292      	uxth	r2, r2
 8006682:	9202      	str	r2, [sp, #8]
 8006684:	2200      	movs	r2, #0
 8006686:	9201      	str	r2, [sp, #4]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	4603      	mov	r3, r0
 800668c:	2280      	movs	r2, #128	; 0x80
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fed8 	bl	8007444 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	7959      	ldrb	r1, [r3, #5]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80066a8:	b292      	uxth	r2, r2
 80066aa:	9202      	str	r2, [sp, #8]
 80066ac:	2200      	movs	r2, #0
 80066ae:	9201      	str	r2, [sp, #4]
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	4603      	mov	r3, r0
 80066b4:	2200      	movs	r2, #0
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fec4 	bl	8007444 <USBH_OpenPipe>

    }
    break;
 80066bc:	e0ad      	b.n	800681a <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80066be:	2112      	movs	r1, #18
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f974 	bl	80069ae <USBH_Get_DevDesc>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f040 80a8 	bne.w	800681e <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2202      	movs	r2, #2
 80066d2:	705a      	strb	r2, [r3, #1]

    }
    break;
 80066d4:	e0a3      	b.n	800681e <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80066d6:	2101      	movs	r1, #1
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 fa14 	bl	8006b06 <USBH_SetAddress>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f040 809e 	bne.w	8006822 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 80066e6:	2002      	movs	r0, #2
 80066e8:	f001 febb 	bl	8008462 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2203      	movs	r2, #3
 80066f8:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	7919      	ldrb	r1, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800670e:	b292      	uxth	r2, r2
 8006710:	9202      	str	r2, [sp, #8]
 8006712:	2200      	movs	r2, #0
 8006714:	9201      	str	r2, [sp, #4]
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	4603      	mov	r3, r0
 800671a:	2280      	movs	r2, #128	; 0x80
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fe91 	bl	8007444 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	7959      	ldrb	r1, [r3, #5]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006736:	b292      	uxth	r2, r2
 8006738:	9202      	str	r2, [sp, #8]
 800673a:	2200      	movs	r2, #0
 800673c:	9201      	str	r2, [sp, #4]
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	4603      	mov	r3, r0
 8006742:	2200      	movs	r2, #0
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fe7d 	bl	8007444 <USBH_OpenPipe>
    }
    break;
 800674a:	e06a      	b.n	8006822 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800674c:	2109      	movs	r1, #9
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f955 	bl	80069fe <USBH_Get_CfgDesc>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d165      	bne.n	8006826 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2204      	movs	r2, #4
 800675e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006760:	e061      	b.n	8006826 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8006768:	4619      	mov	r1, r3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f947 	bl	80069fe <USBH_Get_CfgDesc>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d159      	bne.n	800682a <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2205      	movs	r2, #5
 800677a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800677c:	e055      	b.n	800682a <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006784:	2b00      	cmp	r3, #0
 8006786:	d010      	beq.n	80067aa <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006794:	23ff      	movs	r3, #255	; 0xff
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f955 	bl	8006a46 <USBH_Get_StringDesc>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d145      	bne.n	800682e <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2206      	movs	r2, #6
 80067a6:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80067a8:	e041      	b.n	800682e <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2206      	movs	r2, #6
 80067ae:	705a      	strb	r2, [r3, #1]
    break;
 80067b0:	e03d      	b.n	800682e <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d010      	beq.n	80067de <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80067c8:	23ff      	movs	r3, #255	; 0xff
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f93b 	bl	8006a46 <USBH_Get_StringDesc>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d12d      	bne.n	8006832 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2207      	movs	r2, #7
 80067da:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80067dc:	e029      	b.n	8006832 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2207      	movs	r2, #7
 80067e2:	705a      	strb	r2, [r3, #1]
    break;
 80067e4:	e025      	b.n	8006832 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00f      	beq.n	8006810 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80067fc:	23ff      	movs	r3, #255	; 0xff
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f921 	bl	8006a46 <USBH_Get_StringDesc>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d115      	bne.n	8006836 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800680e:	e012      	b.n	8006836 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	73fb      	strb	r3, [r7, #15]
    break;
 8006814:	e00f      	b.n	8006836 <USBH_HandleEnum+0x226>

  default:
    break;
 8006816:	bf00      	nop
 8006818:	e00e      	b.n	8006838 <USBH_HandleEnum+0x228>
    break;
 800681a:	bf00      	nop
 800681c:	e00c      	b.n	8006838 <USBH_HandleEnum+0x228>
    break;
 800681e:	bf00      	nop
 8006820:	e00a      	b.n	8006838 <USBH_HandleEnum+0x228>
    break;
 8006822:	bf00      	nop
 8006824:	e008      	b.n	8006838 <USBH_HandleEnum+0x228>
    break;
 8006826:	bf00      	nop
 8006828:	e006      	b.n	8006838 <USBH_HandleEnum+0x228>
    break;
 800682a:	bf00      	nop
 800682c:	e004      	b.n	8006838 <USBH_HandleEnum+0x228>
    break;
 800682e:	bf00      	nop
 8006830:	e002      	b.n	8006838 <USBH_HandleEnum+0x228>
    break;
 8006832:	bf00      	nop
 8006834:	e000      	b.n	8006838 <USBH_HandleEnum+0x228>
    break;
 8006836:	bf00      	nop
  }
  return Status;
 8006838:	7bfb      	ldrb	r3, [r7, #15]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop

08006844 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f804 	bl	8006886 <USBH_HandleSof>
}
 800687e:	bf00      	nop
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b082      	sub	sp, #8
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b0b      	cmp	r3, #11
 8006896:	d10a      	bne.n	80068ae <USBH_HandleSof+0x28>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d005      	beq.n	80068ae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	4798      	blx	r3
  }
}
 80068ae:	bf00      	nop
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80068c6:	bf00      	nop
}
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80068e2:	bf00      	nop
}
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10f      	bne.n	800693a <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00e      	beq.n	800694a <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006932:	2104      	movs	r1, #4
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	4798      	blx	r3
 8006938:	e007      	b.n	800694a <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006940:	2b01      	cmp	r3, #1
 8006942:	d102      	bne.n	800694a <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f001 fc36 	bl	80081ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	791b      	ldrb	r3, [r3, #4]
 8006966:	4619      	mov	r1, r3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fdb8 	bl	80074de <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	795b      	ldrb	r3, [r3, #5]
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fdb2 	bl	80074de <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d005      	beq.n	8006998 <USBH_LL_Disconnect+0x44>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d005      	beq.n	8006998 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006992:	2105      	movs	r1, #5
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f001 fbfd 	bl	8008198 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2203      	movs	r2, #3
 80069a2:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b086      	sub	sp, #24
 80069b2:	af02      	add	r7, sp, #8
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	460b      	mov	r3, r1
 80069b8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80069c0:	78fb      	ldrb	r3, [r7, #3]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	4613      	mov	r3, r2
 80069c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069cc:	2100      	movs	r1, #0
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f864 	bl	8006a9c <USBH_GetDescriptor>
 80069d4:	4603      	mov	r3, r0
 80069d6:	73fb      	strb	r3, [r7, #15]
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10a      	bne.n	80069f4 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f203 3022 	addw	r0, r3, #802	; 0x322
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80069ea:	78fa      	ldrb	r2, [r7, #3]
 80069ec:	b292      	uxth	r2, r2
 80069ee:	4619      	mov	r1, r3
 80069f0:	f000 f918 	bl	8006c24 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b086      	sub	sp, #24
 8006a02:	af02      	add	r7, sp, #8
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	460b      	mov	r3, r1
 8006a08:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	331c      	adds	r3, #28
 8006a0e:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8006a10:	887b      	ldrh	r3, [r7, #2]
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f83d 	bl	8006a9c <USBH_GetDescriptor>
 8006a22:	4603      	mov	r3, r0
 8006a24:	72fb      	strb	r3, [r7, #11]
 8006a26:	7afb      	ldrb	r3, [r7, #11]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d107      	bne.n	8006a3c <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006a32:	887a      	ldrh	r2, [r7, #2]
 8006a34:	68f9      	ldr	r1, [r7, #12]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 f964 	bl	8006d04 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8006a3c:	7afb      	ldrb	r3, [r7, #11]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b088      	sub	sp, #32
 8006a4a:	af02      	add	r7, sp, #8
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	607a      	str	r2, [r7, #4]
 8006a50:	461a      	mov	r2, r3
 8006a52:	460b      	mov	r3, r1
 8006a54:	72fb      	strb	r3, [r7, #11]
 8006a56:	4613      	mov	r3, r2
 8006a58:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8006a5a:	7afb      	ldrb	r3, [r7, #11]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006a62:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006a6a:	893b      	ldrh	r3, [r7, #8]
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	460b      	mov	r3, r1
 8006a70:	2100      	movs	r1, #0
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f812 	bl	8006a9c <USBH_GetDescriptor>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	75fb      	strb	r3, [r7, #23]
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d107      	bne.n	8006a92 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a88:	893a      	ldrh	r2, [r7, #8]
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fa37 	bl	8006f00 <USBH_ParseStringDesc>
  }
  return status;
 8006a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3718      	adds	r7, #24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	607b      	str	r3, [r7, #4]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	72fb      	strb	r3, [r7, #11]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	789b      	ldrb	r3, [r3, #2]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d11c      	bne.n	8006af0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006ab6:	7afb      	ldrb	r3, [r7, #11]
 8006ab8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2206      	movs	r2, #6
 8006ac6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	893a      	ldrh	r2, [r7, #8]
 8006acc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006ace:	893b      	ldrh	r3, [r7, #8]
 8006ad0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006ad4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ad8:	d104      	bne.n	8006ae4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f240 4209 	movw	r2, #1033	; 0x409
 8006ae0:	829a      	strh	r2, [r3, #20]
 8006ae2:	e002      	b.n	8006aea <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	8b3a      	ldrh	r2, [r7, #24]
 8006aee:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8006af0:	8b3b      	ldrh	r3, [r7, #24]
 8006af2:	461a      	mov	r2, r3
 8006af4:	6879      	ldr	r1, [r7, #4]
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 fa50 	bl	8006f9c <USBH_CtlReq>
 8006afc:	4603      	mov	r3, r0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	789b      	ldrb	r3, [r3, #2]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d10f      	bne.n	8006b3a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2205      	movs	r2, #5
 8006b24:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fa2c 	bl	8006f9c <USBH_CtlReq>
 8006b44:	4603      	mov	r3, r0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b082      	sub	sp, #8
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	460b      	mov	r3, r1
 8006b58:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	789b      	ldrb	r3, [r3, #2]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d10e      	bne.n	8006b80 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2209      	movs	r2, #9
 8006b6c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	887a      	ldrh	r2, [r7, #2]
 8006b72:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006b80:	2200      	movs	r2, #0
 8006b82:	2100      	movs	r1, #0
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fa09 	bl	8006f9c <USBH_CtlReq>
 8006b8a:	4603      	mov	r3, r0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	789b      	ldrb	r3, [r3, #2]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d10f      	bne.n	8006bc8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2203      	movs	r2, #3
 8006bb2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2100      	movs	r1, #0
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f9e5 	bl	8006f9c <USBH_CtlReq>
 8006bd2:	4603      	mov	r3, r0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3708      	adds	r7, #8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	460b      	mov	r3, r1
 8006be6:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	789b      	ldrb	r3, [r3, #2]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d10f      	bne.n	8006c10 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006c02:	78fb      	ldrb	r3, [r7, #3]
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8006c10:	2200      	movs	r2, #0
 8006c12:	2100      	movs	r1, #0
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 f9c1 	bl	8006f9c <USBH_CtlReq>
 8006c1a:	4603      	mov	r3, r0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	781a      	ldrb	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	785a      	ldrb	r2, [r3, #1]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	3302      	adds	r3, #2
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	3303      	adds	r3, #3
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	021b      	lsls	r3, r3, #8
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	4313      	orrs	r3, r2
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	791a      	ldrb	r2, [r3, #4]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	795a      	ldrb	r2, [r3, #5]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	799a      	ldrb	r2, [r3, #6]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	79da      	ldrb	r2, [r3, #7]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006c7e:	88fb      	ldrh	r3, [r7, #6]
 8006c80:	2b08      	cmp	r3, #8
 8006c82:	d939      	bls.n	8006cf8 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	3308      	adds	r3, #8
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	3309      	adds	r3, #9
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	021b      	lsls	r3, r3, #8
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	330a      	adds	r3, #10
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	330b      	adds	r3, #11
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	330c      	adds	r3, #12
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	330d      	adds	r3, #13
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	021b      	lsls	r3, r3, #8
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	7b9a      	ldrb	r2, [r3, #14]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	7bda      	ldrb	r2, [r3, #15]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	7c1a      	ldrb	r2, [r3, #16]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	7c5a      	ldrb	r2, [r3, #17]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	745a      	strb	r2, [r3, #17]
  }
}
 8006cf8:	bf00      	nop
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	; 0x28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	781a      	ldrb	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	785a      	ldrb	r2, [r3, #1]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	3302      	adds	r3, #2
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	3303      	adds	r3, #3
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	021b      	lsls	r3, r3, #8
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	791a      	ldrb	r2, [r3, #4]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	795a      	ldrb	r2, [r3, #5]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	799a      	ldrb	r2, [r3, #6]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	79da      	ldrb	r2, [r3, #7]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	7a1a      	ldrb	r2, [r3, #8]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006d7a:	88fb      	ldrh	r3, [r7, #6]
 8006d7c:	2b09      	cmp	r3, #9
 8006d7e:	d95f      	bls.n	8006e40 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006d80:	2309      	movs	r3, #9
 8006d82:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006d84:	2300      	movs	r3, #0
 8006d86:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006d88:	e051      	b.n	8006e2e <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006d8a:	f107 0316 	add.w	r3, r7, #22
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d92:	f000 f8e8 	bl	8006f66 <USBH_GetNextDesc>
 8006d96:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9a:	785b      	ldrb	r3, [r3, #1]
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d146      	bne.n	8006e2e <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006da0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006da4:	221a      	movs	r2, #26
 8006da6:	fb02 f303 	mul.w	r3, r2, r3
 8006daa:	3308      	adds	r3, #8
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	4413      	add	r3, r2
 8006db0:	3302      	adds	r3, #2
 8006db2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8006db4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006db6:	69f8      	ldr	r0, [r7, #28]
 8006db8:	f000 f846 	bl	8006e48 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006dc6:	e022      	b.n	8006e0e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8006dc8:	f107 0316 	add.w	r3, r7, #22
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006dd0:	f000 f8c9 	bl	8006f66 <USBH_GetNextDesc>
 8006dd4:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	785b      	ldrb	r3, [r3, #1]
 8006dda:	2b05      	cmp	r3, #5
 8006ddc:	d117      	bne.n	8006e0e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006dde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006de2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006de6:	3201      	adds	r2, #1
 8006de8:	00d2      	lsls	r2, r2, #3
 8006dea:	211a      	movs	r1, #26
 8006dec:	fb01 f303 	mul.w	r3, r1, r3
 8006df0:	4413      	add	r3, r2
 8006df2:	3308      	adds	r3, #8
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	3304      	adds	r3, #4
 8006dfa:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8006dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dfe:	69b8      	ldr	r0, [r7, #24]
 8006e00:	f000 f851 	bl	8006ea6 <USBH_ParseEPDesc>
            ep_ix++;
 8006e04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006e08:	3301      	adds	r3, #1
 8006e0a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	791b      	ldrb	r3, [r3, #4]
 8006e12:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d204      	bcs.n	8006e24 <USBH_ParseCfgDesc+0x120>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	885a      	ldrh	r2, [r3, #2]
 8006e1e:	8afb      	ldrh	r3, [r7, #22]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d8d1      	bhi.n	8006dc8 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006e24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e28:	3301      	adds	r3, #1
 8006e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006e2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d804      	bhi.n	8006e40 <USBH_ParseCfgDesc+0x13c>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	885a      	ldrh	r2, [r3, #2]
 8006e3a:	8afb      	ldrh	r3, [r7, #22]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d8a4      	bhi.n	8006d8a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006e40:	bf00      	nop
 8006e42:	3728      	adds	r7, #40	; 0x28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	781a      	ldrb	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	785a      	ldrb	r2, [r3, #1]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	789a      	ldrb	r2, [r3, #2]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	78da      	ldrb	r2, [r3, #3]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	791a      	ldrb	r2, [r3, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	795a      	ldrb	r2, [r3, #5]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	799a      	ldrb	r2, [r3, #6]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	79da      	ldrb	r2, [r3, #7]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	7a1a      	ldrb	r2, [r3, #8]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	721a      	strb	r2, [r3, #8]
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b083      	sub	sp, #12
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781a      	ldrb	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	785a      	ldrb	r2, [r3, #1]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	789a      	ldrb	r2, [r3, #2]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	78da      	ldrb	r2, [r3, #3]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	3305      	adds	r3, #5
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	021b      	lsls	r3, r3, #8
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	799a      	ldrb	r2, [r3, #6]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	719a      	strb	r2, [r3, #6]
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b087      	sub	sp, #28
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3301      	adds	r3, #1
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d120      	bne.n	8006f5a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	1e9a      	subs	r2, r3, #2
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	4293      	cmp	r3, r2
 8006f22:	bf28      	it	cs
 8006f24:	4613      	movcs	r3, r2
 8006f26:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3302      	adds	r3, #2
 8006f2c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006f2e:	2300      	movs	r3, #0
 8006f30:	82fb      	strh	r3, [r7, #22]
 8006f32:	e00b      	b.n	8006f4c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006f34:	8afb      	ldrh	r3, [r7, #22]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	4413      	add	r3, r2
 8006f3a:	781a      	ldrb	r2, [r3, #0]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	3301      	adds	r3, #1
 8006f44:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006f46:	8afb      	ldrh	r3, [r7, #22]
 8006f48:	3302      	adds	r3, #2
 8006f4a:	82fb      	strh	r3, [r7, #22]
 8006f4c:	8afa      	ldrh	r2, [r7, #22]
 8006f4e:	8abb      	ldrh	r3, [r7, #20]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d3ef      	bcc.n	8006f34 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2200      	movs	r2, #0
 8006f58:	701a      	strb	r2, [r3, #0]
  }
}
 8006f5a:	bf00      	nop
 8006f5c:	371c      	adds	r7, #28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr

08006f66 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8006f66:	b480      	push	{r7}
 8006f68:	b085      	sub	sp, #20
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	881a      	ldrh	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	4413      	add	r3, r2
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006faa:	2301      	movs	r3, #1
 8006fac:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	789b      	ldrb	r3, [r3, #2]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d002      	beq.n	8006fbc <USBH_CtlReq+0x20>
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d00f      	beq.n	8006fda <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8006fba:	e034      	b.n	8007026 <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	88fa      	ldrh	r2, [r7, #6]
 8006fc6:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	75fb      	strb	r3, [r7, #23]
    break;
 8006fd8:	e025      	b.n	8007026 <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 f828 	bl	8007030 <USBH_HandleControl>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006fe4:	7dfb      	ldrb	r3, [r7, #23]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d108      	bne.n	8006ffc <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75fb      	strb	r3, [r7, #23]
    break;
 8006ffa:	e013      	b.n	8007024 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d108      	bne.n	8007014 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2201      	movs	r2, #1
 8007006:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800700e:	2303      	movs	r3, #3
 8007010:	75fb      	strb	r3, [r7, #23]
    break;
 8007012:	e007      	b.n	8007024 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	2b02      	cmp	r3, #2
 8007018:	d104      	bne.n	8007024 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2201      	movs	r2, #1
 800701e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007020:	2302      	movs	r3, #2
 8007022:	75fb      	strb	r3, [r7, #23]
 8007020:	2302      	movs	r3, #2
 8007022:	75fb      	strb	r3, [r7, #23]
    break;
 8007024:	bf00      	nop
  }
  return status;
 8007026:	7dfb      	ldrb	r3, [r7, #23]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3718      	adds	r7, #24
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af02      	add	r7, sp, #8
 8007036:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007038:	2301      	movs	r3, #1
 800703a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800703c:	2300      	movs	r3, #0
 800703e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	7e1b      	ldrb	r3, [r3, #24]
 8007044:	3b01      	subs	r3, #1
 8007046:	2b0a      	cmp	r3, #10
 8007048:	f200 814c 	bhi.w	80072e4 <USBH_HandleControl+0x2b4>
 800704c:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <USBH_HandleControl+0x24>)
 800704e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007052:	bf00      	nop
 8007054:	08007081 	.word	0x08007081
 8007058:	0800709b 	.word	0x0800709b
 800705c:	08007105 	.word	0x08007105
 8007060:	0800712b 	.word	0x0800712b
 8007064:	08007163 	.word	0x08007163
 8007068:	0800718f 	.word	0x0800718f
 800706c:	080071e1 	.word	0x080071e1
 8007070:	08007203 	.word	0x08007203
 8007074:	0800723f 	.word	0x0800723f
 8007078:	08007267 	.word	0x08007267
 800707c:	080072a5 	.word	0x080072a5
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f103 0110 	add.w	r1, r3, #16
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	795b      	ldrb	r3, [r3, #5]
 800708a:	461a      	mov	r2, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f939 	bl	8007304 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2202      	movs	r2, #2
 8007096:	761a      	strb	r2, [r3, #24]
    break;
 8007098:	e12f      	b.n	80072fa <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	795b      	ldrb	r3, [r3, #5]
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f001 f981 	bl	80083a8 <USBH_LL_GetURBState>
 80070a6:	4603      	mov	r3, r0
 80070a8:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d11e      	bne.n	80070ee <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	7c1b      	ldrb	r3, [r3, #16]
 80070b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80070b8:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	8adb      	ldrh	r3, [r3, #22]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 80070c2:	7b7b      	ldrb	r3, [r7, #13]
 80070c4:	2b80      	cmp	r3, #128	; 0x80
 80070c6:	d103      	bne.n	80070d0 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2203      	movs	r2, #3
 80070cc:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80070ce:	e10b      	b.n	80072e8 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2205      	movs	r2, #5
 80070d4:	761a      	strb	r2, [r3, #24]
    break;
 80070d6:	e107      	b.n	80072e8 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 80070d8:	7b7b      	ldrb	r3, [r7, #13]
 80070da:	2b80      	cmp	r3, #128	; 0x80
 80070dc:	d103      	bne.n	80070e6 <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2209      	movs	r2, #9
 80070e2:	761a      	strb	r2, [r3, #24]
    break;
 80070e4:	e100      	b.n	80072e8 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2207      	movs	r2, #7
 80070ea:	761a      	strb	r2, [r3, #24]
    break;
 80070ec:	e0fc      	b.n	80072e8 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80070ee:	7bbb      	ldrb	r3, [r7, #14]
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	d003      	beq.n	80070fc <USBH_HandleControl+0xcc>
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	f040 80f6 	bne.w	80072e8 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	220b      	movs	r2, #11
 8007100:	761a      	strb	r2, [r3, #24]
    break;
 8007102:	e0f1      	b.n	80072e8 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800710a:	b29a      	uxth	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6899      	ldr	r1, [r3, #8]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	899a      	ldrh	r2, [r3, #12]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	791b      	ldrb	r3, [r3, #4]
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f930 	bl	8007382 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2204      	movs	r2, #4
 8007126:	761a      	strb	r2, [r3, #24]
    break;
 8007128:	e0e7      	b.n	80072fa <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	791b      	ldrb	r3, [r3, #4]
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f001 f939 	bl	80083a8 <USBH_LL_GetURBState>
 8007136:	4603      	mov	r3, r0
 8007138:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800713a:	7bbb      	ldrb	r3, [r7, #14]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d102      	bne.n	8007146 <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2209      	movs	r2, #9
 8007144:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007146:	7bbb      	ldrb	r3, [r7, #14]
 8007148:	2b05      	cmp	r3, #5
 800714a:	d102      	bne.n	8007152 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800714c:	2303      	movs	r3, #3
 800714e:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007150:	e0cc      	b.n	80072ec <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007152:	7bbb      	ldrb	r3, [r7, #14]
 8007154:	2b04      	cmp	r3, #4
 8007156:	f040 80c9 	bne.w	80072ec <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	220b      	movs	r2, #11
 800715e:	761a      	strb	r2, [r3, #24]
    break;
 8007160:	e0c4      	b.n	80072ec <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6899      	ldr	r1, [r3, #8]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	899a      	ldrh	r2, [r3, #12]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	7958      	ldrb	r0, [r3, #5]
 800716e:	2301      	movs	r3, #1
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	4603      	mov	r3, r0
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f8df 	bl	8007338 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007180:	b29a      	uxth	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2206      	movs	r2, #6
 800718a:	761a      	strb	r2, [r3, #24]
    break;
 800718c:	e0b5      	b.n	80072fa <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	795b      	ldrb	r3, [r3, #5]
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 f907 	bl	80083a8 <USBH_LL_GetURBState>
 800719a:	4603      	mov	r3, r0
 800719c:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800719e:	7bbb      	ldrb	r3, [r7, #14]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d103      	bne.n	80071ac <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2207      	movs	r2, #7
 80071a8:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80071aa:	e0a1      	b.n	80072f0 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 80071ac:	7bbb      	ldrb	r3, [r7, #14]
 80071ae:	2b05      	cmp	r3, #5
 80071b0:	d105      	bne.n	80071be <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	220c      	movs	r2, #12
 80071b6:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80071b8:	2303      	movs	r3, #3
 80071ba:	73fb      	strb	r3, [r7, #15]
    break;
 80071bc:	e098      	b.n	80072f0 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80071be:	7bbb      	ldrb	r3, [r7, #14]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d103      	bne.n	80071cc <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2205      	movs	r2, #5
 80071c8:	761a      	strb	r2, [r3, #24]
    break;
 80071ca:	e091      	b.n	80072f0 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 80071cc:	7bbb      	ldrb	r3, [r7, #14]
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	f040 808e 	bne.w	80072f0 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	220b      	movs	r2, #11
 80071d8:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 80071da:	2302      	movs	r3, #2
 80071dc:	73fb      	strb	r3, [r7, #15]
    break;
 80071de:	e087      	b.n	80072f0 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	791b      	ldrb	r3, [r3, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	2100      	movs	r1, #0
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f8ca 	bl	8007382 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2208      	movs	r2, #8
 80071fe:	761a      	strb	r2, [r3, #24]

    break;
 8007200:	e07b      	b.n	80072fa <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	791b      	ldrb	r3, [r3, #4]
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 f8cd 	bl	80083a8 <USBH_LL_GetURBState>
 800720e:	4603      	mov	r3, r0
 8007210:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007212:	7bbb      	ldrb	r3, [r7, #14]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d105      	bne.n	8007224 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	220d      	movs	r2, #13
 800721c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007222:	e067      	b.n	80072f4 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	2b04      	cmp	r3, #4
 8007228:	d103      	bne.n	8007232 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	220b      	movs	r2, #11
 800722e:	761a      	strb	r2, [r3, #24]
    break;
 8007230:	e060      	b.n	80072f4 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007232:	7bbb      	ldrb	r3, [r7, #14]
 8007234:	2b05      	cmp	r3, #5
 8007236:	d15d      	bne.n	80072f4 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007238:	2303      	movs	r3, #3
 800723a:	73fb      	strb	r3, [r7, #15]
    break;
 800723c:	e05a      	b.n	80072f4 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	795a      	ldrb	r2, [r3, #5]
 8007242:	2301      	movs	r3, #1
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	4613      	mov	r3, r2
 8007248:	2200      	movs	r2, #0
 800724a:	2100      	movs	r1, #0
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f873 	bl	8007338 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007258:	b29a      	uxth	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	220a      	movs	r2, #10
 8007262:	761a      	strb	r2, [r3, #24]
    break;
 8007264:	e049      	b.n	80072fa <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	795b      	ldrb	r3, [r3, #5]
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f001 f89b 	bl	80083a8 <USBH_LL_GetURBState>
 8007272:	4603      	mov	r3, r0
 8007274:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d105      	bne.n	8007288 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	220d      	movs	r2, #13
 8007284:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007286:	e037      	b.n	80072f8 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007288:	7bbb      	ldrb	r3, [r7, #14]
 800728a:	2b02      	cmp	r3, #2
 800728c:	d103      	bne.n	8007296 <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2209      	movs	r2, #9
 8007292:	761a      	strb	r2, [r3, #24]
    break;
 8007294:	e030      	b.n	80072f8 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2b04      	cmp	r3, #4
 800729a:	d12d      	bne.n	80072f8 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	220b      	movs	r2, #11
 80072a0:	761a      	strb	r2, [r3, #24]
    break;
 80072a2:	e029      	b.n	80072f8 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	7e5b      	ldrb	r3, [r3, #25]
 80072a8:	3301      	adds	r3, #1
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	765a      	strb	r2, [r3, #25]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	7e5b      	ldrb	r3, [r3, #25]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d809      	bhi.n	80072cc <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 ff88 	bl	80081ce <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80072ca:	e016      	b.n	80072fa <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072d2:	2106      	movs	r1, #6
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80072de:	2302      	movs	r3, #2
 80072e0:	73fb      	strb	r3, [r7, #15]
    break;
 80072e2:	e00a      	b.n	80072fa <USBH_HandleControl+0x2ca>

  default:
    break;
 80072e4:	bf00      	nop
 80072e6:	e008      	b.n	80072fa <USBH_HandleControl+0x2ca>
    break;
 80072e8:	bf00      	nop
 80072ea:	e006      	b.n	80072fa <USBH_HandleControl+0x2ca>
    break;
 80072ec:	bf00      	nop
 80072ee:	e004      	b.n	80072fa <USBH_HandleControl+0x2ca>
    break;
 80072f0:	bf00      	nop
 80072f2:	e002      	b.n	80072fa <USBH_HandleControl+0x2ca>
    break;
 80072f4:	bf00      	nop
 80072f6:	e000      	b.n	80072fa <USBH_HandleControl+0x2ca>
    break;
 80072f8:	bf00      	nop
  }
  return status;
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b088      	sub	sp, #32
 8007308:	af04      	add	r7, sp, #16
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	4613      	mov	r3, r2
 8007310:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007312:	79f9      	ldrb	r1, [r7, #7]
 8007314:	2300      	movs	r3, #0
 8007316:	9303      	str	r3, [sp, #12]
 8007318:	2308      	movs	r3, #8
 800731a:	9302      	str	r3, [sp, #8]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	2300      	movs	r3, #0
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	2300      	movs	r3, #0
 8007326:	2200      	movs	r2, #0
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f001 f80c 	bl	8008346 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b088      	sub	sp, #32
 800733c:	af04      	add	r7, sp, #16
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	4611      	mov	r1, r2
 8007344:	461a      	mov	r2, r3
 8007346:	460b      	mov	r3, r1
 8007348:	80fb      	strh	r3, [r7, #6]
 800734a:	4613      	mov	r3, r2
 800734c:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007358:	2300      	movs	r3, #0
 800735a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800735c:	7979      	ldrb	r1, [r7, #5]
 800735e:	7e3b      	ldrb	r3, [r7, #24]
 8007360:	9303      	str	r3, [sp, #12]
 8007362:	88fb      	ldrh	r3, [r7, #6]
 8007364:	9302      	str	r3, [sp, #8]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	9301      	str	r3, [sp, #4]
 800736a:	2301      	movs	r3, #1
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	2300      	movs	r3, #0
 8007370:	2200      	movs	r2, #0
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 ffe7 	bl	8008346 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b088      	sub	sp, #32
 8007386:	af04      	add	r7, sp, #16
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	4611      	mov	r1, r2
 800738e:	461a      	mov	r2, r3
 8007390:	460b      	mov	r3, r1
 8007392:	80fb      	strh	r3, [r7, #6]
 8007394:	4613      	mov	r3, r2
 8007396:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007398:	7979      	ldrb	r1, [r7, #5]
 800739a:	2300      	movs	r3, #0
 800739c:	9303      	str	r3, [sp, #12]
 800739e:	88fb      	ldrh	r3, [r7, #6]
 80073a0:	9302      	str	r3, [sp, #8]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	9301      	str	r3, [sp, #4]
 80073a6:	2301      	movs	r3, #1
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	2300      	movs	r3, #0
 80073ac:	2201      	movs	r2, #1
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f000 ffc9 	bl	8008346 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80073b4:	2300      	movs	r3, #0

}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80073be:	b580      	push	{r7, lr}
 80073c0:	b088      	sub	sp, #32
 80073c2:	af04      	add	r7, sp, #16
 80073c4:	60f8      	str	r0, [r7, #12]
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	4611      	mov	r1, r2
 80073ca:	461a      	mov	r2, r3
 80073cc:	460b      	mov	r3, r1
 80073ce:	80fb      	strh	r3, [r7, #6]
 80073d0:	4613      	mov	r3, r2
 80073d2:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80073e2:	7979      	ldrb	r1, [r7, #5]
 80073e4:	7e3b      	ldrb	r3, [r7, #24]
 80073e6:	9303      	str	r3, [sp, #12]
 80073e8:	88fb      	ldrh	r3, [r7, #6]
 80073ea:	9302      	str	r3, [sp, #8]
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	9301      	str	r3, [sp, #4]
 80073f0:	2301      	movs	r3, #1
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	2302      	movs	r3, #2
 80073f6:	2200      	movs	r2, #0
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 ffa4 	bl	8008346 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b088      	sub	sp, #32
 800740c:	af04      	add	r7, sp, #16
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	4611      	mov	r1, r2
 8007414:	461a      	mov	r2, r3
 8007416:	460b      	mov	r3, r1
 8007418:	80fb      	strh	r3, [r7, #6]
 800741a:	4613      	mov	r3, r2
 800741c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800741e:	7979      	ldrb	r1, [r7, #5]
 8007420:	2300      	movs	r3, #0
 8007422:	9303      	str	r3, [sp, #12]
 8007424:	88fb      	ldrh	r3, [r7, #6]
 8007426:	9302      	str	r3, [sp, #8]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	2301      	movs	r3, #1
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	2302      	movs	r3, #2
 8007432:	2201      	movs	r2, #1
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f000 ff86 	bl	8008346 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af04      	add	r7, sp, #16
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	4608      	mov	r0, r1
 800744e:	4611      	mov	r1, r2
 8007450:	461a      	mov	r2, r3
 8007452:	4603      	mov	r3, r0
 8007454:	70fb      	strb	r3, [r7, #3]
 8007456:	460b      	mov	r3, r1
 8007458:	70bb      	strb	r3, [r7, #2]
 800745a:	4613      	mov	r3, r2
 800745c:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800745e:	7878      	ldrb	r0, [r7, #1]
 8007460:	78ba      	ldrb	r2, [r7, #2]
 8007462:	78f9      	ldrb	r1, [r7, #3]
 8007464:	8b3b      	ldrh	r3, [r7, #24]
 8007466:	9302      	str	r3, [sp, #8]
 8007468:	7d3b      	ldrb	r3, [r7, #20]
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	7c3b      	ldrb	r3, [r7, #16]
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	4603      	mov	r3, r0
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 ff19 	bl	80082aa <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007478:	2300      	movs	r3, #0

}
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	460b      	mov	r3, r1
 800748c:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800748e:	78fb      	ldrb	r3, [r7, #3]
 8007490:	4619      	mov	r1, r3
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 ff38 	bl	8008308 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007498:	2300      	movs	r3, #0

}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	460b      	mov	r3, r1
 80074ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f831 	bl	8007516 <USBH_GetFreePipe>
 80074b4:	4603      	mov	r3, r0
 80074b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80074b8:	89fb      	ldrh	r3, [r7, #14]
 80074ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074be:	4293      	cmp	r3, r2
 80074c0:	d007      	beq.n	80074d2 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80074c2:	78fb      	ldrb	r3, [r7, #3]
 80074c4:	89fa      	ldrh	r2, [r7, #14]
 80074c6:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	32e0      	adds	r2, #224	; 0xe0
 80074ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80074d2:	89fb      	ldrh	r3, [r7, #14]
 80074d4:	b2db      	uxtb	r3, r3
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	460b      	mov	r3, r1
 80074e8:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80074ea:	78fb      	ldrb	r3, [r7, #3]
 80074ec:	2b0a      	cmp	r3, #10
 80074ee:	d80b      	bhi.n	8007508 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80074f0:	78fa      	ldrb	r2, [r7, #3]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	32e0      	adds	r2, #224	; 0xe0
 80074f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fa:	78fa      	ldrb	r2, [r7, #3]
 80074fc:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	32e0      	adds	r2, #224	; 0xe0
 8007504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007522:	2300      	movs	r3, #0
 8007524:	73fb      	strb	r3, [r7, #15]
 8007526:	e00e      	b.n	8007546 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007528:	7bfa      	ldrb	r2, [r7, #15]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	32e0      	adds	r2, #224	; 0xe0
 800752e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d102      	bne.n	8007540 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	b29b      	uxth	r3, r3
 800753e:	e007      	b.n	8007550 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	3301      	adds	r3, #1
 8007544:	73fb      	strb	r3, [r7, #15]
 8007546:	7bfb      	ldrb	r3, [r7, #15]
 8007548:	2b0a      	cmp	r3, #10
 800754a:	d9ed      	bls.n	8007528 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800754c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b092      	sub	sp, #72	; 0x48
 8007560:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007562:	f7f9 f805 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007566:	f000 f82d 	bl	80075c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800756a:	f000 f9bb 	bl	80078e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800756e:	f000 f8ab 	bl	80076c8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8007572:	f000 f8d7 	bl	8007724 <MX_I2S3_Init>
  MX_SPI1_Init();
 8007576:	f000 f905 	bl	8007784 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800757a:	f000 fcbd 	bl	8007ef8 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 800757e:	f000 f987 	bl	8007890 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8007582:	f000 f935 	bl	80077f0 <MX_TIM1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8007586:	f000 fcdd 	bl	8007f44 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
//    uint32_t sensor_time = hcsr04_read();
//    double distance  = sensor_time * 0.034/2.0;
    HAL_Delay(1000);
 800758a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800758e:	f7f9 f861 	bl	8000654 <HAL_Delay>

    int n = sprintf(buffer, "%s \r\n", "<12312>");
 8007592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007596:	4a08      	ldr	r2, [pc, #32]	; (80075b8 <main+0x5c>)
 8007598:	4908      	ldr	r1, [pc, #32]	; (80075bc <main+0x60>)
 800759a:	4618      	mov	r0, r3
 800759c:	f001 f8d8 	bl	8008750 <siprintf>
 80075a0:	6478      	str	r0, [r7, #68]	; 0x44
//    HAL_UART_Receive(&huart2, &receive, sizeof(receive), HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart2, &buffer, n, HAL_MAX_DELAY); // Transmit
 80075a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80075aa:	f04f 33ff 	mov.w	r3, #4294967295
 80075ae:	4804      	ldr	r0, [pc, #16]	; (80075c0 <main+0x64>)
 80075b0:	f7fc fe5f 	bl	8004272 <HAL_UART_Transmit>
  {
 80075b4:	e7e7      	b.n	8007586 <main+0x2a>
 80075b6:	bf00      	nop
 80075b8:	08008e08 	.word	0x08008e08
 80075bc:	08008e10 	.word	0x08008e10
 80075c0:	200001b0 	.word	0x200001b0

080075c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b098      	sub	sp, #96	; 0x60
 80075c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075ce:	2230      	movs	r2, #48	; 0x30
 80075d0:	2100      	movs	r1, #0
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 fffc 	bl	80085d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80075d8:	f107 031c 	add.w	r3, r7, #28
 80075dc:	2200      	movs	r2, #0
 80075de:	601a      	str	r2, [r3, #0]
 80075e0:	605a      	str	r2, [r3, #4]
 80075e2:	609a      	str	r2, [r3, #8]
 80075e4:	60da      	str	r2, [r3, #12]
 80075e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80075e8:	f107 030c 	add.w	r3, r7, #12
 80075ec:	2200      	movs	r2, #0
 80075ee:	601a      	str	r2, [r3, #0]
 80075f0:	605a      	str	r2, [r3, #4]
 80075f2:	609a      	str	r2, [r3, #8]
 80075f4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80075f6:	2300      	movs	r3, #0
 80075f8:	60bb      	str	r3, [r7, #8]
 80075fa:	4b31      	ldr	r3, [pc, #196]	; (80076c0 <SystemClock_Config+0xfc>)
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	4a30      	ldr	r2, [pc, #192]	; (80076c0 <SystemClock_Config+0xfc>)
 8007600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007604:	6413      	str	r3, [r2, #64]	; 0x40
 8007606:	4b2e      	ldr	r3, [pc, #184]	; (80076c0 <SystemClock_Config+0xfc>)
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800760e:	60bb      	str	r3, [r7, #8]
 8007610:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007612:	2300      	movs	r3, #0
 8007614:	607b      	str	r3, [r7, #4]
 8007616:	4b2b      	ldr	r3, [pc, #172]	; (80076c4 <SystemClock_Config+0x100>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a2a      	ldr	r2, [pc, #168]	; (80076c4 <SystemClock_Config+0x100>)
 800761c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	4b28      	ldr	r3, [pc, #160]	; (80076c4 <SystemClock_Config+0x100>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800762a:	607b      	str	r3, [r7, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800762e:	2301      	movs	r3, #1
 8007630:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007636:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007638:	2302      	movs	r3, #2
 800763a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800763c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007640:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007642:	2308      	movs	r3, #8
 8007644:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8007646:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800764a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800764c:	2302      	movs	r3, #2
 800764e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007650:	2307      	movs	r3, #7
 8007652:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007654:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007658:	4618      	mov	r0, r3
 800765a:	f7fb fd21 	bl	80030a0 <HAL_RCC_OscConfig>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d001      	beq.n	8007668 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8007664:	f000 fa3c 	bl	8007ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007668:	230f      	movs	r3, #15
 800766a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800766c:	2302      	movs	r3, #2
 800766e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007670:	2300      	movs	r3, #0
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007674:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007678:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800767a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800767e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007680:	f107 031c 	add.w	r3, r7, #28
 8007684:	2105      	movs	r1, #5
 8007686:	4618      	mov	r0, r3
 8007688:	f7fb ff7a 	bl	8003580 <HAL_RCC_ClockConfig>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8007692:	f000 fa25 	bl	8007ae0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8007696:	2301      	movs	r3, #1
 8007698:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800769a:	23c0      	movs	r3, #192	; 0xc0
 800769c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800769e:	2302      	movs	r3, #2
 80076a0:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80076a2:	f107 030c 	add.w	r3, r7, #12
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fc f95c 	bl	8003964 <HAL_RCCEx_PeriphCLKConfig>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80076b2:	f000 fa15 	bl	8007ae0 <Error_Handler>
  }
}
 80076b6:	bf00      	nop
 80076b8:	3760      	adds	r7, #96	; 0x60
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	40023800 	.word	0x40023800
 80076c4:	40007000 	.word	0x40007000

080076c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80076cc:	4b12      	ldr	r3, [pc, #72]	; (8007718 <MX_I2C1_Init+0x50>)
 80076ce:	4a13      	ldr	r2, [pc, #76]	; (800771c <MX_I2C1_Init+0x54>)
 80076d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80076d2:	4b11      	ldr	r3, [pc, #68]	; (8007718 <MX_I2C1_Init+0x50>)
 80076d4:	4a12      	ldr	r2, [pc, #72]	; (8007720 <MX_I2C1_Init+0x58>)
 80076d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80076d8:	4b0f      	ldr	r3, [pc, #60]	; (8007718 <MX_I2C1_Init+0x50>)
 80076da:	2200      	movs	r2, #0
 80076dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80076de:	4b0e      	ldr	r3, [pc, #56]	; (8007718 <MX_I2C1_Init+0x50>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80076e4:	4b0c      	ldr	r3, [pc, #48]	; (8007718 <MX_I2C1_Init+0x50>)
 80076e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80076ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80076ec:	4b0a      	ldr	r3, [pc, #40]	; (8007718 <MX_I2C1_Init+0x50>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80076f2:	4b09      	ldr	r3, [pc, #36]	; (8007718 <MX_I2C1_Init+0x50>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80076f8:	4b07      	ldr	r3, [pc, #28]	; (8007718 <MX_I2C1_Init+0x50>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80076fe:	4b06      	ldr	r3, [pc, #24]	; (8007718 <MX_I2C1_Init+0x50>)
 8007700:	2200      	movs	r2, #0
 8007702:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007704:	4804      	ldr	r0, [pc, #16]	; (8007718 <MX_I2C1_Init+0x50>)
 8007706:	f7fa fef3 	bl	80024f0 <HAL_I2C_Init>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <MX_I2C1_Init+0x4c>
 8007704:	4804      	ldr	r0, [pc, #16]	; (8007718 <MX_I2C1_Init+0x50>)
 8007706:	f7fa fef3 	bl	80024f0 <HAL_I2C_Init>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007710:	f000 f9e6 	bl	8007ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007714:	bf00      	nop
 8007716:	bd80      	pop	{r7, pc}
 8007718:	200000c4 	.word	0x200000c4
 800771c:	40005400 	.word	0x40005400
 8007720:	000186a0 	.word	0x000186a0

08007724 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8007728:	4b13      	ldr	r3, [pc, #76]	; (8007778 <MX_I2S3_Init+0x54>)
 800772a:	4a14      	ldr	r2, [pc, #80]	; (800777c <MX_I2S3_Init+0x58>)
 800772c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800772e:	4b12      	ldr	r3, [pc, #72]	; (8007778 <MX_I2S3_Init+0x54>)
 8007730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007734:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8007736:	4b10      	ldr	r3, [pc, #64]	; (8007778 <MX_I2S3_Init+0x54>)
 8007738:	2200      	movs	r2, #0
 800773a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800773c:	4b0e      	ldr	r3, [pc, #56]	; (8007778 <MX_I2S3_Init+0x54>)
 800773e:	2200      	movs	r2, #0
 8007740:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8007742:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <MX_I2S3_Init+0x54>)
 8007744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007748:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800774a:	4b0b      	ldr	r3, [pc, #44]	; (8007778 <MX_I2S3_Init+0x54>)
 800774c:	4a0c      	ldr	r2, [pc, #48]	; (8007780 <MX_I2S3_Init+0x5c>)
 800774e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8007750:	4b09      	ldr	r3, [pc, #36]	; (8007778 <MX_I2S3_Init+0x54>)
 8007752:	2200      	movs	r2, #0
 8007754:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8007756:	4b08      	ldr	r3, [pc, #32]	; (8007778 <MX_I2S3_Init+0x54>)
 8007758:	2200      	movs	r2, #0
 800775a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800775c:	4b06      	ldr	r3, [pc, #24]	; (8007778 <MX_I2S3_Init+0x54>)
 800775e:	2200      	movs	r2, #0
 8007760:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8007762:	4805      	ldr	r0, [pc, #20]	; (8007778 <MX_I2S3_Init+0x54>)
 8007764:	f7fa fffc 	bl	8002760 <HAL_I2S_Init>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800776e:	f000 f9b7 	bl	8007ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8007772:	bf00      	nop
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	200001f0 	.word	0x200001f0
 800777c:	40003c00 	.word	0x40003c00
 8007780:	00017700 	.word	0x00017700

08007784 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007788:	4b17      	ldr	r3, [pc, #92]	; (80077e8 <MX_SPI1_Init+0x64>)
 800778a:	4a18      	ldr	r2, [pc, #96]	; (80077ec <MX_SPI1_Init+0x68>)
 800778c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800778e:	4b16      	ldr	r3, [pc, #88]	; (80077e8 <MX_SPI1_Init+0x64>)
 8007790:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007794:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007796:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <MX_SPI1_Init+0x64>)
 8007798:	2200      	movs	r2, #0
 800779a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800779c:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <MX_SPI1_Init+0x64>)
 800779e:	2200      	movs	r2, #0
 80077a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80077a2:	4b11      	ldr	r3, [pc, #68]	; (80077e8 <MX_SPI1_Init+0x64>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80077a8:	4b0f      	ldr	r3, [pc, #60]	; (80077e8 <MX_SPI1_Init+0x64>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80077ae:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <MX_SPI1_Init+0x64>)
 80077b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077b6:	4b0c      	ldr	r3, [pc, #48]	; (80077e8 <MX_SPI1_Init+0x64>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80077bc:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <MX_SPI1_Init+0x64>)
 80077be:	2200      	movs	r2, #0
 80077c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80077c2:	4b09      	ldr	r3, [pc, #36]	; (80077e8 <MX_SPI1_Init+0x64>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077c8:	4b07      	ldr	r3, [pc, #28]	; (80077e8 <MX_SPI1_Init+0x64>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80077ce:	4b06      	ldr	r3, [pc, #24]	; (80077e8 <MX_SPI1_Init+0x64>)
 80077d0:	220a      	movs	r2, #10
 80077d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80077d4:	4804      	ldr	r0, [pc, #16]	; (80077e8 <MX_SPI1_Init+0x64>)
 80077d6:	f7fc fa03 	bl	8003be0 <HAL_SPI_Init>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80077e0:	f000 f97e 	bl	8007ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80077e4:	bf00      	nop
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20000158 	.word	0x20000158
 80077ec:	40013000 	.word	0x40013000

080077f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077f6:	f107 0308 	add.w	r3, r7, #8
 80077fa:	2200      	movs	r2, #0
 80077fc:	601a      	str	r2, [r3, #0]
 80077fe:	605a      	str	r2, [r3, #4]
 8007800:	609a      	str	r2, [r3, #8]
 8007802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007804:	463b      	mov	r3, r7
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800780c:	4b1e      	ldr	r3, [pc, #120]	; (8007888 <MX_TIM1_Init+0x98>)
 800780e:	4a1f      	ldr	r2, [pc, #124]	; (800788c <MX_TIM1_Init+0x9c>)
 8007810:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8007812:	4b1d      	ldr	r3, [pc, #116]	; (8007888 <MX_TIM1_Init+0x98>)
 8007814:	2253      	movs	r2, #83	; 0x53
 8007816:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007818:	4b1b      	ldr	r3, [pc, #108]	; (8007888 <MX_TIM1_Init+0x98>)
 800781a:	2200      	movs	r2, #0
 800781c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800781e:	4b1a      	ldr	r3, [pc, #104]	; (8007888 <MX_TIM1_Init+0x98>)
 8007820:	2200      	movs	r2, #0
 8007822:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007824:	4b18      	ldr	r3, [pc, #96]	; (8007888 <MX_TIM1_Init+0x98>)
 8007826:	2200      	movs	r2, #0
 8007828:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800782a:	4b17      	ldr	r3, [pc, #92]	; (8007888 <MX_TIM1_Init+0x98>)
 800782c:	2200      	movs	r2, #0
 800782e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007830:	4b15      	ldr	r3, [pc, #84]	; (8007888 <MX_TIM1_Init+0x98>)
 8007832:	2280      	movs	r2, #128	; 0x80
 8007834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007836:	4814      	ldr	r0, [pc, #80]	; (8007888 <MX_TIM1_Init+0x98>)
 8007838:	f7fc fa36 	bl	8003ca8 <HAL_TIM_Base_Init>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8007842:	f000 f94d 	bl	8007ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800784a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800784c:	f107 0308 	add.w	r3, r7, #8
 8007850:	4619      	mov	r1, r3
 8007852:	480d      	ldr	r0, [pc, #52]	; (8007888 <MX_TIM1_Init+0x98>)
 8007854:	f7fc fa53 	bl	8003cfe <HAL_TIM_ConfigClockSource>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800785e:	f000 f93f 	bl	8007ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007862:	2300      	movs	r3, #0
 8007864:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007866:	2300      	movs	r3, #0
 8007868:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800786a:	463b      	mov	r3, r7
 800786c:	4619      	mov	r1, r3
 800786e:	4806      	ldr	r0, [pc, #24]	; (8007888 <MX_TIM1_Init+0x98>)
 8007870:	f7fc fc36 	bl	80040e0 <HAL_TIMEx_MasterConfigSynchronization>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800787a:	f000 f931 	bl	8007ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800787e:	bf00      	nop
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	20000118 	.word	0x20000118
 800788c:	40010000 	.word	0x40010000

08007890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007894:	4b11      	ldr	r3, [pc, #68]	; (80078dc <MX_USART2_UART_Init+0x4c>)
 8007896:	4a12      	ldr	r2, [pc, #72]	; (80078e0 <MX_USART2_UART_Init+0x50>)
 8007898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800789a:	4b10      	ldr	r3, [pc, #64]	; (80078dc <MX_USART2_UART_Init+0x4c>)
 800789c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80078a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80078a2:	4b0e      	ldr	r3, [pc, #56]	; (80078dc <MX_USART2_UART_Init+0x4c>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80078a8:	4b0c      	ldr	r3, [pc, #48]	; (80078dc <MX_USART2_UART_Init+0x4c>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80078ae:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <MX_USART2_UART_Init+0x4c>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80078b4:	4b09      	ldr	r3, [pc, #36]	; (80078dc <MX_USART2_UART_Init+0x4c>)
 80078b6:	220c      	movs	r2, #12
 80078b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80078ba:	4b08      	ldr	r3, [pc, #32]	; (80078dc <MX_USART2_UART_Init+0x4c>)
 80078bc:	2200      	movs	r2, #0
 80078be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80078c0:	4b06      	ldr	r3, [pc, #24]	; (80078dc <MX_USART2_UART_Init+0x4c>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80078c6:	4805      	ldr	r0, [pc, #20]	; (80078dc <MX_USART2_UART_Init+0x4c>)
 80078c8:	f7fc fc86 	bl	80041d8 <HAL_UART_Init>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80078d2:	f000 f905 	bl	8007ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80078d6:	bf00      	nop
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	200001b0 	.word	0x200001b0
 80078e0:	40004400 	.word	0x40004400

080078e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b08c      	sub	sp, #48	; 0x30
 80078e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078ea:	f107 031c 	add.w	r3, r7, #28
 80078ee:	2200      	movs	r2, #0
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	605a      	str	r2, [r3, #4]
 80078f4:	609a      	str	r2, [r3, #8]
 80078f6:	60da      	str	r2, [r3, #12]
 80078f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80078fa:	2300      	movs	r3, #0
 80078fc:	61bb      	str	r3, [r7, #24]
 80078fe:	4b71      	ldr	r3, [pc, #452]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 8007900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007902:	4a70      	ldr	r2, [pc, #448]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 8007904:	f043 0310 	orr.w	r3, r3, #16
 8007908:	6313      	str	r3, [r2, #48]	; 0x30
 800790a:	4b6e      	ldr	r3, [pc, #440]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 800790c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790e:	f003 0310 	and.w	r3, r3, #16
 8007912:	61bb      	str	r3, [r7, #24]
 8007914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007916:	2300      	movs	r3, #0
 8007918:	617b      	str	r3, [r7, #20]
 800791a:	4b6a      	ldr	r3, [pc, #424]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 800791c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791e:	4a69      	ldr	r2, [pc, #420]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 8007920:	f043 0304 	orr.w	r3, r3, #4
 8007924:	6313      	str	r3, [r2, #48]	; 0x30
 8007926:	4b67      	ldr	r3, [pc, #412]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 8007928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792a:	f003 0304 	and.w	r3, r3, #4
 800792e:	617b      	str	r3, [r7, #20]
 8007930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007932:	2300      	movs	r3, #0
 8007934:	613b      	str	r3, [r7, #16]
 8007936:	4b63      	ldr	r3, [pc, #396]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 8007938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793a:	4a62      	ldr	r2, [pc, #392]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 800793c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007940:	6313      	str	r3, [r2, #48]	; 0x30
 8007942:	4b60      	ldr	r3, [pc, #384]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 8007944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800794a:	613b      	str	r3, [r7, #16]
 800794c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800794e:	2300      	movs	r3, #0
 8007950:	60fb      	str	r3, [r7, #12]
 8007952:	4b5c      	ldr	r3, [pc, #368]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 8007954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007956:	4a5b      	ldr	r2, [pc, #364]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 8007958:	f043 0301 	orr.w	r3, r3, #1
 800795c:	6313      	str	r3, [r2, #48]	; 0x30
 800795e:	4b59      	ldr	r3, [pc, #356]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 8007960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	60fb      	str	r3, [r7, #12]
 8007968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800796a:	2300      	movs	r3, #0
 800796c:	60bb      	str	r3, [r7, #8]
 800796e:	4b55      	ldr	r3, [pc, #340]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 8007970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007972:	4a54      	ldr	r2, [pc, #336]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 8007974:	f043 0302 	orr.w	r3, r3, #2
 8007978:	6313      	str	r3, [r2, #48]	; 0x30
 800797a:	4b52      	ldr	r3, [pc, #328]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 800797c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797e:	f003 0302 	and.w	r3, r3, #2
 8007982:	60bb      	str	r3, [r7, #8]
 8007984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007986:	2300      	movs	r3, #0
 8007988:	607b      	str	r3, [r7, #4]
 800798a:	4b4e      	ldr	r3, [pc, #312]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 800798c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798e:	4a4d      	ldr	r2, [pc, #308]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 8007990:	f043 0308 	orr.w	r3, r3, #8
 8007994:	6313      	str	r3, [r2, #48]	; 0x30
 8007996:	4b4b      	ldr	r3, [pc, #300]	; (8007ac4 <MX_GPIO_Init+0x1e0>)
 8007998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799a:	f003 0308 	and.w	r3, r3, #8
 800799e:	607b      	str	r3, [r7, #4]
 80079a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80079a2:	2200      	movs	r2, #0
 80079a4:	2108      	movs	r1, #8
 80079a6:	4848      	ldr	r0, [pc, #288]	; (8007ac8 <MX_GPIO_Init+0x1e4>)
 80079a8:	f7f9 f922 	bl	8000bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80079ac:	2201      	movs	r2, #1
 80079ae:	2101      	movs	r1, #1
 80079b0:	4846      	ldr	r0, [pc, #280]	; (8007acc <MX_GPIO_Init+0x1e8>)
 80079b2:	f7f9 f91d 	bl	8000bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80079b6:	2200      	movs	r2, #0
 80079b8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80079bc:	4844      	ldr	r0, [pc, #272]	; (8007ad0 <MX_GPIO_Init+0x1ec>)
 80079be:	f7f9 f917 	bl	8000bf0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80079c2:	2308      	movs	r3, #8
 80079c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079c6:	2301      	movs	r3, #1
 80079c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079ca:	2300      	movs	r3, #0
 80079cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ce:	2300      	movs	r3, #0
 80079d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80079d2:	f107 031c 	add.w	r3, r7, #28
 80079d6:	4619      	mov	r1, r3
 80079d8:	483b      	ldr	r0, [pc, #236]	; (8007ac8 <MX_GPIO_Init+0x1e4>)
 80079da:	f7f8 ff6f 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80079de:	2301      	movs	r3, #1
 80079e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079e2:	2301      	movs	r3, #1
 80079e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ea:	2300      	movs	r3, #0
 80079ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80079ee:	f107 031c 	add.w	r3, r7, #28
 80079f2:	4619      	mov	r1, r3
 80079f4:	4835      	ldr	r0, [pc, #212]	; (8007acc <MX_GPIO_Init+0x1e8>)
 80079f6:	f7f8 ff61 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80079fa:	2308      	movs	r3, #8
 80079fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079fe:	2302      	movs	r3, #2
 8007a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a02:	2300      	movs	r3, #0
 8007a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a06:	2300      	movs	r3, #0
 8007a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007a0a:	2305      	movs	r3, #5
 8007a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8007a0e:	f107 031c 	add.w	r3, r7, #28
 8007a12:	4619      	mov	r1, r3
 8007a14:	482d      	ldr	r0, [pc, #180]	; (8007acc <MX_GPIO_Init+0x1e8>)
 8007a16:	f7f8 ff51 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007a1e:	4b2d      	ldr	r3, [pc, #180]	; (8007ad4 <MX_GPIO_Init+0x1f0>)
 8007a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a22:	2300      	movs	r3, #0
 8007a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007a26:	f107 031c 	add.w	r3, r7, #28
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	482a      	ldr	r0, [pc, #168]	; (8007ad8 <MX_GPIO_Init+0x1f4>)
 8007a2e:	f7f8 ff45 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8007a32:	2304      	movs	r3, #4
 8007a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a36:	2300      	movs	r3, #0
 8007a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8007a3e:	f107 031c 	add.w	r3, r7, #28
 8007a42:	4619      	mov	r1, r3
 8007a44:	4825      	ldr	r0, [pc, #148]	; (8007adc <MX_GPIO_Init+0x1f8>)
 8007a46:	f7f8 ff39 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8007a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a50:	2302      	movs	r3, #2
 8007a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a54:	2300      	movs	r3, #0
 8007a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007a5c:	2305      	movs	r3, #5
 8007a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8007a60:	f107 031c 	add.w	r3, r7, #28
 8007a64:	4619      	mov	r1, r3
 8007a66:	481d      	ldr	r0, [pc, #116]	; (8007adc <MX_GPIO_Init+0x1f8>)
 8007a68:	f7f8 ff28 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8007a6c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8007a70:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a72:	2301      	movs	r3, #1
 8007a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a76:	2300      	movs	r3, #0
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a7e:	f107 031c 	add.w	r3, r7, #28
 8007a82:	4619      	mov	r1, r3
 8007a84:	4812      	ldr	r0, [pc, #72]	; (8007ad0 <MX_GPIO_Init+0x1ec>)
 8007a86:	f7f8 ff19 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8007a8a:	2320      	movs	r3, #32
 8007a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a92:	2300      	movs	r3, #0
 8007a94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8007a96:	f107 031c 	add.w	r3, r7, #28
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	480c      	ldr	r0, [pc, #48]	; (8007ad0 <MX_GPIO_Init+0x1ec>)
 8007a9e:	f7f8 ff0d 	bl	80008bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007aa6:	4b0b      	ldr	r3, [pc, #44]	; (8007ad4 <MX_GPIO_Init+0x1f0>)
 8007aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8007aae:	f107 031c 	add.w	r3, r7, #28
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4804      	ldr	r0, [pc, #16]	; (8007ac8 <MX_GPIO_Init+0x1e4>)
 8007ab6:	f7f8 ff01 	bl	80008bc <HAL_GPIO_Init>

}
 8007aba:	bf00      	nop
 8007abc:	3730      	adds	r7, #48	; 0x30
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	40023800 	.word	0x40023800
 8007ac8:	40021000 	.word	0x40021000
 8007acc:	40020800 	.word	0x40020800
 8007ad0:	40020c00 	.word	0x40020c00
 8007ad4:	10120000 	.word	0x10120000
 8007ad8:	40020000 	.word	0x40020000
 8007adc:	40020400 	.word	0x40020400

08007ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007ae4:	bf00      	nop
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
	...

08007af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007af6:	2300      	movs	r3, #0
 8007af8:	607b      	str	r3, [r7, #4]
 8007afa:	4b10      	ldr	r3, [pc, #64]	; (8007b3c <HAL_MspInit+0x4c>)
 8007afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afe:	4a0f      	ldr	r2, [pc, #60]	; (8007b3c <HAL_MspInit+0x4c>)
 8007b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b04:	6453      	str	r3, [r2, #68]	; 0x44
 8007b06:	4b0d      	ldr	r3, [pc, #52]	; (8007b3c <HAL_MspInit+0x4c>)
 8007b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b0e:	607b      	str	r3, [r7, #4]
 8007b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b12:	2300      	movs	r3, #0
 8007b14:	603b      	str	r3, [r7, #0]
 8007b16:	4b09      	ldr	r3, [pc, #36]	; (8007b3c <HAL_MspInit+0x4c>)
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	4a08      	ldr	r2, [pc, #32]	; (8007b3c <HAL_MspInit+0x4c>)
 8007b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b20:	6413      	str	r3, [r2, #64]	; 0x40
 8007b22:	4b06      	ldr	r3, [pc, #24]	; (8007b3c <HAL_MspInit+0x4c>)
 8007b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b2a:	603b      	str	r3, [r7, #0]
 8007b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007b2e:	2007      	movs	r0, #7
 8007b30:	f7f8 fe82 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007b34:	bf00      	nop
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	40023800 	.word	0x40023800

08007b40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08a      	sub	sp, #40	; 0x28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b48:	f107 0314 	add.w	r3, r7, #20
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	605a      	str	r2, [r3, #4]
 8007b52:	609a      	str	r2, [r3, #8]
 8007b54:	60da      	str	r2, [r3, #12]
 8007b56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a19      	ldr	r2, [pc, #100]	; (8007bc4 <HAL_I2C_MspInit+0x84>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d12c      	bne.n	8007bbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b62:	2300      	movs	r3, #0
 8007b64:	613b      	str	r3, [r7, #16]
 8007b66:	4b18      	ldr	r3, [pc, #96]	; (8007bc8 <HAL_I2C_MspInit+0x88>)
 8007b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6a:	4a17      	ldr	r2, [pc, #92]	; (8007bc8 <HAL_I2C_MspInit+0x88>)
 8007b6c:	f043 0302 	orr.w	r3, r3, #2
 8007b70:	6313      	str	r3, [r2, #48]	; 0x30
 8007b72:	4b15      	ldr	r3, [pc, #84]	; (8007bc8 <HAL_I2C_MspInit+0x88>)
 8007b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	613b      	str	r3, [r7, #16]
 8007b7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8007b7e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8007b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007b84:	2312      	movs	r3, #18
 8007b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007b90:	2304      	movs	r3, #4
 8007b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b94:	f107 0314 	add.w	r3, r7, #20
 8007b98:	4619      	mov	r1, r3
 8007b9a:	480c      	ldr	r0, [pc, #48]	; (8007bcc <HAL_I2C_MspInit+0x8c>)
 8007b9c:	f7f8 fe8e 	bl	80008bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]
 8007ba4:	4b08      	ldr	r3, [pc, #32]	; (8007bc8 <HAL_I2C_MspInit+0x88>)
 8007ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba8:	4a07      	ldr	r2, [pc, #28]	; (8007bc8 <HAL_I2C_MspInit+0x88>)
 8007baa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bae:	6413      	str	r3, [r2, #64]	; 0x40
 8007bb0:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <HAL_I2C_MspInit+0x88>)
 8007bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007bbc:	bf00      	nop
 8007bbe:	3728      	adds	r7, #40	; 0x28
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	40005400 	.word	0x40005400
 8007bc8:	40023800 	.word	0x40023800
 8007bcc:	40020400 	.word	0x40020400

08007bd0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08a      	sub	sp, #40	; 0x28
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bd8:	f107 0314 	add.w	r3, r7, #20
 8007bdc:	2200      	movs	r2, #0
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	605a      	str	r2, [r3, #4]
 8007be2:	609a      	str	r2, [r3, #8]
 8007be4:	60da      	str	r2, [r3, #12]
 8007be6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a28      	ldr	r2, [pc, #160]	; (8007c90 <HAL_I2S_MspInit+0xc0>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d14a      	bne.n	8007c88 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	613b      	str	r3, [r7, #16]
 8007bf6:	4b27      	ldr	r3, [pc, #156]	; (8007c94 <HAL_I2S_MspInit+0xc4>)
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfa:	4a26      	ldr	r2, [pc, #152]	; (8007c94 <HAL_I2S_MspInit+0xc4>)
 8007bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c00:	6413      	str	r3, [r2, #64]	; 0x40
 8007c02:	4b24      	ldr	r3, [pc, #144]	; (8007c94 <HAL_I2S_MspInit+0xc4>)
 8007c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c0a:	613b      	str	r3, [r7, #16]
 8007c0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	4b20      	ldr	r3, [pc, #128]	; (8007c94 <HAL_I2S_MspInit+0xc4>)
 8007c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c16:	4a1f      	ldr	r2, [pc, #124]	; (8007c94 <HAL_I2S_MspInit+0xc4>)
 8007c18:	f043 0301 	orr.w	r3, r3, #1
 8007c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c1e:	4b1d      	ldr	r3, [pc, #116]	; (8007c94 <HAL_I2S_MspInit+0xc4>)
 8007c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	60fb      	str	r3, [r7, #12]
 8007c28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60bb      	str	r3, [r7, #8]
 8007c2e:	4b19      	ldr	r3, [pc, #100]	; (8007c94 <HAL_I2S_MspInit+0xc4>)
 8007c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c32:	4a18      	ldr	r2, [pc, #96]	; (8007c94 <HAL_I2S_MspInit+0xc4>)
 8007c34:	f043 0304 	orr.w	r3, r3, #4
 8007c38:	6313      	str	r3, [r2, #48]	; 0x30
 8007c3a:	4b16      	ldr	r3, [pc, #88]	; (8007c94 <HAL_I2S_MspInit+0xc4>)
 8007c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3e:	f003 0304 	and.w	r3, r3, #4
 8007c42:	60bb      	str	r3, [r7, #8]
 8007c44:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8007c46:	2310      	movs	r3, #16
 8007c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c52:	2300      	movs	r3, #0
 8007c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007c56:	2306      	movs	r3, #6
 8007c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8007c5a:	f107 0314 	add.w	r3, r7, #20
 8007c5e:	4619      	mov	r1, r3
 8007c60:	480d      	ldr	r0, [pc, #52]	; (8007c98 <HAL_I2S_MspInit+0xc8>)
 8007c62:	f7f8 fe2b 	bl	80008bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8007c66:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8007c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c70:	2300      	movs	r3, #0
 8007c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c74:	2300      	movs	r3, #0
 8007c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007c78:	2306      	movs	r3, #6
 8007c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c7c:	f107 0314 	add.w	r3, r7, #20
 8007c80:	4619      	mov	r1, r3
 8007c82:	4806      	ldr	r0, [pc, #24]	; (8007c9c <HAL_I2S_MspInit+0xcc>)
 8007c84:	f7f8 fe1a 	bl	80008bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007c88:	bf00      	nop
 8007c8a:	3728      	adds	r7, #40	; 0x28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	40003c00 	.word	0x40003c00
 8007c94:	40023800 	.word	0x40023800
 8007c98:	40020000 	.word	0x40020000
 8007c9c:	40020800 	.word	0x40020800

08007ca0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b08a      	sub	sp, #40	; 0x28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ca8:	f107 0314 	add.w	r3, r7, #20
 8007cac:	2200      	movs	r2, #0
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	605a      	str	r2, [r3, #4]
 8007cb2:	609a      	str	r2, [r3, #8]
 8007cb4:	60da      	str	r2, [r3, #12]
 8007cb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a19      	ldr	r2, [pc, #100]	; (8007d24 <HAL_SPI_MspInit+0x84>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d12b      	bne.n	8007d1a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	613b      	str	r3, [r7, #16]
 8007cc6:	4b18      	ldr	r3, [pc, #96]	; (8007d28 <HAL_SPI_MspInit+0x88>)
 8007cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cca:	4a17      	ldr	r2, [pc, #92]	; (8007d28 <HAL_SPI_MspInit+0x88>)
 8007ccc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8007cd2:	4b15      	ldr	r3, [pc, #84]	; (8007d28 <HAL_SPI_MspInit+0x88>)
 8007cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cda:	613b      	str	r3, [r7, #16]
 8007cdc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	4b11      	ldr	r3, [pc, #68]	; (8007d28 <HAL_SPI_MspInit+0x88>)
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce6:	4a10      	ldr	r2, [pc, #64]	; (8007d28 <HAL_SPI_MspInit+0x88>)
 8007ce8:	f043 0301 	orr.w	r3, r3, #1
 8007cec:	6313      	str	r3, [r2, #48]	; 0x30
 8007cee:	4b0e      	ldr	r3, [pc, #56]	; (8007d28 <HAL_SPI_MspInit+0x88>)
 8007cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8007cfa:	23e0      	movs	r3, #224	; 0xe0
 8007cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cfe:	2302      	movs	r3, #2
 8007d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d02:	2300      	movs	r3, #0
 8007d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d06:	2300      	movs	r3, #0
 8007d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007d0a:	2305      	movs	r3, #5
 8007d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d0e:	f107 0314 	add.w	r3, r7, #20
 8007d12:	4619      	mov	r1, r3
 8007d14:	4805      	ldr	r0, [pc, #20]	; (8007d2c <HAL_SPI_MspInit+0x8c>)
 8007d16:	f7f8 fdd1 	bl	80008bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007d1a:	bf00      	nop
 8007d1c:	3728      	adds	r7, #40	; 0x28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	40013000 	.word	0x40013000
 8007d28:	40023800 	.word	0x40023800
 8007d2c:	40020000 	.word	0x40020000

08007d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a0b      	ldr	r2, [pc, #44]	; (8007d6c <HAL_TIM_Base_MspInit+0x3c>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d10d      	bne.n	8007d5e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	4b0a      	ldr	r3, [pc, #40]	; (8007d70 <HAL_TIM_Base_MspInit+0x40>)
 8007d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4a:	4a09      	ldr	r2, [pc, #36]	; (8007d70 <HAL_TIM_Base_MspInit+0x40>)
 8007d4c:	f043 0301 	orr.w	r3, r3, #1
 8007d50:	6453      	str	r3, [r2, #68]	; 0x44
 8007d52:	4b07      	ldr	r3, [pc, #28]	; (8007d70 <HAL_TIM_Base_MspInit+0x40>)
 8007d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8007d5e:	bf00      	nop
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	40010000 	.word	0x40010000
 8007d70:	40023800 	.word	0x40023800

08007d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08a      	sub	sp, #40	; 0x28
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d7c:	f107 0314 	add.w	r3, r7, #20
 8007d80:	2200      	movs	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	605a      	str	r2, [r3, #4]
 8007d86:	609a      	str	r2, [r3, #8]
 8007d88:	60da      	str	r2, [r3, #12]
 8007d8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a19      	ldr	r2, [pc, #100]	; (8007df8 <HAL_UART_MspInit+0x84>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d12b      	bne.n	8007dee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007d96:	2300      	movs	r3, #0
 8007d98:	613b      	str	r3, [r7, #16]
 8007d9a:	4b18      	ldr	r3, [pc, #96]	; (8007dfc <HAL_UART_MspInit+0x88>)
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	4a17      	ldr	r2, [pc, #92]	; (8007dfc <HAL_UART_MspInit+0x88>)
 8007da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007da4:	6413      	str	r3, [r2, #64]	; 0x40
 8007da6:	4b15      	ldr	r3, [pc, #84]	; (8007dfc <HAL_UART_MspInit+0x88>)
 8007da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dae:	613b      	str	r3, [r7, #16]
 8007db0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007db2:	2300      	movs	r3, #0
 8007db4:	60fb      	str	r3, [r7, #12]
 8007db6:	4b11      	ldr	r3, [pc, #68]	; (8007dfc <HAL_UART_MspInit+0x88>)
 8007db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dba:	4a10      	ldr	r2, [pc, #64]	; (8007dfc <HAL_UART_MspInit+0x88>)
 8007dbc:	f043 0301 	orr.w	r3, r3, #1
 8007dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8007dc2:	4b0e      	ldr	r3, [pc, #56]	; (8007dfc <HAL_UART_MspInit+0x88>)
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	60fb      	str	r3, [r7, #12]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007dce:	230c      	movs	r3, #12
 8007dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dda:	2303      	movs	r3, #3
 8007ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007dde:	2307      	movs	r3, #7
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007de2:	f107 0314 	add.w	r3, r7, #20
 8007de6:	4619      	mov	r1, r3
 8007de8:	4805      	ldr	r0, [pc, #20]	; (8007e00 <HAL_UART_MspInit+0x8c>)
 8007dea:	f7f8 fd67 	bl	80008bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007dee:	bf00      	nop
 8007df0:	3728      	adds	r7, #40	; 0x28
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	40004400 	.word	0x40004400
 8007dfc:	40023800 	.word	0x40023800
 8007e00:	40020000 	.word	0x40020000

08007e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007e04:	b480      	push	{r7}
 8007e06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007e08:	bf00      	nop
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007e12:	b480      	push	{r7}
 8007e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007e16:	e7fe      	b.n	8007e16 <HardFault_Handler+0x4>

08007e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007e1c:	e7fe      	b.n	8007e1c <MemManage_Handler+0x4>

08007e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007e22:	e7fe      	b.n	8007e22 <BusFault_Handler+0x4>

08007e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007e24:	b480      	push	{r7}
 8007e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007e28:	e7fe      	b.n	8007e28 <UsageFault_Handler+0x4>

08007e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007e2a:	b480      	push	{r7}
 8007e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007e2e:	bf00      	nop
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007e3c:	bf00      	nop
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007e46:	b480      	push	{r7}
 8007e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007e4a:	bf00      	nop
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007e58:	f7f8 fbdc 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007e5c:	bf00      	nop
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8007e64:	4802      	ldr	r0, [pc, #8]	; (8007e70 <OTG_FS_IRQHandler+0x10>)
 8007e66:	f7f9 f961 	bl	800112c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007e6a:	bf00      	nop
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	20000604 	.word	0x20000604

08007e74 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007e7c:	4b11      	ldr	r3, [pc, #68]	; (8007ec4 <_sbrk+0x50>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d102      	bne.n	8007e8a <_sbrk+0x16>
		heap_end = &end;
 8007e84:	4b0f      	ldr	r3, [pc, #60]	; (8007ec4 <_sbrk+0x50>)
 8007e86:	4a10      	ldr	r2, [pc, #64]	; (8007ec8 <_sbrk+0x54>)
 8007e88:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007e8a:	4b0e      	ldr	r3, [pc, #56]	; (8007ec4 <_sbrk+0x50>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007e90:	4b0c      	ldr	r3, [pc, #48]	; (8007ec4 <_sbrk+0x50>)
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4413      	add	r3, r2
 8007e98:	466a      	mov	r2, sp
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d907      	bls.n	8007eae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007e9e:	f000 fb5d 	bl	800855c <__errno>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	230c      	movs	r3, #12
 8007ea6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8007eac:	e006      	b.n	8007ebc <_sbrk+0x48>
	}

	heap_end += incr;
 8007eae:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <_sbrk+0x50>)
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	4a03      	ldr	r2, [pc, #12]	; (8007ec4 <_sbrk+0x50>)
 8007eb8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007eba:	68fb      	ldr	r3, [r7, #12]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	200000b0 	.word	0x200000b0
 8007ec8:	200008d0 	.word	0x200008d0

08007ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007ed0:	4b08      	ldr	r3, [pc, #32]	; (8007ef4 <SystemInit+0x28>)
 8007ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ed6:	4a07      	ldr	r2, [pc, #28]	; (8007ef4 <SystemInit+0x28>)
 8007ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007ee0:	4b04      	ldr	r3, [pc, #16]	; (8007ef4 <SystemInit+0x28>)
 8007ee2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ee6:	609a      	str	r2, [r3, #8]
#endif
}
 8007ee8:	bf00      	nop
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr
 8007ef2:	bf00      	nop
 8007ef4:	e000ed00 	.word	0xe000ed00

08007ef8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007efc:	2201      	movs	r2, #1
 8007efe:	490e      	ldr	r1, [pc, #56]	; (8007f38 <MX_USB_HOST_Init+0x40>)
 8007f00:	480e      	ldr	r0, [pc, #56]	; (8007f3c <MX_USB_HOST_Init+0x44>)
 8007f02:	f7fe f8ed 	bl	80060e0 <USBH_Init>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007f0c:	f7ff fde8 	bl	8007ae0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007f10:	490b      	ldr	r1, [pc, #44]	; (8007f40 <MX_USB_HOST_Init+0x48>)
 8007f12:	480a      	ldr	r0, [pc, #40]	; (8007f3c <MX_USB_HOST_Init+0x44>)
 8007f14:	f7fe f957 	bl	80061c6 <USBH_RegisterClass>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d001      	beq.n	8007f22 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007f1e:	f7ff fddf 	bl	8007ae0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007f22:	4806      	ldr	r0, [pc, #24]	; (8007f3c <MX_USB_HOST_Init+0x44>)
 8007f24:	f7fe f9dc 	bl	80062e0 <USBH_Start>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007f2e:	f7ff fdd7 	bl	8007ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007f32:	bf00      	nop
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	08007f59 	.word	0x08007f59
 8007f3c:	20000238 	.word	0x20000238
 8007f40:	20000008 	.word	0x20000008

08007f44 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007f48:	4802      	ldr	r0, [pc, #8]	; (8007f54 <MX_USB_HOST_Process+0x10>)
 8007f4a:	f7fe f9d9 	bl	8006300 <USBH_Process>
}
 8007f4e:	bf00      	nop
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20000238 	.word	0x20000238

08007f58 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	460b      	mov	r3, r1
 8007f62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007f64:	78fb      	ldrb	r3, [r7, #3]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	2b04      	cmp	r3, #4
 8007f6a:	d819      	bhi.n	8007fa0 <USBH_UserProcess+0x48>
 8007f6c:	a201      	add	r2, pc, #4	; (adr r2, 8007f74 <USBH_UserProcess+0x1c>)
 8007f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f72:	bf00      	nop
 8007f74:	08007fa1 	.word	0x08007fa1
 8007f78:	08007f91 	.word	0x08007f91
 8007f7c:	08007fa1 	.word	0x08007fa1
 8007f80:	08007f99 	.word	0x08007f99
 8007f84:	08007f89 	.word	0x08007f89
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007f88:	4b09      	ldr	r3, [pc, #36]	; (8007fb0 <USBH_UserProcess+0x58>)
 8007f8a:	2203      	movs	r2, #3
 8007f8c:	701a      	strb	r2, [r3, #0]
  break;
 8007f8e:	e008      	b.n	8007fa2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007f90:	4b07      	ldr	r3, [pc, #28]	; (8007fb0 <USBH_UserProcess+0x58>)
 8007f92:	2202      	movs	r2, #2
 8007f94:	701a      	strb	r2, [r3, #0]
  break;
 8007f96:	e004      	b.n	8007fa2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007f98:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <USBH_UserProcess+0x58>)
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	701a      	strb	r2, [r3, #0]
  break;
 8007f9e:	e000      	b.n	8007fa2 <USBH_UserProcess+0x4a>

  default:
  break;
 8007fa0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007fa2:	bf00      	nop
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	200000b4 	.word	0x200000b4

08007fb4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b08a      	sub	sp, #40	; 0x28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fbc:	f107 0314 	add.w	r3, r7, #20
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	605a      	str	r2, [r3, #4]
 8007fc6:	609a      	str	r2, [r3, #8]
 8007fc8:	60da      	str	r2, [r3, #12]
 8007fca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007fd4:	d147      	bne.n	8008066 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	613b      	str	r3, [r7, #16]
 8007fda:	4b25      	ldr	r3, [pc, #148]	; (8008070 <HAL_HCD_MspInit+0xbc>)
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fde:	4a24      	ldr	r2, [pc, #144]	; (8008070 <HAL_HCD_MspInit+0xbc>)
 8007fe0:	f043 0301 	orr.w	r3, r3, #1
 8007fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8007fe6:	4b22      	ldr	r3, [pc, #136]	; (8008070 <HAL_HCD_MspInit+0xbc>)
 8007fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fea:	f003 0301 	and.w	r3, r3, #1
 8007fee:	613b      	str	r3, [r7, #16]
 8007ff0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007ff2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008000:	f107 0314 	add.w	r3, r7, #20
 8008004:	4619      	mov	r1, r3
 8008006:	481b      	ldr	r0, [pc, #108]	; (8008074 <HAL_HCD_MspInit+0xc0>)
 8008008:	f7f8 fc58 	bl	80008bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800800c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008012:	2302      	movs	r3, #2
 8008014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008016:	2300      	movs	r3, #0
 8008018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800801a:	2300      	movs	r3, #0
 800801c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800801e:	230a      	movs	r3, #10
 8008020:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008022:	f107 0314 	add.w	r3, r7, #20
 8008026:	4619      	mov	r1, r3
 8008028:	4812      	ldr	r0, [pc, #72]	; (8008074 <HAL_HCD_MspInit+0xc0>)
 800802a:	f7f8 fc47 	bl	80008bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800802e:	4b10      	ldr	r3, [pc, #64]	; (8008070 <HAL_HCD_MspInit+0xbc>)
 8008030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008032:	4a0f      	ldr	r2, [pc, #60]	; (8008070 <HAL_HCD_MspInit+0xbc>)
 8008034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008038:	6353      	str	r3, [r2, #52]	; 0x34
 800803a:	2300      	movs	r3, #0
 800803c:	60fb      	str	r3, [r7, #12]
 800803e:	4b0c      	ldr	r3, [pc, #48]	; (8008070 <HAL_HCD_MspInit+0xbc>)
 8008040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008042:	4a0b      	ldr	r2, [pc, #44]	; (8008070 <HAL_HCD_MspInit+0xbc>)
 8008044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008048:	6453      	str	r3, [r2, #68]	; 0x44
 800804a:	4b09      	ldr	r3, [pc, #36]	; (8008070 <HAL_HCD_MspInit+0xbc>)
 800804c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008056:	2200      	movs	r2, #0
 8008058:	2100      	movs	r1, #0
 800805a:	2043      	movs	r0, #67	; 0x43
 800805c:	f7f8 fbf7 	bl	800084e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008060:	2043      	movs	r0, #67	; 0x43
 8008062:	f7f8 fc10 	bl	8000886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008066:	bf00      	nop
 8008068:	3728      	adds	r7, #40	; 0x28
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	40023800 	.word	0x40023800
 8008074:	40020000 	.word	0x40020000

08008078 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008086:	4618      	mov	r0, r3
 8008088:	f7fe fbeb 	bl	8006862 <USBH_LL_IncTimer>
}
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fe fc30 	bl	8006908 <USBH_LL_Connect>
}
 80080a8:	bf00      	nop
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fe fc48 	bl	8006954 <USBH_LL_Disconnect>
}
 80080c4:	bf00      	nop
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	460b      	mov	r3, r1
 80080d6:	70fb      	strb	r3, [r7, #3]
 80080d8:	4613      	mov	r3, r2
 80080da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe fbdd 	bl	80068b6 <USBH_LL_PortEnabled>
} 
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008112:	4618      	mov	r0, r3
 8008114:	f7fe fbdd 	bl	80068d2 <USBH_LL_PortDisabled>
} 
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800812e:	2b01      	cmp	r3, #1
 8008130:	d12a      	bne.n	8008188 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008132:	4a18      	ldr	r2, [pc, #96]	; (8008194 <USBH_LL_Init+0x74>)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a15      	ldr	r2, [pc, #84]	; (8008194 <USBH_LL_Init+0x74>)
 800813e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008142:	4b14      	ldr	r3, [pc, #80]	; (8008194 <USBH_LL_Init+0x74>)
 8008144:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008148:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800814a:	4b12      	ldr	r3, [pc, #72]	; (8008194 <USBH_LL_Init+0x74>)
 800814c:	2208      	movs	r2, #8
 800814e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008150:	4b10      	ldr	r3, [pc, #64]	; (8008194 <USBH_LL_Init+0x74>)
 8008152:	2201      	movs	r2, #1
 8008154:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008156:	4b0f      	ldr	r3, [pc, #60]	; (8008194 <USBH_LL_Init+0x74>)
 8008158:	2200      	movs	r2, #0
 800815a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800815c:	4b0d      	ldr	r3, [pc, #52]	; (8008194 <USBH_LL_Init+0x74>)
 800815e:	2202      	movs	r2, #2
 8008160:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008162:	4b0c      	ldr	r3, [pc, #48]	; (8008194 <USBH_LL_Init+0x74>)
 8008164:	2200      	movs	r2, #0
 8008166:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008168:	480a      	ldr	r0, [pc, #40]	; (8008194 <USBH_LL_Init+0x74>)
 800816a:	f7f8 fd5a 	bl	8000c22 <HAL_HCD_Init>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d001      	beq.n	8008178 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008174:	f7ff fcb4 	bl	8007ae0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008178:	4806      	ldr	r0, [pc, #24]	; (8008194 <USBH_LL_Init+0x74>)
 800817a:	f7f9 f955 	bl	8001428 <HAL_HCD_GetCurrentFrame>
 800817e:	4603      	mov	r3, r0
 8008180:	4619      	mov	r1, r3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7fe fb5e 	bl	8006844 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008188:	2300      	movs	r3, #0
}
 800818a:	4618      	mov	r0, r3
 800818c:	3708      	adds	r7, #8
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	20000604 	.word	0x20000604

08008198 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081a0:	2300      	movs	r3, #0
 80081a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7f9 f8c2 	bl	8001338 <HAL_HCD_Start>
 80081b4:	4603      	mov	r3, r0
 80081b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 f95c 	bl	8008478 <USBH_Get_USB_Status>
 80081c0:	4603      	mov	r3, r0
 80081c2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7f9 f8ca 	bl	800137e <HAL_HCD_Stop>
 80081ea:	4603      	mov	r3, r0
 80081ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081ee:	7bfb      	ldrb	r3, [r7, #15]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 f941 	bl	8008478 <USBH_Get_USB_Status>
 80081f6:	4603      	mov	r3, r0
 80081f8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80081fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800820c:	2301      	movs	r3, #1
 800820e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008216:	4618      	mov	r0, r3
 8008218:	f7f9 f914 	bl	8001444 <HAL_HCD_GetCurrentSpeed>
 800821c:	4603      	mov	r3, r0
 800821e:	2b01      	cmp	r3, #1
 8008220:	d007      	beq.n	8008232 <USBH_LL_GetSpeed+0x2e>
 8008222:	2b01      	cmp	r3, #1
 8008224:	d302      	bcc.n	800822c <USBH_LL_GetSpeed+0x28>
 8008226:	2b02      	cmp	r3, #2
 8008228:	d006      	beq.n	8008238 <USBH_LL_GetSpeed+0x34>
 800822a:	e008      	b.n	800823e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800822c:	2300      	movs	r3, #0
 800822e:	73fb      	strb	r3, [r7, #15]
    break;
 8008230:	e008      	b.n	8008244 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008232:	2301      	movs	r3, #1
 8008234:	73fb      	strb	r3, [r7, #15]
    break;
 8008236:	e005      	b.n	8008244 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008238:	2302      	movs	r3, #2
 800823a:	73fb      	strb	r3, [r7, #15]
    break;
 800823c:	e002      	b.n	8008244 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800823e:	2301      	movs	r3, #1
 8008240:	73fb      	strb	r3, [r7, #15]
    break;
 8008242:	bf00      	nop
  }
  return  speed;
 8008244:	7bfb      	ldrb	r3, [r7, #15]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008264:	4618      	mov	r0, r3
 8008266:	f7f9 f8a7 	bl	80013b8 <HAL_HCD_ResetPort>
 800826a:	4603      	mov	r3, r0
 800826c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800826e:	7bfb      	ldrb	r3, [r7, #15]
 8008270:	4618      	mov	r0, r3
 8008272:	f000 f901 	bl	8008478 <USBH_Get_USB_Status>
 8008276:	4603      	mov	r3, r0
 8008278:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800827a:	7bbb      	ldrb	r3, [r7, #14]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	4611      	mov	r1, r2
 800829a:	4618      	mov	r0, r3
 800829c:	f7f9 f8af 	bl	80013fe <HAL_HCD_HC_GetXferCount>
 80082a0:	4603      	mov	r3, r0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80082aa:	b590      	push	{r4, r7, lr}
 80082ac:	b089      	sub	sp, #36	; 0x24
 80082ae:	af04      	add	r7, sp, #16
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	4608      	mov	r0, r1
 80082b4:	4611      	mov	r1, r2
 80082b6:	461a      	mov	r2, r3
 80082b8:	4603      	mov	r3, r0
 80082ba:	70fb      	strb	r3, [r7, #3]
 80082bc:	460b      	mov	r3, r1
 80082be:	70bb      	strb	r3, [r7, #2]
 80082c0:	4613      	mov	r3, r2
 80082c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80082d2:	787c      	ldrb	r4, [r7, #1]
 80082d4:	78ba      	ldrb	r2, [r7, #2]
 80082d6:	78f9      	ldrb	r1, [r7, #3]
 80082d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082da:	9302      	str	r3, [sp, #8]
 80082dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80082e0:	9301      	str	r3, [sp, #4]
 80082e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	4623      	mov	r3, r4
 80082ea:	f7f8 fcfc 	bl	8000ce6 <HAL_HCD_HC_Init>
 80082ee:	4603      	mov	r3, r0
 80082f0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 f8bf 	bl	8008478 <USBH_Get_USB_Status>
 80082fa:	4603      	mov	r3, r0
 80082fc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	bd90      	pop	{r4, r7, pc}

08008308 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008322:	78fa      	ldrb	r2, [r7, #3]
 8008324:	4611      	mov	r1, r2
 8008326:	4618      	mov	r0, r3
 8008328:	f7f8 fd75 	bl	8000e16 <HAL_HCD_HC_Halt>
 800832c:	4603      	mov	r3, r0
 800832e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	4618      	mov	r0, r3
 8008334:	f000 f8a0 	bl	8008478 <USBH_Get_USB_Status>
 8008338:	4603      	mov	r3, r0
 800833a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800833c:	7bbb      	ldrb	r3, [r7, #14]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008346:	b590      	push	{r4, r7, lr}
 8008348:	b089      	sub	sp, #36	; 0x24
 800834a:	af04      	add	r7, sp, #16
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	4608      	mov	r0, r1
 8008350:	4611      	mov	r1, r2
 8008352:	461a      	mov	r2, r3
 8008354:	4603      	mov	r3, r0
 8008356:	70fb      	strb	r3, [r7, #3]
 8008358:	460b      	mov	r3, r1
 800835a:	70bb      	strb	r3, [r7, #2]
 800835c:	4613      	mov	r3, r2
 800835e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008360:	2300      	movs	r3, #0
 8008362:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800836e:	787c      	ldrb	r4, [r7, #1]
 8008370:	78ba      	ldrb	r2, [r7, #2]
 8008372:	78f9      	ldrb	r1, [r7, #3]
 8008374:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008378:	9303      	str	r3, [sp, #12]
 800837a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800837c:	9302      	str	r3, [sp, #8]
 800837e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	4623      	mov	r3, r4
 800838a:	f7f8 fd67 	bl	8000e5c <HAL_HCD_HC_SubmitRequest>
 800838e:	4603      	mov	r3, r0
 8008390:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008392:	7bfb      	ldrb	r3, [r7, #15]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 f86f 	bl	8008478 <USBH_Get_USB_Status>
 800839a:	4603      	mov	r3, r0
 800839c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800839e:	7bbb      	ldrb	r3, [r7, #14]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd90      	pop	{r4, r7, pc}

080083a8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083ba:	78fa      	ldrb	r2, [r7, #3]
 80083bc:	4611      	mov	r1, r2
 80083be:	4618      	mov	r0, r3
 80083c0:	f7f9 f808 	bl	80013d4 <HAL_HCD_HC_GetURBState>
 80083c4:	4603      	mov	r3, r0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b082      	sub	sp, #8
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
 80083d6:	460b      	mov	r3, r1
 80083d8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d103      	bne.n	80083ec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80083e4:	78fb      	ldrb	r3, [r7, #3]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 f872 	bl	80084d0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80083ec:	20c8      	movs	r0, #200	; 0xc8
 80083ee:	f7f8 f931 	bl	8000654 <HAL_Delay>
  return USBH_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	70fb      	strb	r3, [r7, #3]
 8008408:	4613      	mov	r3, r2
 800840a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008412:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008414:	78fa      	ldrb	r2, [r7, #3]
 8008416:	68f9      	ldr	r1, [r7, #12]
 8008418:	4613      	mov	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	00db      	lsls	r3, r3, #3
 8008420:	440b      	add	r3, r1
 8008422:	333b      	adds	r3, #59	; 0x3b
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800842a:	78fa      	ldrb	r2, [r7, #3]
 800842c:	68f9      	ldr	r1, [r7, #12]
 800842e:	4613      	mov	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4413      	add	r3, r2
 8008434:	00db      	lsls	r3, r3, #3
 8008436:	440b      	add	r3, r1
 8008438:	3350      	adds	r3, #80	; 0x50
 800843a:	78ba      	ldrb	r2, [r7, #2]
 800843c:	701a      	strb	r2, [r3, #0]
 800843e:	e009      	b.n	8008454 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008440:	78fa      	ldrb	r2, [r7, #3]
 8008442:	68f9      	ldr	r1, [r7, #12]
 8008444:	4613      	mov	r3, r2
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	4413      	add	r3, r2
 800844a:	00db      	lsls	r3, r3, #3
 800844c:	440b      	add	r3, r1
 800844e:	3351      	adds	r3, #81	; 0x51
 8008450:	78ba      	ldrb	r2, [r7, #2]
 8008452:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b082      	sub	sp, #8
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7f8 f8f2 	bl	8000654 <HAL_Delay>
}
 8008470:	bf00      	nop
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	4603      	mov	r3, r0
 8008480:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008486:	79fb      	ldrb	r3, [r7, #7]
 8008488:	2b03      	cmp	r3, #3
 800848a:	d817      	bhi.n	80084bc <USBH_Get_USB_Status+0x44>
 800848c:	a201      	add	r2, pc, #4	; (adr r2, 8008494 <USBH_Get_USB_Status+0x1c>)
 800848e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008492:	bf00      	nop
 8008494:	080084a5 	.word	0x080084a5
 8008498:	080084ab 	.word	0x080084ab
 800849c:	080084b1 	.word	0x080084b1
 80084a0:	080084b7 	.word	0x080084b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]
    break;
 80084a8:	e00b      	b.n	80084c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80084aa:	2302      	movs	r3, #2
 80084ac:	73fb      	strb	r3, [r7, #15]
    break;
 80084ae:	e008      	b.n	80084c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80084b0:	2301      	movs	r3, #1
 80084b2:	73fb      	strb	r3, [r7, #15]
    break;
 80084b4:	e005      	b.n	80084c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80084b6:	2302      	movs	r3, #2
 80084b8:	73fb      	strb	r3, [r7, #15]
    break;
 80084ba:	e002      	b.n	80084c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80084bc:	2302      	movs	r3, #2
 80084be:	73fb      	strb	r3, [r7, #15]
    break;
 80084c0:	bf00      	nop
  }
  return usb_status;
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3714      	adds	r7, #20
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	4603      	mov	r3, r0
 80084d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80084da:	79fb      	ldrb	r3, [r7, #7]
 80084dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80084de:	79fb      	ldrb	r3, [r7, #7]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d102      	bne.n	80084ea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80084e4:	2301      	movs	r3, #1
 80084e6:	73fb      	strb	r3, [r7, #15]
 80084e8:	e001      	b.n	80084ee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80084ea:	2300      	movs	r3, #0
 80084ec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
 80084f0:	461a      	mov	r2, r3
 80084f2:	2101      	movs	r1, #1
 80084f4:	4803      	ldr	r0, [pc, #12]	; (8008504 <MX_DriverVbusFS+0x34>)
 80084f6:	f7f8 fb7b 	bl	8000bf0 <HAL_GPIO_WritePin>
}
 80084fa:	bf00      	nop
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	40020800 	.word	0x40020800

08008508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008508:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008540 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800850c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800850e:	e003      	b.n	8008518 <LoopCopyDataInit>

08008510 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008510:	4b0c      	ldr	r3, [pc, #48]	; (8008544 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008512:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008514:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008516:	3104      	adds	r1, #4

08008518 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008518:	480b      	ldr	r0, [pc, #44]	; (8008548 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800851a:	4b0c      	ldr	r3, [pc, #48]	; (800854c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800851c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800851e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008520:	d3f6      	bcc.n	8008510 <CopyDataInit>
  ldr  r2, =_sbss
 8008522:	4a0b      	ldr	r2, [pc, #44]	; (8008550 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008524:	e002      	b.n	800852c <LoopFillZerobss>

08008526 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008526:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008528:	f842 3b04 	str.w	r3, [r2], #4

0800852c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800852c:	4b09      	ldr	r3, [pc, #36]	; (8008554 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800852e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008530:	d3f9      	bcc.n	8008526 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008532:	f7ff fccb 	bl	8007ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008536:	f000 f817 	bl	8008568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800853a:	f7ff f80f 	bl	800755c <main>
  bx  lr    
 800853e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008540:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008544:	08008e74 	.word	0x08008e74
  ldr  r0, =_sdata
 8008548:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800854c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8008550:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8008554:	200008cc 	.word	0x200008cc

08008558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008558:	e7fe      	b.n	8008558 <ADC_IRQHandler>
	...

0800855c <__errno>:
 800855c:	4b01      	ldr	r3, [pc, #4]	; (8008564 <__errno+0x8>)
 800855e:	6818      	ldr	r0, [r3, #0]
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	2000002c 	.word	0x2000002c

08008568 <__libc_init_array>:
 8008568:	b570      	push	{r4, r5, r6, lr}
 800856a:	4e0d      	ldr	r6, [pc, #52]	; (80085a0 <__libc_init_array+0x38>)
 800856c:	4c0d      	ldr	r4, [pc, #52]	; (80085a4 <__libc_init_array+0x3c>)
 800856e:	1ba4      	subs	r4, r4, r6
 8008570:	10a4      	asrs	r4, r4, #2
 8008572:	2500      	movs	r5, #0
 8008574:	42a5      	cmp	r5, r4
 8008576:	d109      	bne.n	800858c <__libc_init_array+0x24>
 8008578:	4e0b      	ldr	r6, [pc, #44]	; (80085a8 <__libc_init_array+0x40>)
 800857a:	4c0c      	ldr	r4, [pc, #48]	; (80085ac <__libc_init_array+0x44>)
 800857c:	f000 fc36 	bl	8008dec <_init>
 8008580:	1ba4      	subs	r4, r4, r6
 8008582:	10a4      	asrs	r4, r4, #2
 8008584:	2500      	movs	r5, #0
 8008586:	42a5      	cmp	r5, r4
 8008588:	d105      	bne.n	8008596 <__libc_init_array+0x2e>
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008590:	4798      	blx	r3
 8008592:	3501      	adds	r5, #1
 8008594:	e7ee      	b.n	8008574 <__libc_init_array+0xc>
 8008596:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800859a:	4798      	blx	r3
 800859c:	3501      	adds	r5, #1
 800859e:	e7f2      	b.n	8008586 <__libc_init_array+0x1e>
 80085a0:	08008e6c 	.word	0x08008e6c
 80085a4:	08008e6c 	.word	0x08008e6c
 80085a8:	08008e6c 	.word	0x08008e6c
 80085ac:	08008e70 	.word	0x08008e70

080085b0 <malloc>:
 80085b0:	4b02      	ldr	r3, [pc, #8]	; (80085bc <malloc+0xc>)
 80085b2:	4601      	mov	r1, r0
 80085b4:	6818      	ldr	r0, [r3, #0]
 80085b6:	f000 b861 	b.w	800867c <_malloc_r>
 80085ba:	bf00      	nop
 80085bc:	2000002c 	.word	0x2000002c

080085c0 <free>:
 80085c0:	4b02      	ldr	r3, [pc, #8]	; (80085cc <free+0xc>)
 80085c2:	4601      	mov	r1, r0
 80085c4:	6818      	ldr	r0, [r3, #0]
 80085c6:	f000 b80b 	b.w	80085e0 <_free_r>
 80085ca:	bf00      	nop
 80085cc:	2000002c 	.word	0x2000002c

080085d0 <memset>:
 80085d0:	4402      	add	r2, r0
 80085d2:	4603      	mov	r3, r0
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d100      	bne.n	80085da <memset+0xa>
 80085d8:	4770      	bx	lr
 80085da:	f803 1b01 	strb.w	r1, [r3], #1
 80085de:	e7f9      	b.n	80085d4 <memset+0x4>

080085e0 <_free_r>:
 80085e0:	b538      	push	{r3, r4, r5, lr}
 80085e2:	4605      	mov	r5, r0
 80085e4:	2900      	cmp	r1, #0
 80085e6:	d045      	beq.n	8008674 <_free_r+0x94>
 80085e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085ec:	1f0c      	subs	r4, r1, #4
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	bfb8      	it	lt
 80085f2:	18e4      	addlt	r4, r4, r3
 80085f4:	f000 f8cc 	bl	8008790 <__malloc_lock>
 80085f8:	4a1f      	ldr	r2, [pc, #124]	; (8008678 <_free_r+0x98>)
 80085fa:	6813      	ldr	r3, [r2, #0]
 80085fc:	4610      	mov	r0, r2
 80085fe:	b933      	cbnz	r3, 800860e <_free_r+0x2e>
 8008600:	6063      	str	r3, [r4, #4]
 8008602:	6014      	str	r4, [r2, #0]
 8008604:	4628      	mov	r0, r5
 8008606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800860a:	f000 b8c2 	b.w	8008792 <__malloc_unlock>
 800860e:	42a3      	cmp	r3, r4
 8008610:	d90c      	bls.n	800862c <_free_r+0x4c>
 8008612:	6821      	ldr	r1, [r4, #0]
 8008614:	1862      	adds	r2, r4, r1
 8008616:	4293      	cmp	r3, r2
 8008618:	bf04      	itt	eq
 800861a:	681a      	ldreq	r2, [r3, #0]
 800861c:	685b      	ldreq	r3, [r3, #4]
 800861e:	6063      	str	r3, [r4, #4]
 8008620:	bf04      	itt	eq
 8008622:	1852      	addeq	r2, r2, r1
 8008624:	6022      	streq	r2, [r4, #0]
 8008626:	6004      	str	r4, [r0, #0]
 8008628:	e7ec      	b.n	8008604 <_free_r+0x24>
 800862a:	4613      	mov	r3, r2
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	b10a      	cbz	r2, 8008634 <_free_r+0x54>
 8008630:	42a2      	cmp	r2, r4
 8008632:	d9fa      	bls.n	800862a <_free_r+0x4a>
 8008634:	6819      	ldr	r1, [r3, #0]
 8008636:	1858      	adds	r0, r3, r1
 8008638:	42a0      	cmp	r0, r4
 800863a:	d10b      	bne.n	8008654 <_free_r+0x74>
 800863c:	6820      	ldr	r0, [r4, #0]
 800863e:	4401      	add	r1, r0
 8008640:	1858      	adds	r0, r3, r1
 8008642:	4282      	cmp	r2, r0
 8008644:	6019      	str	r1, [r3, #0]
 8008646:	d1dd      	bne.n	8008604 <_free_r+0x24>
 8008648:	6810      	ldr	r0, [r2, #0]
 800864a:	6852      	ldr	r2, [r2, #4]
 800864c:	605a      	str	r2, [r3, #4]
 800864e:	4401      	add	r1, r0
 8008650:	6019      	str	r1, [r3, #0]
 8008652:	e7d7      	b.n	8008604 <_free_r+0x24>
 8008654:	d902      	bls.n	800865c <_free_r+0x7c>
 8008656:	230c      	movs	r3, #12
 8008658:	602b      	str	r3, [r5, #0]
 800865a:	e7d3      	b.n	8008604 <_free_r+0x24>
 800865c:	6820      	ldr	r0, [r4, #0]
 800865e:	1821      	adds	r1, r4, r0
 8008660:	428a      	cmp	r2, r1
 8008662:	bf04      	itt	eq
 8008664:	6811      	ldreq	r1, [r2, #0]
 8008666:	6852      	ldreq	r2, [r2, #4]
 8008668:	6062      	str	r2, [r4, #4]
 800866a:	bf04      	itt	eq
 800866c:	1809      	addeq	r1, r1, r0
 800866e:	6021      	streq	r1, [r4, #0]
 8008670:	605c      	str	r4, [r3, #4]
 8008672:	e7c7      	b.n	8008604 <_free_r+0x24>
 8008674:	bd38      	pop	{r3, r4, r5, pc}
 8008676:	bf00      	nop
 8008678:	200000b8 	.word	0x200000b8

0800867c <_malloc_r>:
 800867c:	b570      	push	{r4, r5, r6, lr}
 800867e:	1ccd      	adds	r5, r1, #3
 8008680:	f025 0503 	bic.w	r5, r5, #3
 8008684:	3508      	adds	r5, #8
 8008686:	2d0c      	cmp	r5, #12
 8008688:	bf38      	it	cc
 800868a:	250c      	movcc	r5, #12
 800868c:	2d00      	cmp	r5, #0
 800868e:	4606      	mov	r6, r0
 8008690:	db01      	blt.n	8008696 <_malloc_r+0x1a>
 8008692:	42a9      	cmp	r1, r5
 8008694:	d903      	bls.n	800869e <_malloc_r+0x22>
 8008696:	230c      	movs	r3, #12
 8008698:	6033      	str	r3, [r6, #0]
 800869a:	2000      	movs	r0, #0
 800869c:	bd70      	pop	{r4, r5, r6, pc}
 800869e:	f000 f877 	bl	8008790 <__malloc_lock>
 80086a2:	4a21      	ldr	r2, [pc, #132]	; (8008728 <_malloc_r+0xac>)
 80086a4:	6814      	ldr	r4, [r2, #0]
 80086a6:	4621      	mov	r1, r4
 80086a8:	b991      	cbnz	r1, 80086d0 <_malloc_r+0x54>
 80086aa:	4c20      	ldr	r4, [pc, #128]	; (800872c <_malloc_r+0xb0>)
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	b91b      	cbnz	r3, 80086b8 <_malloc_r+0x3c>
 80086b0:	4630      	mov	r0, r6
 80086b2:	f000 f83d 	bl	8008730 <_sbrk_r>
 80086b6:	6020      	str	r0, [r4, #0]
 80086b8:	4629      	mov	r1, r5
 80086ba:	4630      	mov	r0, r6
 80086bc:	f000 f838 	bl	8008730 <_sbrk_r>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d124      	bne.n	800870e <_malloc_r+0x92>
 80086c4:	230c      	movs	r3, #12
 80086c6:	6033      	str	r3, [r6, #0]
 80086c8:	4630      	mov	r0, r6
 80086ca:	f000 f862 	bl	8008792 <__malloc_unlock>
 80086ce:	e7e4      	b.n	800869a <_malloc_r+0x1e>
 80086d0:	680b      	ldr	r3, [r1, #0]
 80086d2:	1b5b      	subs	r3, r3, r5
 80086d4:	d418      	bmi.n	8008708 <_malloc_r+0x8c>
 80086d6:	2b0b      	cmp	r3, #11
 80086d8:	d90f      	bls.n	80086fa <_malloc_r+0x7e>
 80086da:	600b      	str	r3, [r1, #0]
 80086dc:	50cd      	str	r5, [r1, r3]
 80086de:	18cc      	adds	r4, r1, r3
 80086e0:	4630      	mov	r0, r6
 80086e2:	f000 f856 	bl	8008792 <__malloc_unlock>
 80086e6:	f104 000b 	add.w	r0, r4, #11
 80086ea:	1d23      	adds	r3, r4, #4
 80086ec:	f020 0007 	bic.w	r0, r0, #7
 80086f0:	1ac3      	subs	r3, r0, r3
 80086f2:	d0d3      	beq.n	800869c <_malloc_r+0x20>
 80086f4:	425a      	negs	r2, r3
 80086f6:	50e2      	str	r2, [r4, r3]
 80086f8:	e7d0      	b.n	800869c <_malloc_r+0x20>
 80086fa:	428c      	cmp	r4, r1
 80086fc:	684b      	ldr	r3, [r1, #4]
 80086fe:	bf16      	itet	ne
 8008700:	6063      	strne	r3, [r4, #4]
 8008702:	6013      	streq	r3, [r2, #0]
 8008704:	460c      	movne	r4, r1
 8008706:	e7eb      	b.n	80086e0 <_malloc_r+0x64>
 8008708:	460c      	mov	r4, r1
 800870a:	6849      	ldr	r1, [r1, #4]
 800870c:	e7cc      	b.n	80086a8 <_malloc_r+0x2c>
 800870e:	1cc4      	adds	r4, r0, #3
 8008710:	f024 0403 	bic.w	r4, r4, #3
 8008714:	42a0      	cmp	r0, r4
 8008716:	d005      	beq.n	8008724 <_malloc_r+0xa8>
 8008718:	1a21      	subs	r1, r4, r0
 800871a:	4630      	mov	r0, r6
 800871c:	f000 f808 	bl	8008730 <_sbrk_r>
 8008720:	3001      	adds	r0, #1
 8008722:	d0cf      	beq.n	80086c4 <_malloc_r+0x48>
 8008724:	6025      	str	r5, [r4, #0]
 8008726:	e7db      	b.n	80086e0 <_malloc_r+0x64>
 8008728:	200000b8 	.word	0x200000b8
 800872c:	200000bc 	.word	0x200000bc

08008730 <_sbrk_r>:
 8008730:	b538      	push	{r3, r4, r5, lr}
 8008732:	4c06      	ldr	r4, [pc, #24]	; (800874c <_sbrk_r+0x1c>)
 8008734:	2300      	movs	r3, #0
 8008736:	4605      	mov	r5, r0
 8008738:	4608      	mov	r0, r1
 800873a:	6023      	str	r3, [r4, #0]
 800873c:	f7ff fb9a 	bl	8007e74 <_sbrk>
 8008740:	1c43      	adds	r3, r0, #1
 8008742:	d102      	bne.n	800874a <_sbrk_r+0x1a>
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	b103      	cbz	r3, 800874a <_sbrk_r+0x1a>
 8008748:	602b      	str	r3, [r5, #0]
 800874a:	bd38      	pop	{r3, r4, r5, pc}
 800874c:	200008c8 	.word	0x200008c8

08008750 <siprintf>:
 8008750:	b40e      	push	{r1, r2, r3}
 8008752:	b500      	push	{lr}
 8008754:	b09c      	sub	sp, #112	; 0x70
 8008756:	ab1d      	add	r3, sp, #116	; 0x74
 8008758:	9002      	str	r0, [sp, #8]
 800875a:	9006      	str	r0, [sp, #24]
 800875c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008760:	4809      	ldr	r0, [pc, #36]	; (8008788 <siprintf+0x38>)
 8008762:	9107      	str	r1, [sp, #28]
 8008764:	9104      	str	r1, [sp, #16]
 8008766:	4909      	ldr	r1, [pc, #36]	; (800878c <siprintf+0x3c>)
 8008768:	f853 2b04 	ldr.w	r2, [r3], #4
 800876c:	9105      	str	r1, [sp, #20]
 800876e:	6800      	ldr	r0, [r0, #0]
 8008770:	9301      	str	r3, [sp, #4]
 8008772:	a902      	add	r1, sp, #8
 8008774:	f000 f868 	bl	8008848 <_svfiprintf_r>
 8008778:	9b02      	ldr	r3, [sp, #8]
 800877a:	2200      	movs	r2, #0
 800877c:	701a      	strb	r2, [r3, #0]
 800877e:	b01c      	add	sp, #112	; 0x70
 8008780:	f85d eb04 	ldr.w	lr, [sp], #4
 8008784:	b003      	add	sp, #12
 8008786:	4770      	bx	lr
 8008788:	2000002c 	.word	0x2000002c
 800878c:	ffff0208 	.word	0xffff0208

08008790 <__malloc_lock>:
 8008790:	4770      	bx	lr

08008792 <__malloc_unlock>:
 8008792:	4770      	bx	lr

08008794 <__ssputs_r>:
 8008794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008798:	688e      	ldr	r6, [r1, #8]
 800879a:	429e      	cmp	r6, r3
 800879c:	4682      	mov	sl, r0
 800879e:	460c      	mov	r4, r1
 80087a0:	4690      	mov	r8, r2
 80087a2:	4699      	mov	r9, r3
 80087a4:	d837      	bhi.n	8008816 <__ssputs_r+0x82>
 80087a6:	898a      	ldrh	r2, [r1, #12]
 80087a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80087ac:	d031      	beq.n	8008812 <__ssputs_r+0x7e>
 80087ae:	6825      	ldr	r5, [r4, #0]
 80087b0:	6909      	ldr	r1, [r1, #16]
 80087b2:	1a6f      	subs	r7, r5, r1
 80087b4:	6965      	ldr	r5, [r4, #20]
 80087b6:	2302      	movs	r3, #2
 80087b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80087bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80087c0:	f109 0301 	add.w	r3, r9, #1
 80087c4:	443b      	add	r3, r7
 80087c6:	429d      	cmp	r5, r3
 80087c8:	bf38      	it	cc
 80087ca:	461d      	movcc	r5, r3
 80087cc:	0553      	lsls	r3, r2, #21
 80087ce:	d530      	bpl.n	8008832 <__ssputs_r+0x9e>
 80087d0:	4629      	mov	r1, r5
 80087d2:	f7ff ff53 	bl	800867c <_malloc_r>
 80087d6:	4606      	mov	r6, r0
 80087d8:	b950      	cbnz	r0, 80087f0 <__ssputs_r+0x5c>
 80087da:	230c      	movs	r3, #12
 80087dc:	f8ca 3000 	str.w	r3, [sl]
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087e6:	81a3      	strh	r3, [r4, #12]
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f0:	463a      	mov	r2, r7
 80087f2:	6921      	ldr	r1, [r4, #16]
 80087f4:	f000 faa8 	bl	8008d48 <memcpy>
 80087f8:	89a3      	ldrh	r3, [r4, #12]
 80087fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80087fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008802:	81a3      	strh	r3, [r4, #12]
 8008804:	6126      	str	r6, [r4, #16]
 8008806:	6165      	str	r5, [r4, #20]
 8008808:	443e      	add	r6, r7
 800880a:	1bed      	subs	r5, r5, r7
 800880c:	6026      	str	r6, [r4, #0]
 800880e:	60a5      	str	r5, [r4, #8]
 8008810:	464e      	mov	r6, r9
 8008812:	454e      	cmp	r6, r9
 8008814:	d900      	bls.n	8008818 <__ssputs_r+0x84>
 8008816:	464e      	mov	r6, r9
 8008818:	4632      	mov	r2, r6
 800881a:	4641      	mov	r1, r8
 800881c:	6820      	ldr	r0, [r4, #0]
 800881e:	f000 fa9e 	bl	8008d5e <memmove>
 8008822:	68a3      	ldr	r3, [r4, #8]
 8008824:	1b9b      	subs	r3, r3, r6
 8008826:	60a3      	str	r3, [r4, #8]
 8008828:	6823      	ldr	r3, [r4, #0]
 800882a:	441e      	add	r6, r3
 800882c:	6026      	str	r6, [r4, #0]
 800882e:	2000      	movs	r0, #0
 8008830:	e7dc      	b.n	80087ec <__ssputs_r+0x58>
 8008832:	462a      	mov	r2, r5
 8008834:	f000 faac 	bl	8008d90 <_realloc_r>
 8008838:	4606      	mov	r6, r0
 800883a:	2800      	cmp	r0, #0
 800883c:	d1e2      	bne.n	8008804 <__ssputs_r+0x70>
 800883e:	6921      	ldr	r1, [r4, #16]
 8008840:	4650      	mov	r0, sl
 8008842:	f7ff fecd 	bl	80085e0 <_free_r>
 8008846:	e7c8      	b.n	80087da <__ssputs_r+0x46>

08008848 <_svfiprintf_r>:
 8008848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884c:	461d      	mov	r5, r3
 800884e:	898b      	ldrh	r3, [r1, #12]
 8008850:	061f      	lsls	r7, r3, #24
 8008852:	b09d      	sub	sp, #116	; 0x74
 8008854:	4680      	mov	r8, r0
 8008856:	460c      	mov	r4, r1
 8008858:	4616      	mov	r6, r2
 800885a:	d50f      	bpl.n	800887c <_svfiprintf_r+0x34>
 800885c:	690b      	ldr	r3, [r1, #16]
 800885e:	b96b      	cbnz	r3, 800887c <_svfiprintf_r+0x34>
 8008860:	2140      	movs	r1, #64	; 0x40
 8008862:	f7ff ff0b 	bl	800867c <_malloc_r>
 8008866:	6020      	str	r0, [r4, #0]
 8008868:	6120      	str	r0, [r4, #16]
 800886a:	b928      	cbnz	r0, 8008878 <_svfiprintf_r+0x30>
 800886c:	230c      	movs	r3, #12
 800886e:	f8c8 3000 	str.w	r3, [r8]
 8008872:	f04f 30ff 	mov.w	r0, #4294967295
 8008876:	e0c8      	b.n	8008a0a <_svfiprintf_r+0x1c2>
 8008878:	2340      	movs	r3, #64	; 0x40
 800887a:	6163      	str	r3, [r4, #20]
 800887c:	2300      	movs	r3, #0
 800887e:	9309      	str	r3, [sp, #36]	; 0x24
 8008880:	2320      	movs	r3, #32
 8008882:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008886:	2330      	movs	r3, #48	; 0x30
 8008888:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800888c:	9503      	str	r5, [sp, #12]
 800888e:	f04f 0b01 	mov.w	fp, #1
 8008892:	4637      	mov	r7, r6
 8008894:	463d      	mov	r5, r7
 8008896:	f815 3b01 	ldrb.w	r3, [r5], #1
 800889a:	b10b      	cbz	r3, 80088a0 <_svfiprintf_r+0x58>
 800889c:	2b25      	cmp	r3, #37	; 0x25
 800889e:	d13e      	bne.n	800891e <_svfiprintf_r+0xd6>
 80088a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80088a4:	d00b      	beq.n	80088be <_svfiprintf_r+0x76>
 80088a6:	4653      	mov	r3, sl
 80088a8:	4632      	mov	r2, r6
 80088aa:	4621      	mov	r1, r4
 80088ac:	4640      	mov	r0, r8
 80088ae:	f7ff ff71 	bl	8008794 <__ssputs_r>
 80088b2:	3001      	adds	r0, #1
 80088b4:	f000 80a4 	beq.w	8008a00 <_svfiprintf_r+0x1b8>
 80088b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ba:	4453      	add	r3, sl
 80088bc:	9309      	str	r3, [sp, #36]	; 0x24
 80088be:	783b      	ldrb	r3, [r7, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	f000 809d 	beq.w	8008a00 <_svfiprintf_r+0x1b8>
 80088c6:	2300      	movs	r3, #0
 80088c8:	f04f 32ff 	mov.w	r2, #4294967295
 80088cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088d0:	9304      	str	r3, [sp, #16]
 80088d2:	9307      	str	r3, [sp, #28]
 80088d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088d8:	931a      	str	r3, [sp, #104]	; 0x68
 80088da:	462f      	mov	r7, r5
 80088dc:	2205      	movs	r2, #5
 80088de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80088e2:	4850      	ldr	r0, [pc, #320]	; (8008a24 <_svfiprintf_r+0x1dc>)
 80088e4:	f7f7 fc74 	bl	80001d0 <memchr>
 80088e8:	9b04      	ldr	r3, [sp, #16]
 80088ea:	b9d0      	cbnz	r0, 8008922 <_svfiprintf_r+0xda>
 80088ec:	06d9      	lsls	r1, r3, #27
 80088ee:	bf44      	itt	mi
 80088f0:	2220      	movmi	r2, #32
 80088f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80088f6:	071a      	lsls	r2, r3, #28
 80088f8:	bf44      	itt	mi
 80088fa:	222b      	movmi	r2, #43	; 0x2b
 80088fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008900:	782a      	ldrb	r2, [r5, #0]
 8008902:	2a2a      	cmp	r2, #42	; 0x2a
 8008904:	d015      	beq.n	8008932 <_svfiprintf_r+0xea>
 8008906:	9a07      	ldr	r2, [sp, #28]
 8008908:	462f      	mov	r7, r5
 800890a:	2000      	movs	r0, #0
 800890c:	250a      	movs	r5, #10
 800890e:	4639      	mov	r1, r7
 8008910:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008914:	3b30      	subs	r3, #48	; 0x30
 8008916:	2b09      	cmp	r3, #9
 8008918:	d94d      	bls.n	80089b6 <_svfiprintf_r+0x16e>
 800891a:	b1b8      	cbz	r0, 800894c <_svfiprintf_r+0x104>
 800891c:	e00f      	b.n	800893e <_svfiprintf_r+0xf6>
 800891e:	462f      	mov	r7, r5
 8008920:	e7b8      	b.n	8008894 <_svfiprintf_r+0x4c>
 8008922:	4a40      	ldr	r2, [pc, #256]	; (8008a24 <_svfiprintf_r+0x1dc>)
 8008924:	1a80      	subs	r0, r0, r2
 8008926:	fa0b f000 	lsl.w	r0, fp, r0
 800892a:	4318      	orrs	r0, r3
 800892c:	9004      	str	r0, [sp, #16]
 800892e:	463d      	mov	r5, r7
 8008930:	e7d3      	b.n	80088da <_svfiprintf_r+0x92>
 8008932:	9a03      	ldr	r2, [sp, #12]
 8008934:	1d11      	adds	r1, r2, #4
 8008936:	6812      	ldr	r2, [r2, #0]
 8008938:	9103      	str	r1, [sp, #12]
 800893a:	2a00      	cmp	r2, #0
 800893c:	db01      	blt.n	8008942 <_svfiprintf_r+0xfa>
 800893e:	9207      	str	r2, [sp, #28]
 8008940:	e004      	b.n	800894c <_svfiprintf_r+0x104>
 8008942:	4252      	negs	r2, r2
 8008944:	f043 0302 	orr.w	r3, r3, #2
 8008948:	9207      	str	r2, [sp, #28]
 800894a:	9304      	str	r3, [sp, #16]
 800894c:	783b      	ldrb	r3, [r7, #0]
 800894e:	2b2e      	cmp	r3, #46	; 0x2e
 8008950:	d10c      	bne.n	800896c <_svfiprintf_r+0x124>
 8008952:	787b      	ldrb	r3, [r7, #1]
 8008954:	2b2a      	cmp	r3, #42	; 0x2a
 8008956:	d133      	bne.n	80089c0 <_svfiprintf_r+0x178>
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	1d1a      	adds	r2, r3, #4
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	9203      	str	r2, [sp, #12]
 8008960:	2b00      	cmp	r3, #0
 8008962:	bfb8      	it	lt
 8008964:	f04f 33ff 	movlt.w	r3, #4294967295
 8008968:	3702      	adds	r7, #2
 800896a:	9305      	str	r3, [sp, #20]
 800896c:	4d2e      	ldr	r5, [pc, #184]	; (8008a28 <_svfiprintf_r+0x1e0>)
 800896e:	7839      	ldrb	r1, [r7, #0]
 8008970:	2203      	movs	r2, #3
 8008972:	4628      	mov	r0, r5
 8008974:	f7f7 fc2c 	bl	80001d0 <memchr>
 8008978:	b138      	cbz	r0, 800898a <_svfiprintf_r+0x142>
 800897a:	2340      	movs	r3, #64	; 0x40
 800897c:	1b40      	subs	r0, r0, r5
 800897e:	fa03 f000 	lsl.w	r0, r3, r0
 8008982:	9b04      	ldr	r3, [sp, #16]
 8008984:	4303      	orrs	r3, r0
 8008986:	3701      	adds	r7, #1
 8008988:	9304      	str	r3, [sp, #16]
 800898a:	7839      	ldrb	r1, [r7, #0]
 800898c:	4827      	ldr	r0, [pc, #156]	; (8008a2c <_svfiprintf_r+0x1e4>)
 800898e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008992:	2206      	movs	r2, #6
 8008994:	1c7e      	adds	r6, r7, #1
 8008996:	f7f7 fc1b 	bl	80001d0 <memchr>
 800899a:	2800      	cmp	r0, #0
 800899c:	d038      	beq.n	8008a10 <_svfiprintf_r+0x1c8>
 800899e:	4b24      	ldr	r3, [pc, #144]	; (8008a30 <_svfiprintf_r+0x1e8>)
 80089a0:	bb13      	cbnz	r3, 80089e8 <_svfiprintf_r+0x1a0>
 80089a2:	9b03      	ldr	r3, [sp, #12]
 80089a4:	3307      	adds	r3, #7
 80089a6:	f023 0307 	bic.w	r3, r3, #7
 80089aa:	3308      	adds	r3, #8
 80089ac:	9303      	str	r3, [sp, #12]
 80089ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089b0:	444b      	add	r3, r9
 80089b2:	9309      	str	r3, [sp, #36]	; 0x24
 80089b4:	e76d      	b.n	8008892 <_svfiprintf_r+0x4a>
 80089b6:	fb05 3202 	mla	r2, r5, r2, r3
 80089ba:	2001      	movs	r0, #1
 80089bc:	460f      	mov	r7, r1
 80089be:	e7a6      	b.n	800890e <_svfiprintf_r+0xc6>
 80089c0:	2300      	movs	r3, #0
 80089c2:	3701      	adds	r7, #1
 80089c4:	9305      	str	r3, [sp, #20]
 80089c6:	4619      	mov	r1, r3
 80089c8:	250a      	movs	r5, #10
 80089ca:	4638      	mov	r0, r7
 80089cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089d0:	3a30      	subs	r2, #48	; 0x30
 80089d2:	2a09      	cmp	r2, #9
 80089d4:	d903      	bls.n	80089de <_svfiprintf_r+0x196>
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d0c8      	beq.n	800896c <_svfiprintf_r+0x124>
 80089da:	9105      	str	r1, [sp, #20]
 80089dc:	e7c6      	b.n	800896c <_svfiprintf_r+0x124>
 80089de:	fb05 2101 	mla	r1, r5, r1, r2
 80089e2:	2301      	movs	r3, #1
 80089e4:	4607      	mov	r7, r0
 80089e6:	e7f0      	b.n	80089ca <_svfiprintf_r+0x182>
 80089e8:	ab03      	add	r3, sp, #12
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	4622      	mov	r2, r4
 80089ee:	4b11      	ldr	r3, [pc, #68]	; (8008a34 <_svfiprintf_r+0x1ec>)
 80089f0:	a904      	add	r1, sp, #16
 80089f2:	4640      	mov	r0, r8
 80089f4:	f3af 8000 	nop.w
 80089f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80089fc:	4681      	mov	r9, r0
 80089fe:	d1d6      	bne.n	80089ae <_svfiprintf_r+0x166>
 8008a00:	89a3      	ldrh	r3, [r4, #12]
 8008a02:	065b      	lsls	r3, r3, #25
 8008a04:	f53f af35 	bmi.w	8008872 <_svfiprintf_r+0x2a>
 8008a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a0a:	b01d      	add	sp, #116	; 0x74
 8008a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a10:	ab03      	add	r3, sp, #12
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	4622      	mov	r2, r4
 8008a16:	4b07      	ldr	r3, [pc, #28]	; (8008a34 <_svfiprintf_r+0x1ec>)
 8008a18:	a904      	add	r1, sp, #16
 8008a1a:	4640      	mov	r0, r8
 8008a1c:	f000 f882 	bl	8008b24 <_printf_i>
 8008a20:	e7ea      	b.n	80089f8 <_svfiprintf_r+0x1b0>
 8008a22:	bf00      	nop
 8008a24:	08008e30 	.word	0x08008e30
 8008a28:	08008e36 	.word	0x08008e36
 8008a2c:	08008e3a 	.word	0x08008e3a
 8008a30:	00000000 	.word	0x00000000
 8008a34:	08008795 	.word	0x08008795

08008a38 <_printf_common>:
 8008a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a3c:	4691      	mov	r9, r2
 8008a3e:	461f      	mov	r7, r3
 8008a40:	688a      	ldr	r2, [r1, #8]
 8008a42:	690b      	ldr	r3, [r1, #16]
 8008a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	bfb8      	it	lt
 8008a4c:	4613      	movlt	r3, r2
 8008a4e:	f8c9 3000 	str.w	r3, [r9]
 8008a52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a56:	4606      	mov	r6, r0
 8008a58:	460c      	mov	r4, r1
 8008a5a:	b112      	cbz	r2, 8008a62 <_printf_common+0x2a>
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	f8c9 3000 	str.w	r3, [r9]
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	0699      	lsls	r1, r3, #26
 8008a66:	bf42      	ittt	mi
 8008a68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008a6c:	3302      	addmi	r3, #2
 8008a6e:	f8c9 3000 	strmi.w	r3, [r9]
 8008a72:	6825      	ldr	r5, [r4, #0]
 8008a74:	f015 0506 	ands.w	r5, r5, #6
 8008a78:	d107      	bne.n	8008a8a <_printf_common+0x52>
 8008a7a:	f104 0a19 	add.w	sl, r4, #25
 8008a7e:	68e3      	ldr	r3, [r4, #12]
 8008a80:	f8d9 2000 	ldr.w	r2, [r9]
 8008a84:	1a9b      	subs	r3, r3, r2
 8008a86:	42ab      	cmp	r3, r5
 8008a88:	dc28      	bgt.n	8008adc <_printf_common+0xa4>
 8008a8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008a8e:	6822      	ldr	r2, [r4, #0]
 8008a90:	3300      	adds	r3, #0
 8008a92:	bf18      	it	ne
 8008a94:	2301      	movne	r3, #1
 8008a96:	0692      	lsls	r2, r2, #26
 8008a98:	d42d      	bmi.n	8008af6 <_printf_common+0xbe>
 8008a9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a9e:	4639      	mov	r1, r7
 8008aa0:	4630      	mov	r0, r6
 8008aa2:	47c0      	blx	r8
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d020      	beq.n	8008aea <_printf_common+0xb2>
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	68e5      	ldr	r5, [r4, #12]
 8008aac:	f8d9 2000 	ldr.w	r2, [r9]
 8008ab0:	f003 0306 	and.w	r3, r3, #6
 8008ab4:	2b04      	cmp	r3, #4
 8008ab6:	bf08      	it	eq
 8008ab8:	1aad      	subeq	r5, r5, r2
 8008aba:	68a3      	ldr	r3, [r4, #8]
 8008abc:	6922      	ldr	r2, [r4, #16]
 8008abe:	bf0c      	ite	eq
 8008ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ac4:	2500      	movne	r5, #0
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	bfc4      	itt	gt
 8008aca:	1a9b      	subgt	r3, r3, r2
 8008acc:	18ed      	addgt	r5, r5, r3
 8008ace:	f04f 0900 	mov.w	r9, #0
 8008ad2:	341a      	adds	r4, #26
 8008ad4:	454d      	cmp	r5, r9
 8008ad6:	d11a      	bne.n	8008b0e <_printf_common+0xd6>
 8008ad8:	2000      	movs	r0, #0
 8008ada:	e008      	b.n	8008aee <_printf_common+0xb6>
 8008adc:	2301      	movs	r3, #1
 8008ade:	4652      	mov	r2, sl
 8008ae0:	4639      	mov	r1, r7
 8008ae2:	4630      	mov	r0, r6
 8008ae4:	47c0      	blx	r8
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	d103      	bne.n	8008af2 <_printf_common+0xba>
 8008aea:	f04f 30ff 	mov.w	r0, #4294967295
 8008aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008af2:	3501      	adds	r5, #1
 8008af4:	e7c3      	b.n	8008a7e <_printf_common+0x46>
 8008af6:	18e1      	adds	r1, r4, r3
 8008af8:	1c5a      	adds	r2, r3, #1
 8008afa:	2030      	movs	r0, #48	; 0x30
 8008afc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b00:	4422      	add	r2, r4
 8008b02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b0a:	3302      	adds	r3, #2
 8008b0c:	e7c5      	b.n	8008a9a <_printf_common+0x62>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	4622      	mov	r2, r4
 8008b12:	4639      	mov	r1, r7
 8008b14:	4630      	mov	r0, r6
 8008b16:	47c0      	blx	r8
 8008b18:	3001      	adds	r0, #1
 8008b1a:	d0e6      	beq.n	8008aea <_printf_common+0xb2>
 8008b1c:	f109 0901 	add.w	r9, r9, #1
 8008b20:	e7d8      	b.n	8008ad4 <_printf_common+0x9c>
	...

08008b24 <_printf_i>:
 8008b24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	7e09      	ldrb	r1, [r1, #24]
 8008b30:	b085      	sub	sp, #20
 8008b32:	296e      	cmp	r1, #110	; 0x6e
 8008b34:	4617      	mov	r7, r2
 8008b36:	4606      	mov	r6, r0
 8008b38:	4698      	mov	r8, r3
 8008b3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008b3c:	f000 80b3 	beq.w	8008ca6 <_printf_i+0x182>
 8008b40:	d822      	bhi.n	8008b88 <_printf_i+0x64>
 8008b42:	2963      	cmp	r1, #99	; 0x63
 8008b44:	d036      	beq.n	8008bb4 <_printf_i+0x90>
 8008b46:	d80a      	bhi.n	8008b5e <_printf_i+0x3a>
 8008b48:	2900      	cmp	r1, #0
 8008b4a:	f000 80b9 	beq.w	8008cc0 <_printf_i+0x19c>
 8008b4e:	2958      	cmp	r1, #88	; 0x58
 8008b50:	f000 8083 	beq.w	8008c5a <_printf_i+0x136>
 8008b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008b5c:	e032      	b.n	8008bc4 <_printf_i+0xa0>
 8008b5e:	2964      	cmp	r1, #100	; 0x64
 8008b60:	d001      	beq.n	8008b66 <_printf_i+0x42>
 8008b62:	2969      	cmp	r1, #105	; 0x69
 8008b64:	d1f6      	bne.n	8008b54 <_printf_i+0x30>
 8008b66:	6820      	ldr	r0, [r4, #0]
 8008b68:	6813      	ldr	r3, [r2, #0]
 8008b6a:	0605      	lsls	r5, r0, #24
 8008b6c:	f103 0104 	add.w	r1, r3, #4
 8008b70:	d52a      	bpl.n	8008bc8 <_printf_i+0xa4>
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6011      	str	r1, [r2, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	da03      	bge.n	8008b82 <_printf_i+0x5e>
 8008b7a:	222d      	movs	r2, #45	; 0x2d
 8008b7c:	425b      	negs	r3, r3
 8008b7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008b82:	486f      	ldr	r0, [pc, #444]	; (8008d40 <_printf_i+0x21c>)
 8008b84:	220a      	movs	r2, #10
 8008b86:	e039      	b.n	8008bfc <_printf_i+0xd8>
 8008b88:	2973      	cmp	r1, #115	; 0x73
 8008b8a:	f000 809d 	beq.w	8008cc8 <_printf_i+0x1a4>
 8008b8e:	d808      	bhi.n	8008ba2 <_printf_i+0x7e>
 8008b90:	296f      	cmp	r1, #111	; 0x6f
 8008b92:	d020      	beq.n	8008bd6 <_printf_i+0xb2>
 8008b94:	2970      	cmp	r1, #112	; 0x70
 8008b96:	d1dd      	bne.n	8008b54 <_printf_i+0x30>
 8008b98:	6823      	ldr	r3, [r4, #0]
 8008b9a:	f043 0320 	orr.w	r3, r3, #32
 8008b9e:	6023      	str	r3, [r4, #0]
 8008ba0:	e003      	b.n	8008baa <_printf_i+0x86>
 8008ba2:	2975      	cmp	r1, #117	; 0x75
 8008ba4:	d017      	beq.n	8008bd6 <_printf_i+0xb2>
 8008ba6:	2978      	cmp	r1, #120	; 0x78
 8008ba8:	d1d4      	bne.n	8008b54 <_printf_i+0x30>
 8008baa:	2378      	movs	r3, #120	; 0x78
 8008bac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bb0:	4864      	ldr	r0, [pc, #400]	; (8008d44 <_printf_i+0x220>)
 8008bb2:	e055      	b.n	8008c60 <_printf_i+0x13c>
 8008bb4:	6813      	ldr	r3, [r2, #0]
 8008bb6:	1d19      	adds	r1, r3, #4
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	6011      	str	r1, [r2, #0]
 8008bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e08c      	b.n	8008ce2 <_printf_i+0x1be>
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6011      	str	r1, [r2, #0]
 8008bcc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008bd0:	bf18      	it	ne
 8008bd2:	b21b      	sxthne	r3, r3
 8008bd4:	e7cf      	b.n	8008b76 <_printf_i+0x52>
 8008bd6:	6813      	ldr	r3, [r2, #0]
 8008bd8:	6825      	ldr	r5, [r4, #0]
 8008bda:	1d18      	adds	r0, r3, #4
 8008bdc:	6010      	str	r0, [r2, #0]
 8008bde:	0628      	lsls	r0, r5, #24
 8008be0:	d501      	bpl.n	8008be6 <_printf_i+0xc2>
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	e002      	b.n	8008bec <_printf_i+0xc8>
 8008be6:	0668      	lsls	r0, r5, #25
 8008be8:	d5fb      	bpl.n	8008be2 <_printf_i+0xbe>
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	4854      	ldr	r0, [pc, #336]	; (8008d40 <_printf_i+0x21c>)
 8008bee:	296f      	cmp	r1, #111	; 0x6f
 8008bf0:	bf14      	ite	ne
 8008bf2:	220a      	movne	r2, #10
 8008bf4:	2208      	moveq	r2, #8
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bfc:	6865      	ldr	r5, [r4, #4]
 8008bfe:	60a5      	str	r5, [r4, #8]
 8008c00:	2d00      	cmp	r5, #0
 8008c02:	f2c0 8095 	blt.w	8008d30 <_printf_i+0x20c>
 8008c06:	6821      	ldr	r1, [r4, #0]
 8008c08:	f021 0104 	bic.w	r1, r1, #4
 8008c0c:	6021      	str	r1, [r4, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d13d      	bne.n	8008c8e <_printf_i+0x16a>
 8008c12:	2d00      	cmp	r5, #0
 8008c14:	f040 808e 	bne.w	8008d34 <_printf_i+0x210>
 8008c18:	4665      	mov	r5, ip
 8008c1a:	2a08      	cmp	r2, #8
 8008c1c:	d10b      	bne.n	8008c36 <_printf_i+0x112>
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	07db      	lsls	r3, r3, #31
 8008c22:	d508      	bpl.n	8008c36 <_printf_i+0x112>
 8008c24:	6923      	ldr	r3, [r4, #16]
 8008c26:	6862      	ldr	r2, [r4, #4]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	bfde      	ittt	le
 8008c2c:	2330      	movle	r3, #48	; 0x30
 8008c2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c36:	ebac 0305 	sub.w	r3, ip, r5
 8008c3a:	6123      	str	r3, [r4, #16]
 8008c3c:	f8cd 8000 	str.w	r8, [sp]
 8008c40:	463b      	mov	r3, r7
 8008c42:	aa03      	add	r2, sp, #12
 8008c44:	4621      	mov	r1, r4
 8008c46:	4630      	mov	r0, r6
 8008c48:	f7ff fef6 	bl	8008a38 <_printf_common>
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	d14d      	bne.n	8008cec <_printf_i+0x1c8>
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295
 8008c54:	b005      	add	sp, #20
 8008c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c5a:	4839      	ldr	r0, [pc, #228]	; (8008d40 <_printf_i+0x21c>)
 8008c5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008c60:	6813      	ldr	r3, [r2, #0]
 8008c62:	6821      	ldr	r1, [r4, #0]
 8008c64:	1d1d      	adds	r5, r3, #4
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6015      	str	r5, [r2, #0]
 8008c6a:	060a      	lsls	r2, r1, #24
 8008c6c:	d50b      	bpl.n	8008c86 <_printf_i+0x162>
 8008c6e:	07ca      	lsls	r2, r1, #31
 8008c70:	bf44      	itt	mi
 8008c72:	f041 0120 	orrmi.w	r1, r1, #32
 8008c76:	6021      	strmi	r1, [r4, #0]
 8008c78:	b91b      	cbnz	r3, 8008c82 <_printf_i+0x15e>
 8008c7a:	6822      	ldr	r2, [r4, #0]
 8008c7c:	f022 0220 	bic.w	r2, r2, #32
 8008c80:	6022      	str	r2, [r4, #0]
 8008c82:	2210      	movs	r2, #16
 8008c84:	e7b7      	b.n	8008bf6 <_printf_i+0xd2>
 8008c86:	064d      	lsls	r5, r1, #25
 8008c88:	bf48      	it	mi
 8008c8a:	b29b      	uxthmi	r3, r3
 8008c8c:	e7ef      	b.n	8008c6e <_printf_i+0x14a>
 8008c8e:	4665      	mov	r5, ip
 8008c90:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c94:	fb02 3311 	mls	r3, r2, r1, r3
 8008c98:	5cc3      	ldrb	r3, [r0, r3]
 8008c9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	2900      	cmp	r1, #0
 8008ca2:	d1f5      	bne.n	8008c90 <_printf_i+0x16c>
 8008ca4:	e7b9      	b.n	8008c1a <_printf_i+0xf6>
 8008ca6:	6813      	ldr	r3, [r2, #0]
 8008ca8:	6825      	ldr	r5, [r4, #0]
 8008caa:	6961      	ldr	r1, [r4, #20]
 8008cac:	1d18      	adds	r0, r3, #4
 8008cae:	6010      	str	r0, [r2, #0]
 8008cb0:	0628      	lsls	r0, r5, #24
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	d501      	bpl.n	8008cba <_printf_i+0x196>
 8008cb6:	6019      	str	r1, [r3, #0]
 8008cb8:	e002      	b.n	8008cc0 <_printf_i+0x19c>
 8008cba:	066a      	lsls	r2, r5, #25
 8008cbc:	d5fb      	bpl.n	8008cb6 <_printf_i+0x192>
 8008cbe:	8019      	strh	r1, [r3, #0]
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	6123      	str	r3, [r4, #16]
 8008cc4:	4665      	mov	r5, ip
 8008cc6:	e7b9      	b.n	8008c3c <_printf_i+0x118>
 8008cc8:	6813      	ldr	r3, [r2, #0]
 8008cca:	1d19      	adds	r1, r3, #4
 8008ccc:	6011      	str	r1, [r2, #0]
 8008cce:	681d      	ldr	r5, [r3, #0]
 8008cd0:	6862      	ldr	r2, [r4, #4]
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	f7f7 fa7b 	bl	80001d0 <memchr>
 8008cda:	b108      	cbz	r0, 8008ce0 <_printf_i+0x1bc>
 8008cdc:	1b40      	subs	r0, r0, r5
 8008cde:	6060      	str	r0, [r4, #4]
 8008ce0:	6863      	ldr	r3, [r4, #4]
 8008ce2:	6123      	str	r3, [r4, #16]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cea:	e7a7      	b.n	8008c3c <_printf_i+0x118>
 8008cec:	6923      	ldr	r3, [r4, #16]
 8008cee:	462a      	mov	r2, r5
 8008cf0:	4639      	mov	r1, r7
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	47c0      	blx	r8
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	d0aa      	beq.n	8008c50 <_printf_i+0x12c>
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	079b      	lsls	r3, r3, #30
 8008cfe:	d413      	bmi.n	8008d28 <_printf_i+0x204>
 8008d00:	68e0      	ldr	r0, [r4, #12]
 8008d02:	9b03      	ldr	r3, [sp, #12]
 8008d04:	4298      	cmp	r0, r3
 8008d06:	bfb8      	it	lt
 8008d08:	4618      	movlt	r0, r3
 8008d0a:	e7a3      	b.n	8008c54 <_printf_i+0x130>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	464a      	mov	r2, r9
 8008d10:	4639      	mov	r1, r7
 8008d12:	4630      	mov	r0, r6
 8008d14:	47c0      	blx	r8
 8008d16:	3001      	adds	r0, #1
 8008d18:	d09a      	beq.n	8008c50 <_printf_i+0x12c>
 8008d1a:	3501      	adds	r5, #1
 8008d1c:	68e3      	ldr	r3, [r4, #12]
 8008d1e:	9a03      	ldr	r2, [sp, #12]
 8008d20:	1a9b      	subs	r3, r3, r2
 8008d22:	42ab      	cmp	r3, r5
 8008d24:	dcf2      	bgt.n	8008d0c <_printf_i+0x1e8>
 8008d26:	e7eb      	b.n	8008d00 <_printf_i+0x1dc>
 8008d28:	2500      	movs	r5, #0
 8008d2a:	f104 0919 	add.w	r9, r4, #25
 8008d2e:	e7f5      	b.n	8008d1c <_printf_i+0x1f8>
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1ac      	bne.n	8008c8e <_printf_i+0x16a>
 8008d34:	7803      	ldrb	r3, [r0, #0]
 8008d36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d3e:	e76c      	b.n	8008c1a <_printf_i+0xf6>
 8008d40:	08008e41 	.word	0x08008e41
 8008d44:	08008e52 	.word	0x08008e52

08008d48 <memcpy>:
 8008d48:	b510      	push	{r4, lr}
 8008d4a:	1e43      	subs	r3, r0, #1
 8008d4c:	440a      	add	r2, r1
 8008d4e:	4291      	cmp	r1, r2
 8008d50:	d100      	bne.n	8008d54 <memcpy+0xc>
 8008d52:	bd10      	pop	{r4, pc}
 8008d54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d5c:	e7f7      	b.n	8008d4e <memcpy+0x6>

08008d5e <memmove>:
 8008d5e:	4288      	cmp	r0, r1
 8008d60:	b510      	push	{r4, lr}
 8008d62:	eb01 0302 	add.w	r3, r1, r2
 8008d66:	d807      	bhi.n	8008d78 <memmove+0x1a>
 8008d68:	1e42      	subs	r2, r0, #1
 8008d6a:	4299      	cmp	r1, r3
 8008d6c:	d00a      	beq.n	8008d84 <memmove+0x26>
 8008d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d72:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008d76:	e7f8      	b.n	8008d6a <memmove+0xc>
 8008d78:	4283      	cmp	r3, r0
 8008d7a:	d9f5      	bls.n	8008d68 <memmove+0xa>
 8008d7c:	1881      	adds	r1, r0, r2
 8008d7e:	1ad2      	subs	r2, r2, r3
 8008d80:	42d3      	cmn	r3, r2
 8008d82:	d100      	bne.n	8008d86 <memmove+0x28>
 8008d84:	bd10      	pop	{r4, pc}
 8008d86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d8a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008d8e:	e7f7      	b.n	8008d80 <memmove+0x22>

08008d90 <_realloc_r>:
 8008d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d92:	4607      	mov	r7, r0
 8008d94:	4614      	mov	r4, r2
 8008d96:	460e      	mov	r6, r1
 8008d98:	b921      	cbnz	r1, 8008da4 <_realloc_r+0x14>
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008da0:	f7ff bc6c 	b.w	800867c <_malloc_r>
 8008da4:	b922      	cbnz	r2, 8008db0 <_realloc_r+0x20>
 8008da6:	f7ff fc1b 	bl	80085e0 <_free_r>
 8008daa:	4625      	mov	r5, r4
 8008dac:	4628      	mov	r0, r5
 8008dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008db0:	f000 f814 	bl	8008ddc <_malloc_usable_size_r>
 8008db4:	42a0      	cmp	r0, r4
 8008db6:	d20f      	bcs.n	8008dd8 <_realloc_r+0x48>
 8008db8:	4621      	mov	r1, r4
 8008dba:	4638      	mov	r0, r7
 8008dbc:	f7ff fc5e 	bl	800867c <_malloc_r>
 8008dc0:	4605      	mov	r5, r0
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	d0f2      	beq.n	8008dac <_realloc_r+0x1c>
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	4622      	mov	r2, r4
 8008dca:	f7ff ffbd 	bl	8008d48 <memcpy>
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4638      	mov	r0, r7
 8008dd2:	f7ff fc05 	bl	80085e0 <_free_r>
 8008dd6:	e7e9      	b.n	8008dac <_realloc_r+0x1c>
 8008dd8:	4635      	mov	r5, r6
 8008dda:	e7e7      	b.n	8008dac <_realloc_r+0x1c>

08008ddc <_malloc_usable_size_r>:
 8008ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008de0:	1f18      	subs	r0, r3, #4
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	bfbc      	itt	lt
 8008de6:	580b      	ldrlt	r3, [r1, r0]
 8008de8:	18c0      	addlt	r0, r0, r3
 8008dea:	4770      	bx	lr

08008dec <_init>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	bf00      	nop
 8008df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df2:	bc08      	pop	{r3}
 8008df4:	469e      	mov	lr, r3
 8008df6:	4770      	bx	lr

08008df8 <_fini>:
 8008df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dfa:	bf00      	nop
 8008dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dfe:	bc08      	pop	{r3}
 8008e00:	469e      	mov	lr, r3
 8008e02:	4770      	bx	lr
