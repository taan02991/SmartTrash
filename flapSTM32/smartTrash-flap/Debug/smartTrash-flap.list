
smartTrash-flap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008444  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080085d8  080085d8  000185d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085f4  080085f4  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080085f4  080085f4  000185f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085fc  080085fc  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085fc  080085fc  000185fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008600  08008600  00018600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000090  08008694  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000914  08008694  00020914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c136  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a5e  00000000  00000000  0003c1f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001620  00000000  00000000  0003fc58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001498  00000000  00000000  00041278  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a720  00000000  00000000  00042710  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013736  00000000  00000000  0005ce30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000945c0  00000000  00000000  00070566  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00104b26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ef0  00000000  00000000  00104ba4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000090 	.word	0x20000090
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080085c0 	.word	0x080085c0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000094 	.word	0x20000094
 80001d0:	080085c0 	.word	0x080085c0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <HAL_Init+0x40>)
 80004de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <HAL_Init+0x40>)
 80004ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a07      	ldr	r2, [pc, #28]	; (8000514 <HAL_Init+0x40>)
 80004f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f94d 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f000 f808 	bl	8000518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f007 f97a 	bl	8007800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40023c00 	.word	0x40023c00

08000518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_InitTick+0x54>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x58>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	4619      	mov	r1, r3
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000532:	fbb2 f3f3 	udiv	r3, r2, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f965 	bl	8000806 <HAL_SYSTICK_Config>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000542:	2301      	movs	r3, #1
 8000544:	e00e      	b.n	8000564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b0f      	cmp	r3, #15
 800054a:	d80a      	bhi.n	8000562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800054c:	2200      	movs	r2, #0
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	f04f 30ff 	mov.w	r0, #4294967295
 8000554:	f000 f92d 	bl	80007b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000558:	4a06      	ldr	r2, [pc, #24]	; (8000574 <HAL_InitTick+0x5c>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800055e:	2300      	movs	r3, #0
 8000560:	e000      	b.n	8000564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000562:	2301      	movs	r3, #1
}
 8000564:	4618      	mov	r0, r3
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000028 	.word	0x20000028
 8000570:	20000004 	.word	0x20000004
 8000574:	20000000 	.word	0x20000000

08000578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_IncTick+0x20>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x24>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4413      	add	r3, r2
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <HAL_IncTick+0x24>)
 800058a:	6013      	str	r3, [r2, #0]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000004 	.word	0x20000004
 800059c:	200000c0 	.word	0x200000c0

080005a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return uwTick;
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <HAL_GetTick+0x14>)
 80005a6:	681b      	ldr	r3, [r3, #0]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	200000c0 	.word	0x200000c0

080005b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c0:	f7ff ffee 	bl	80005a0 <HAL_GetTick>
 80005c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d0:	d005      	beq.n	80005de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_Delay+0x40>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	461a      	mov	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4413      	add	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005de:	bf00      	nop
 80005e0:	f7ff ffde 	bl	80005a0 <HAL_GetTick>
 80005e4:	4602      	mov	r2, r0
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d8f7      	bhi.n	80005e0 <HAL_Delay+0x28>
  {
  }
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000004 	.word	0x20000004

080005fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062e:	4a04      	ldr	r2, [pc, #16]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	60d3      	str	r3, [r2, #12]
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <__NVIC_GetPriorityGrouping+0x18>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	f003 0307 	and.w	r3, r3, #7
}
 8000652:	4618      	mov	r0, r3
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	db0b      	blt.n	800068a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 021f 	and.w	r2, r3, #31
 8000678:	4907      	ldr	r1, [pc, #28]	; (8000698 <__NVIC_EnableIRQ+0x38>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	095b      	lsrs	r3, r3, #5
 8000680:	2001      	movs	r0, #1
 8000682:	fa00 f202 	lsl.w	r2, r0, r2
 8000686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000e100 	.word	0xe000e100

0800069c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	db0a      	blt.n	80006c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	490c      	ldr	r1, [pc, #48]	; (80006e8 <__NVIC_SetPriority+0x4c>)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	0112      	lsls	r2, r2, #4
 80006bc:	b2d2      	uxtb	r2, r2
 80006be:	440b      	add	r3, r1
 80006c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c4:	e00a      	b.n	80006dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4908      	ldr	r1, [pc, #32]	; (80006ec <__NVIC_SetPriority+0x50>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	f003 030f 	and.w	r3, r3, #15
 80006d2:	3b04      	subs	r3, #4
 80006d4:	0112      	lsls	r2, r2, #4
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	440b      	add	r3, r1
 80006da:	761a      	strb	r2, [r3, #24]
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000e100 	.word	0xe000e100
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b089      	sub	sp, #36	; 0x24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	f1c3 0307 	rsb	r3, r3, #7
 800070a:	2b04      	cmp	r3, #4
 800070c:	bf28      	it	cs
 800070e:	2304      	movcs	r3, #4
 8000710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3304      	adds	r3, #4
 8000716:	2b06      	cmp	r3, #6
 8000718:	d902      	bls.n	8000720 <NVIC_EncodePriority+0x30>
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3b03      	subs	r3, #3
 800071e:	e000      	b.n	8000722 <NVIC_EncodePriority+0x32>
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	f04f 32ff 	mov.w	r2, #4294967295
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43da      	mvns	r2, r3
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	401a      	ands	r2, r3
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000738:	f04f 31ff 	mov.w	r1, #4294967295
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	43d9      	mvns	r1, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f7ff ff8e 	bl	800069c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff29 	bl	80005fc <__NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff3e 	bl	8000644 <__NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff8e 	bl	80006f0 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5d 	bl	800069c <__NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff31 	bl	8000660 <__NVIC_EnableIRQ>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ffa2 	bl	8000758 <SysTick_Config>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000820:	b480      	push	{r7}
 8000822:	b089      	sub	sp, #36	; 0x24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
 800083a:	e159      	b.n	8000af0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800083c:	2201      	movs	r2, #1
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	4013      	ands	r3, r2
 800084e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	429a      	cmp	r2, r3
 8000856:	f040 8148 	bne.w	8000aea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d00b      	beq.n	800087a <HAL_GPIO_Init+0x5a>
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d007      	beq.n	800087a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800086e:	2b11      	cmp	r3, #17
 8000870:	d003      	beq.n	800087a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2b12      	cmp	r3, #18
 8000878:	d130      	bne.n	80008dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	2203      	movs	r2, #3
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43db      	mvns	r3, r3
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	4013      	ands	r3, r2
 8000890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	68da      	ldr	r2, [r3, #12]
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008b0:	2201      	movs	r2, #1
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	4013      	ands	r3, r2
 80008be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	091b      	lsrs	r3, r3, #4
 80008c6:	f003 0201 	and.w	r2, r3, #1
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	2203      	movs	r2, #3
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	43db      	mvns	r3, r3
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	4013      	ands	r3, r2
 80008f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	689a      	ldr	r2, [r3, #8]
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4313      	orrs	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b02      	cmp	r3, #2
 8000912:	d003      	beq.n	800091c <HAL_GPIO_Init+0xfc>
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b12      	cmp	r3, #18
 800091a:	d123      	bne.n	8000964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	08da      	lsrs	r2, r3, #3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3208      	adds	r2, #8
 8000924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	f003 0307 	and.w	r3, r3, #7
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	220f      	movs	r2, #15
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	4013      	ands	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	691a      	ldr	r2, [r3, #16]
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4313      	orrs	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	08da      	lsrs	r2, r3, #3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3208      	adds	r2, #8
 800095e:	69b9      	ldr	r1, [r7, #24]
 8000960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	2203      	movs	r2, #3
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	4013      	ands	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f003 0203 	and.w	r2, r3, #3
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	4313      	orrs	r3, r2
 8000990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	f000 80a2 	beq.w	8000aea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b56      	ldr	r3, [pc, #344]	; (8000b04 <HAL_GPIO_Init+0x2e4>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	4a55      	ldr	r2, [pc, #340]	; (8000b04 <HAL_GPIO_Init+0x2e4>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	; 0x44
 80009b6:	4b53      	ldr	r3, [pc, #332]	; (8000b04 <HAL_GPIO_Init+0x2e4>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009c2:	4a51      	ldr	r2, [pc, #324]	; (8000b08 <HAL_GPIO_Init+0x2e8>)
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	3302      	adds	r3, #2
 80009ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	f003 0303 	and.w	r3, r3, #3
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	220f      	movs	r2, #15
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	4013      	ands	r3, r2
 80009e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a48      	ldr	r2, [pc, #288]	; (8000b0c <HAL_GPIO_Init+0x2ec>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d019      	beq.n	8000a22 <HAL_GPIO_Init+0x202>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a47      	ldr	r2, [pc, #284]	; (8000b10 <HAL_GPIO_Init+0x2f0>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d013      	beq.n	8000a1e <HAL_GPIO_Init+0x1fe>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a46      	ldr	r2, [pc, #280]	; (8000b14 <HAL_GPIO_Init+0x2f4>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d00d      	beq.n	8000a1a <HAL_GPIO_Init+0x1fa>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a45      	ldr	r2, [pc, #276]	; (8000b18 <HAL_GPIO_Init+0x2f8>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d007      	beq.n	8000a16 <HAL_GPIO_Init+0x1f6>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a44      	ldr	r2, [pc, #272]	; (8000b1c <HAL_GPIO_Init+0x2fc>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_GPIO_Init+0x1f2>
 8000a0e:	2304      	movs	r3, #4
 8000a10:	e008      	b.n	8000a24 <HAL_GPIO_Init+0x204>
 8000a12:	2307      	movs	r3, #7
 8000a14:	e006      	b.n	8000a24 <HAL_GPIO_Init+0x204>
 8000a16:	2303      	movs	r3, #3
 8000a18:	e004      	b.n	8000a24 <HAL_GPIO_Init+0x204>
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	e002      	b.n	8000a24 <HAL_GPIO_Init+0x204>
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e000      	b.n	8000a24 <HAL_GPIO_Init+0x204>
 8000a22:	2300      	movs	r3, #0
 8000a24:	69fa      	ldr	r2, [r7, #28]
 8000a26:	f002 0203 	and.w	r2, r2, #3
 8000a2a:	0092      	lsls	r2, r2, #2
 8000a2c:	4093      	lsls	r3, r2
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a34:	4934      	ldr	r1, [pc, #208]	; (8000b08 <HAL_GPIO_Init+0x2e8>)
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	089b      	lsrs	r3, r3, #2
 8000a3a:	3302      	adds	r3, #2
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a42:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <HAL_GPIO_Init+0x300>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	69ba      	ldr	r2, [r7, #24]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a5e:	69ba      	ldr	r2, [r7, #24]
 8000a60:	693b      	ldr	r3, [r7, #16]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a66:	4a2e      	ldr	r2, [pc, #184]	; (8000b20 <HAL_GPIO_Init+0x300>)
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a6c:	4b2c      	ldr	r3, [pc, #176]	; (8000b20 <HAL_GPIO_Init+0x300>)
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d003      	beq.n	8000a90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a90:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <HAL_GPIO_Init+0x300>)
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a96:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <HAL_GPIO_Init+0x300>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aba:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <HAL_GPIO_Init+0x300>)
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <HAL_GPIO_Init+0x300>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	43db      	mvns	r3, r3
 8000aca:	69ba      	ldr	r2, [r7, #24]
 8000acc:	4013      	ands	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ae4:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_GPIO_Init+0x300>)
 8000ae6:	69bb      	ldr	r3, [r7, #24]
 8000ae8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3301      	adds	r3, #1
 8000aee:	61fb      	str	r3, [r7, #28]
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	f67f aea2 	bls.w	800083c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000af8:	bf00      	nop
 8000afa:	3724      	adds	r7, #36	; 0x24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40013800 	.word	0x40013800
 8000b0c:	40020000 	.word	0x40020000
 8000b10:	40020400 	.word	0x40020400
 8000b14:	40020800 	.word	0x40020800
 8000b18:	40020c00 	.word	0x40020c00
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40013c00 	.word	0x40013c00

08000b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]
 8000b30:	4613      	mov	r3, r2
 8000b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b34:	787b      	ldrb	r3, [r7, #1]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b40:	e003      	b.n	8000b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	041a      	lsls	r2, r3, #16
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	619a      	str	r2, [r3, #24]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000b56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b58:	b08f      	sub	sp, #60	; 0x3c
 8000b5a:	af0a      	add	r7, sp, #40	; 0x28
 8000b5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d101      	bne.n	8000b68 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	e054      	b.n	8000c12 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d106      	bne.n	8000b88 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f007 f94c 	bl	8007e20 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f003 fe1e 	bl	80047e8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	687e      	ldr	r6, [r7, #4]
 8000bb4:	466d      	mov	r5, sp
 8000bb6:	f106 0410 	add.w	r4, r6, #16
 8000bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bca:	1d33      	adds	r3, r6, #4
 8000bcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bce:	6838      	ldr	r0, [r7, #0]
 8000bd0:	f003 fd98 	bl	8004704 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2101      	movs	r1, #1
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f003 fe15 	bl	800480a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	687e      	ldr	r6, [r7, #4]
 8000be8:	466d      	mov	r5, sp
 8000bea:	f106 0410 	add.w	r4, r6, #16
 8000bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bfe:	1d33      	adds	r3, r6, #4
 8000c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c02:	6838      	ldr	r0, [r7, #0]
 8000c04:	f003 ff28 	bl	8004a58 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c1a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000c1a:	b590      	push	{r4, r7, lr}
 8000c1c:	b089      	sub	sp, #36	; 0x24
 8000c1e:	af04      	add	r7, sp, #16
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	4608      	mov	r0, r1
 8000c24:	4611      	mov	r1, r2
 8000c26:	461a      	mov	r2, r3
 8000c28:	4603      	mov	r3, r0
 8000c2a:	70fb      	strb	r3, [r7, #3]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70bb      	strb	r3, [r7, #2]
 8000c30:	4613      	mov	r3, r2
 8000c32:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d101      	bne.n	8000c42 <HAL_HCD_HC_Init+0x28>
 8000c3e:	2302      	movs	r3, #2
 8000c40:	e07f      	b.n	8000d42 <HAL_HCD_HC_Init+0x128>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2201      	movs	r2, #1
 8000c46:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000c4a:	78fa      	ldrb	r2, [r7, #3]
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	4413      	add	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	440b      	add	r3, r1
 8000c58:	333d      	adds	r3, #61	; 0x3d
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000c5e:	78fa      	ldrb	r2, [r7, #3]
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	4613      	mov	r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	440b      	add	r3, r1
 8000c6c:	3338      	adds	r3, #56	; 0x38
 8000c6e:	787a      	ldrb	r2, [r7, #1]
 8000c70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000c72:	78fa      	ldrb	r2, [r7, #3]
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	4613      	mov	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	4413      	add	r3, r2
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	440b      	add	r3, r1
 8000c80:	3340      	adds	r3, #64	; 0x40
 8000c82:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c84:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000c86:	78fa      	ldrb	r2, [r7, #3]
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	4413      	add	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	440b      	add	r3, r1
 8000c94:	3339      	adds	r3, #57	; 0x39
 8000c96:	78fa      	ldrb	r2, [r7, #3]
 8000c98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000c9a:	78fa      	ldrb	r2, [r7, #3]
 8000c9c:	6879      	ldr	r1, [r7, #4]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	440b      	add	r3, r1
 8000ca8:	333f      	adds	r3, #63	; 0x3f
 8000caa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000cae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000cb0:	78fa      	ldrb	r2, [r7, #3]
 8000cb2:	78bb      	ldrb	r3, [r7, #2]
 8000cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cb8:	b2d8      	uxtb	r0, r3
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	440b      	add	r3, r1
 8000cc6:	333a      	adds	r3, #58	; 0x3a
 8000cc8:	4602      	mov	r2, r0
 8000cca:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000ccc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	da0a      	bge.n	8000cea <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000cd4:	78fa      	ldrb	r2, [r7, #3]
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	440b      	add	r3, r1
 8000ce2:	333b      	adds	r3, #59	; 0x3b
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
 8000ce8:	e009      	b.n	8000cfe <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000cea:	78fa      	ldrb	r2, [r7, #3]
 8000cec:	6879      	ldr	r1, [r7, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	440b      	add	r3, r1
 8000cf8:	333b      	adds	r3, #59	; 0x3b
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000cfe:	78fa      	ldrb	r2, [r7, #3]
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	440b      	add	r3, r1
 8000d0c:	333c      	adds	r3, #60	; 0x3c
 8000d0e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d12:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	787c      	ldrb	r4, [r7, #1]
 8000d1a:	78ba      	ldrb	r2, [r7, #2]
 8000d1c:	78f9      	ldrb	r1, [r7, #3]
 8000d1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d20:	9302      	str	r3, [sp, #8]
 8000d22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	4623      	mov	r3, r4
 8000d30:	f004 f814 	bl	8004d5c <USB_HC_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd90      	pop	{r4, r7, pc}

08000d4a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b084      	sub	sp, #16
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	460b      	mov	r3, r1
 8000d54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d101      	bne.n	8000d68 <HAL_HCD_HC_Halt+0x1e>
 8000d64:	2302      	movs	r3, #2
 8000d66:	e00f      	b.n	8000d88 <HAL_HCD_HC_Halt+0x3e>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	78fa      	ldrb	r2, [r7, #3]
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f004 fa4e 	bl	800521a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	4608      	mov	r0, r1
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4603      	mov	r3, r0
 8000da0:	70fb      	strb	r3, [r7, #3]
 8000da2:	460b      	mov	r3, r1
 8000da4:	70bb      	strb	r3, [r7, #2]
 8000da6:	4613      	mov	r3, r2
 8000da8:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000daa:	78fa      	ldrb	r2, [r7, #3]
 8000dac:	6879      	ldr	r1, [r7, #4]
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	440b      	add	r3, r1
 8000db8:	333b      	adds	r3, #59	; 0x3b
 8000dba:	78ba      	ldrb	r2, [r7, #2]
 8000dbc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000dbe:	78fa      	ldrb	r2, [r7, #3]
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	440b      	add	r3, r1
 8000dcc:	333f      	adds	r3, #63	; 0x3f
 8000dce:	787a      	ldrb	r2, [r7, #1]
 8000dd0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000dd2:	7c3b      	ldrb	r3, [r7, #16]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d10a      	bne.n	8000dee <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000dd8:	78fa      	ldrb	r2, [r7, #3]
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	440b      	add	r3, r1
 8000de6:	3342      	adds	r3, #66	; 0x42
 8000de8:	2203      	movs	r2, #3
 8000dea:	701a      	strb	r2, [r3, #0]
 8000dec:	e009      	b.n	8000e02 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000dee:	78fa      	ldrb	r2, [r7, #3]
 8000df0:	6879      	ldr	r1, [r7, #4]
 8000df2:	4613      	mov	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3342      	adds	r3, #66	; 0x42
 8000dfe:	2202      	movs	r2, #2
 8000e00:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000e02:	787b      	ldrb	r3, [r7, #1]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	f200 80d6 	bhi.w	8000fb6 <HAL_HCD_HC_SubmitRequest+0x226>
 8000e0a:	a201      	add	r2, pc, #4	; (adr r2, 8000e10 <HAL_HCD_HC_SubmitRequest+0x80>)
 8000e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e10:	08000e21 	.word	0x08000e21
 8000e14:	08000fa1 	.word	0x08000fa1
 8000e18:	08000e8d 	.word	0x08000e8d
 8000e1c:	08000f17 	.word	0x08000f17
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000e20:	7c3b      	ldrb	r3, [r7, #16]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	f040 80c9 	bne.w	8000fba <HAL_HCD_HC_SubmitRequest+0x22a>
 8000e28:	78bb      	ldrb	r3, [r7, #2]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f040 80c5 	bne.w	8000fba <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000e30:	8b3b      	ldrh	r3, [r7, #24]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d109      	bne.n	8000e4a <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000e36:	78fa      	ldrb	r2, [r7, #3]
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	4413      	add	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	440b      	add	r3, r1
 8000e44:	3351      	adds	r3, #81	; 0x51
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e4a:	78fa      	ldrb	r2, [r7, #3]
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	440b      	add	r3, r1
 8000e58:	3351      	adds	r3, #81	; 0x51
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10a      	bne.n	8000e76 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e60:	78fa      	ldrb	r2, [r7, #3]
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	4613      	mov	r3, r2
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	440b      	add	r3, r1
 8000e6e:	3342      	adds	r3, #66	; 0x42
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000e74:	e0a1      	b.n	8000fba <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e76:	78fa      	ldrb	r2, [r7, #3]
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	440b      	add	r3, r1
 8000e84:	3342      	adds	r3, #66	; 0x42
 8000e86:	2202      	movs	r2, #2
 8000e88:	701a      	strb	r2, [r3, #0]
      break;
 8000e8a:	e096      	b.n	8000fba <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000e8c:	78bb      	ldrb	r3, [r7, #2]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d120      	bne.n	8000ed4 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e92:	78fa      	ldrb	r2, [r7, #3]
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	440b      	add	r3, r1
 8000ea0:	3351      	adds	r3, #81	; 0x51
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10a      	bne.n	8000ebe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ea8:	78fa      	ldrb	r2, [r7, #3]
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	4613      	mov	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	440b      	add	r3, r1
 8000eb6:	3342      	adds	r3, #66	; 0x42
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000ebc:	e07e      	b.n	8000fbc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ebe:	78fa      	ldrb	r2, [r7, #3]
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	440b      	add	r3, r1
 8000ecc:	3342      	adds	r3, #66	; 0x42
 8000ece:	2202      	movs	r2, #2
 8000ed0:	701a      	strb	r2, [r3, #0]
      break;
 8000ed2:	e073      	b.n	8000fbc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000ed4:	78fa      	ldrb	r2, [r7, #3]
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	440b      	add	r3, r1
 8000ee2:	3350      	adds	r3, #80	; 0x50
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d10a      	bne.n	8000f00 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000eea:	78fa      	ldrb	r2, [r7, #3]
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3342      	adds	r3, #66	; 0x42
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
      break;
 8000efe:	e05d      	b.n	8000fbc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f00:	78fa      	ldrb	r2, [r7, #3]
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	4613      	mov	r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	440b      	add	r3, r1
 8000f0e:	3342      	adds	r3, #66	; 0x42
 8000f10:	2202      	movs	r2, #2
 8000f12:	701a      	strb	r2, [r3, #0]
      break;
 8000f14:	e052      	b.n	8000fbc <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000f16:	78bb      	ldrb	r3, [r7, #2]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d120      	bne.n	8000f5e <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f1c:	78fa      	ldrb	r2, [r7, #3]
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	4613      	mov	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	440b      	add	r3, r1
 8000f2a:	3351      	adds	r3, #81	; 0x51
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d10a      	bne.n	8000f48 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f32:	78fa      	ldrb	r2, [r7, #3]
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	440b      	add	r3, r1
 8000f40:	3342      	adds	r3, #66	; 0x42
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000f46:	e039      	b.n	8000fbc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f48:	78fa      	ldrb	r2, [r7, #3]
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	440b      	add	r3, r1
 8000f56:	3342      	adds	r3, #66	; 0x42
 8000f58:	2202      	movs	r2, #2
 8000f5a:	701a      	strb	r2, [r3, #0]
      break;
 8000f5c:	e02e      	b.n	8000fbc <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f5e:	78fa      	ldrb	r2, [r7, #3]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3350      	adds	r3, #80	; 0x50
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10a      	bne.n	8000f8a <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f74:	78fa      	ldrb	r2, [r7, #3]
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	440b      	add	r3, r1
 8000f82:	3342      	adds	r3, #66	; 0x42
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]
      break;
 8000f88:	e018      	b.n	8000fbc <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f8a:	78fa      	ldrb	r2, [r7, #3]
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	4413      	add	r3, r2
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	440b      	add	r3, r1
 8000f98:	3342      	adds	r3, #66	; 0x42
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	701a      	strb	r2, [r3, #0]
      break;
 8000f9e:	e00d      	b.n	8000fbc <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fa0:	78fa      	ldrb	r2, [r7, #3]
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	4413      	add	r3, r2
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	440b      	add	r3, r1
 8000fae:	3342      	adds	r3, #66	; 0x42
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
      break;
 8000fb4:	e002      	b.n	8000fbc <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8000fb6:	bf00      	nop
 8000fb8:	e000      	b.n	8000fbc <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8000fba:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000fbc:	78fa      	ldrb	r2, [r7, #3]
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	440b      	add	r3, r1
 8000fca:	3344      	adds	r3, #68	; 0x44
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8000fd0:	78fa      	ldrb	r2, [r7, #3]
 8000fd2:	8b39      	ldrh	r1, [r7, #24]
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	4403      	add	r3, r0
 8000fe0:	3348      	adds	r3, #72	; 0x48
 8000fe2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000fe4:	78fa      	ldrb	r2, [r7, #3]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	440b      	add	r3, r1
 8000ff2:	335c      	adds	r3, #92	; 0x5c
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8000ff8:	78fa      	ldrb	r2, [r7, #3]
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	440b      	add	r3, r1
 8001006:	334c      	adds	r3, #76	; 0x4c
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800100c:	78fa      	ldrb	r2, [r7, #3]
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	440b      	add	r3, r1
 800101a:	3339      	adds	r3, #57	; 0x39
 800101c:	78fa      	ldrb	r2, [r7, #3]
 800101e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001020:	78fa      	ldrb	r2, [r7, #3]
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4413      	add	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	440b      	add	r3, r1
 800102e:	335d      	adds	r3, #93	; 0x5d
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	78fa      	ldrb	r2, [r7, #3]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	3338      	adds	r3, #56	; 0x38
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	18d1      	adds	r1, r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691b      	ldr	r3, [r3, #16]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	f003 ff8e 	bl	8004f70 <USB_HC_StartXfer>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop

08001060 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f003 fcab 	bl	80049d2 <USB_GetMode>
 800107c:	4603      	mov	r3, r0
 800107e:	2b01      	cmp	r3, #1
 8001080:	f040 80f1 	bne.w	8001266 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f003 fc8f 	bl	80049ac <USB_ReadInterrupts>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80e7 	beq.w	8001264 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f003 fc86 	bl	80049ac <USB_ReadInterrupts>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80010aa:	d104      	bne.n	80010b6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 fc76 	bl	80049ac <USB_ReadInterrupts>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80010ca:	d104      	bne.n	80010d6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 fc66 	bl	80049ac <USB_ReadInterrupts>
 80010e0:	4603      	mov	r3, r0
 80010e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80010ea:	d104      	bne.n	80010f6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fc56 	bl	80049ac <USB_ReadInterrupts>
 8001100:	4603      	mov	r3, r0
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b02      	cmp	r3, #2
 8001108:	d103      	bne.n	8001112 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2202      	movs	r2, #2
 8001110:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f003 fc48 	bl	80049ac <USB_ReadInterrupts>
 800111c:	4603      	mov	r3, r0
 800111e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001126:	d117      	bne.n	8001158 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001136:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800113a:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f006 feed 	bl	8007f1c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2101      	movs	r1, #1
 8001148:	4618      	mov	r0, r3
 800114a:	f003 fd41 	bl	8004bd0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001156:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f003 fc25 	bl	80049ac <USB_ReadInterrupts>
 8001162:	4603      	mov	r3, r0
 8001164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800116c:	d102      	bne.n	8001174 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f001 f8c8 	bl	8002304 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f003 fc17 	bl	80049ac <USB_ReadInterrupts>
 800117e:	4603      	mov	r3, r0
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	2b08      	cmp	r3, #8
 8001186:	d106      	bne.n	8001196 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f006 feab 	bl	8007ee4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2208      	movs	r2, #8
 8001194:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f003 fc06 	bl	80049ac <USB_ReadInterrupts>
 80011a0:	4603      	mov	r3, r0
 80011a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80011aa:	d138      	bne.n	800121e <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 f821 	bl	80051f8 <USB_HC_ReadInterrupt>
 80011b6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	e025      	b.n	800120a <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	68ba      	ldr	r2, [r7, #8]
 80011c6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d018      	beq.n	8001204 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	015a      	lsls	r2, r3, #5
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4413      	add	r3, r2
 80011da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80011e8:	d106      	bne.n	80011f8 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4619      	mov	r1, r3
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f000 f8cf 	bl	8001394 <HCD_HC_IN_IRQHandler>
 80011f6:	e005      	b.n	8001204 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4619      	mov	r1, r3
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 fc5f 	bl	8001ac2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3301      	adds	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	429a      	cmp	r2, r3
 8001212:	d3d4      	bcc.n	80011be <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800121c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fbc2 	bl	80049ac <USB_ReadInterrupts>
 8001228:	4603      	mov	r3, r0
 800122a:	f003 0310 	and.w	r3, r3, #16
 800122e:	2b10      	cmp	r3, #16
 8001230:	d101      	bne.n	8001236 <HAL_HCD_IRQHandler+0x1d6>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <HAL_HCD_IRQHandler+0x1d8>
 8001236:	2300      	movs	r3, #0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d014      	beq.n	8001266 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	699a      	ldr	r2, [r3, #24]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0210 	bic.w	r2, r2, #16
 800124a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 ffad 	bl	80021ac <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	699a      	ldr	r2, [r3, #24]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 0210 	orr.w	r2, r2, #16
 8001260:	619a      	str	r2, [r3, #24]
 8001262:	e000      	b.n	8001266 <HAL_HCD_IRQHandler+0x206>
      return;
 8001264:	bf00      	nop
    }
  }
}
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800127a:	2b01      	cmp	r3, #1
 800127c:	d101      	bne.n	8001282 <HAL_HCD_Start+0x16>
 800127e:	2302      	movs	r3, #2
 8001280:	e013      	b.n	80012aa <HAL_HCD_Start+0x3e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fa99 	bl	80047c6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2101      	movs	r1, #1
 800129a:	4618      	mov	r0, r3
 800129c:	f003 fcfc 	bl	8004c98 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d101      	bne.n	80012c8 <HAL_HCD_Stop+0x16>
 80012c4:	2302      	movs	r3, #2
 80012c6:	e00d      	b.n	80012e4 <HAL_HCD_Stop+0x32>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 f8db 	bl	8005490 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 fca3 	bl	8004c44 <USB_ResetPort>
 80012fe:	4603      	mov	r3, r0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001314:	78fa      	ldrb	r2, [r7, #3]
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	440b      	add	r3, r1
 8001322:	335c      	adds	r3, #92	; 0x5c
 8001324:	781b      	ldrb	r3, [r3, #0]
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
 800133a:	460b      	mov	r3, r1
 800133c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800133e:	78fa      	ldrb	r2, [r7, #3]
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	440b      	add	r3, r1
 800134c:	334c      	adds	r3, #76	; 0x4c
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f003 fce5 	bl	8004d38 <USB_GetCurrentFrame>
 800136e:	4603      	mov	r3, r0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f003 fcc0 	bl	8004d0a <USB_GetHostSpeed>
 800138a:	4603      	mov	r3, r0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	015a      	lsls	r2, r3, #5
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4413      	add	r3, r2
 80013b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	d119      	bne.n	80013f8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	015a      	lsls	r2, r3, #5
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4413      	add	r3, r2
 80013cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013d0:	461a      	mov	r2, r3
 80013d2:	2304      	movs	r3, #4
 80013d4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	015a      	lsls	r2, r3, #5
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4413      	add	r3, r2
 80013de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	0151      	lsls	r1, r2, #5
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	440a      	add	r2, r1
 80013ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	60d3      	str	r3, [r2, #12]
 80013f6:	e095      	b.n	8001524 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	015a      	lsls	r2, r3, #5
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4413      	add	r3, r2
 8001400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 0320 	and.w	r3, r3, #32
 800140a:	2b20      	cmp	r3, #32
 800140c:	d109      	bne.n	8001422 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	015a      	lsls	r2, r3, #5
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4413      	add	r3, r2
 8001416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800141a:	461a      	mov	r2, r3
 800141c:	2320      	movs	r3, #32
 800141e:	6093      	str	r3, [r2, #8]
 8001420:	e080      	b.n	8001524 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	015a      	lsls	r2, r3, #5
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4413      	add	r3, r2
 800142a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b08      	cmp	r3, #8
 8001436:	d134      	bne.n	80014a2 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	015a      	lsls	r2, r3, #5
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4413      	add	r3, r2
 8001440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	0151      	lsls	r1, r2, #5
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	440a      	add	r2, r1
 800144e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001452:	f043 0302 	orr.w	r3, r3, #2
 8001456:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	440b      	add	r3, r1
 8001466:	335d      	adds	r3, #93	; 0x5d
 8001468:	2205      	movs	r2, #5
 800146a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	015a      	lsls	r2, r3, #5
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4413      	add	r3, r2
 8001474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001478:	461a      	mov	r2, r3
 800147a:	2310      	movs	r3, #16
 800147c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	015a      	lsls	r2, r3, #5
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4413      	add	r3, r2
 8001486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800148a:	461a      	mov	r2, r3
 800148c:	2308      	movs	r3, #8
 800148e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f003 febd 	bl	800521a <USB_HC_Halt>
 80014a0:	e040      	b.n	8001524 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	015a      	lsls	r2, r3, #5
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4413      	add	r3, r2
 80014aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b8:	d134      	bne.n	8001524 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	015a      	lsls	r2, r3, #5
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4413      	add	r3, r2
 80014c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	0151      	lsls	r1, r2, #5
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	440a      	add	r2, r1
 80014d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f003 fe98 	bl	800521a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	015a      	lsls	r2, r3, #5
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4413      	add	r3, r2
 80014f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014f6:	461a      	mov	r2, r3
 80014f8:	2310      	movs	r3, #16
 80014fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	440b      	add	r3, r1
 800150a:	335d      	adds	r3, #93	; 0x5d
 800150c:	2208      	movs	r2, #8
 800150e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	015a      	lsls	r2, r3, #5
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4413      	add	r3, r2
 8001518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800151c:	461a      	mov	r2, r3
 800151e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001522:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	015a      	lsls	r2, r3, #5
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4413      	add	r3, r2
 800152c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800153a:	d122      	bne.n	8001582 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	015a      	lsls	r2, r3, #5
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	4413      	add	r3, r2
 8001544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	0151      	lsls	r1, r2, #5
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	440a      	add	r2, r1
 8001552:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f003 fe57 	bl	800521a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	015a      	lsls	r2, r3, #5
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4413      	add	r3, r2
 8001574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001578:	461a      	mov	r2, r3
 800157a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800157e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001580:	e29b      	b.n	8001aba <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	015a      	lsls	r2, r3, #5
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4413      	add	r3, r2
 800158a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b01      	cmp	r3, #1
 8001596:	f040 80c1 	bne.w	800171c <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d01b      	beq.n	80015da <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	440b      	add	r3, r1
 80015b0:	3348      	adds	r3, #72	; 0x48
 80015b2:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	0159      	lsls	r1, r3, #5
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	440b      	add	r3, r1
 80015bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80015c6:	1ad1      	subs	r1, r2, r3
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4403      	add	r3, r0
 80015d6:	334c      	adds	r3, #76	; 0x4c
 80015d8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	335d      	adds	r3, #93	; 0x5d
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	440b      	add	r3, r1
 80015fc:	3358      	adds	r3, #88	; 0x58
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	015a      	lsls	r2, r3, #5
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4413      	add	r3, r2
 800160a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800160e:	461a      	mov	r2, r3
 8001610:	2301      	movs	r3, #1
 8001612:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	333f      	adds	r3, #63	; 0x3f
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00a      	beq.n	8001640 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800162a:	6879      	ldr	r1, [r7, #4]
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	440b      	add	r3, r1
 8001638:	333f      	adds	r3, #63	; 0x3f
 800163a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800163c:	2b02      	cmp	r3, #2
 800163e:	d121      	bne.n	8001684 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	015a      	lsls	r2, r3, #5
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4413      	add	r3, r2
 8001648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	0151      	lsls	r1, r2, #5
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	440a      	add	r2, r1
 8001656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800165a:	f043 0302 	orr.w	r3, r3, #2
 800165e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fdd5 	bl	800521a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	015a      	lsls	r2, r3, #5
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4413      	add	r3, r2
 8001678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800167c:	461a      	mov	r2, r3
 800167e:	2310      	movs	r3, #16
 8001680:	6093      	str	r3, [r2, #8]
 8001682:	e034      	b.n	80016ee <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	333f      	adds	r3, #63	; 0x3f
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d129      	bne.n	80016ee <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	015a      	lsls	r2, r3, #5
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	0151      	lsls	r1, r2, #5
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	440a      	add	r2, r1
 80016b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016b8:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	68fa      	ldr	r2, [r7, #12]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	440b      	add	r3, r1
 80016c8:	335c      	adds	r3, #92	; 0x5c
 80016ca:	2201      	movs	r2, #1
 80016cc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	b2d8      	uxtb	r0, r3
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	335c      	adds	r3, #92	; 0x5c
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4601      	mov	r1, r0
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f006 fc25 	bl	8007f38 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	440b      	add	r3, r1
 80016fc:	3350      	adds	r3, #80	; 0x50
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	f083 0301 	eor.w	r3, r3, #1
 8001704:	b2d8      	uxtb	r0, r3
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	3350      	adds	r3, #80	; 0x50
 8001716:	4602      	mov	r2, r0
 8001718:	701a      	strb	r2, [r3, #0]
}
 800171a:	e1ce      	b.n	8001aba <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	015a      	lsls	r2, r3, #5
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4413      	add	r3, r2
 8001724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b02      	cmp	r3, #2
 8001730:	f040 80f1 	bne.w	8001916 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	015a      	lsls	r2, r3, #5
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4413      	add	r3, r2
 800173c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	0151      	lsls	r1, r2, #5
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	440a      	add	r2, r1
 800174a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800174e:	f023 0302 	bic.w	r3, r3, #2
 8001752:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	335d      	adds	r3, #93	; 0x5d
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d10a      	bne.n	8001780 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	335c      	adds	r3, #92	; 0x5c
 800177a:	2201      	movs	r2, #1
 800177c:	701a      	strb	r2, [r3, #0]
 800177e:	e0b0      	b.n	80018e2 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	335d      	adds	r3, #93	; 0x5d
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b05      	cmp	r3, #5
 8001794:	d10a      	bne.n	80017ac <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	335c      	adds	r3, #92	; 0x5c
 80017a6:	2205      	movs	r2, #5
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	e09a      	b.n	80018e2 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	335d      	adds	r3, #93	; 0x5d
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d00a      	beq.n	80017d8 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	440b      	add	r3, r1
 80017d0:	335d      	adds	r3, #93	; 0x5d
 80017d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d156      	bne.n	8001886 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	440b      	add	r3, r1
 80017e6:	3358      	adds	r3, #88	; 0x58
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	1c59      	adds	r1, r3, #1
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4403      	add	r3, r0
 80017fa:	3358      	adds	r3, #88	; 0x58
 80017fc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4613      	mov	r3, r2
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	440b      	add	r3, r1
 800180c:	3358      	adds	r3, #88	; 0x58
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b03      	cmp	r3, #3
 8001812:	d914      	bls.n	800183e <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	440b      	add	r3, r1
 8001822:	3358      	adds	r3, #88	; 0x58
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001828:	6879      	ldr	r1, [r7, #4]
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4613      	mov	r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	440b      	add	r3, r1
 8001836:	335c      	adds	r3, #92	; 0x5c
 8001838:	2204      	movs	r2, #4
 800183a:	701a      	strb	r2, [r3, #0]
 800183c:	e009      	b.n	8001852 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	440b      	add	r3, r1
 800184c:	335c      	adds	r3, #92	; 0x5c
 800184e:	2202      	movs	r2, #2
 8001850:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4413      	add	r3, r2
 800185a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001868:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001870:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	015a      	lsls	r2, r3, #5
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4413      	add	r3, r2
 800187a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800187e:	461a      	mov	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	e02d      	b.n	80018e2 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	440b      	add	r3, r1
 8001894:	335d      	adds	r3, #93	; 0x5d
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d122      	bne.n	80018e2 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	335c      	adds	r3, #92	; 0x5c
 80018ac:	2202      	movs	r2, #2
 80018ae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	015a      	lsls	r2, r3, #5
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4413      	add	r3, r2
 80018b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018c6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018ce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	015a      	lsls	r2, r3, #5
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	4413      	add	r3, r2
 80018d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018dc:	461a      	mov	r2, r3
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	015a      	lsls	r2, r3, #5
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ee:	461a      	mov	r2, r3
 80018f0:	2302      	movs	r3, #2
 80018f2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	b2d8      	uxtb	r0, r3
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	440b      	add	r3, r1
 8001906:	335c      	adds	r3, #92	; 0x5c
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	4601      	mov	r1, r0
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f006 fb12 	bl	8007f38 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001914:	e0d1      	b.n	8001aba <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	015a      	lsls	r2, r3, #5
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	4413      	add	r3, r2
 800191e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001928:	2b80      	cmp	r3, #128	; 0x80
 800192a:	d13e      	bne.n	80019aa <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	015a      	lsls	r2, r3, #5
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4413      	add	r3, r2
 8001934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	0151      	lsls	r1, r2, #5
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	440a      	add	r2, r1
 8001942:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	3358      	adds	r3, #88	; 0x58
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	1c59      	adds	r1, r3, #1
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4403      	add	r3, r0
 800196e:	3358      	adds	r3, #88	; 0x58
 8001970:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	440b      	add	r3, r1
 8001980:	335d      	adds	r3, #93	; 0x5d
 8001982:	2206      	movs	r2, #6
 8001984:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f003 fc42 	bl	800521a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	015a      	lsls	r2, r3, #5
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4413      	add	r3, r2
 800199e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a2:	461a      	mov	r2, r3
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	6093      	str	r3, [r2, #8]
}
 80019a8:	e087      	b.n	8001aba <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	2b10      	cmp	r3, #16
 80019be:	d17c      	bne.n	8001aba <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	333f      	adds	r3, #63	; 0x3f
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d122      	bne.n	8001a1c <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	3358      	adds	r3, #88	; 0x58
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	015a      	lsls	r2, r3, #5
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4413      	add	r3, r2
 80019f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	0151      	lsls	r1, r2, #5
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	440a      	add	r2, r1
 8001a00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f003 fc00 	bl	800521a <USB_HC_Halt>
 8001a1a:	e045      	b.n	8001aa8 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	440b      	add	r3, r1
 8001a2a:	333f      	adds	r3, #63	; 0x3f
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00a      	beq.n	8001a48 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	440b      	add	r3, r1
 8001a40:	333f      	adds	r3, #63	; 0x3f
 8001a42:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d12f      	bne.n	8001aa8 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	440b      	add	r3, r1
 8001a56:	3358      	adds	r3, #88	; 0x58
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d121      	bne.n	8001aa8 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	440b      	add	r3, r1
 8001a72:	335d      	adds	r3, #93	; 0x5d
 8001a74:	2203      	movs	r2, #3
 8001a76:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	015a      	lsls	r2, r3, #5
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4413      	add	r3, r2
 8001a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	0151      	lsls	r1, r2, #5
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	440a      	add	r2, r1
 8001a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f003 fbb9 	bl	800521a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	015a      	lsls	r2, r3, #5
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	2310      	movs	r3, #16
 8001ab8:	6093      	str	r3, [r2, #8]
}
 8001aba:	bf00      	nop
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
 8001aca:	460b      	mov	r3, r1
 8001acc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	015a      	lsls	r2, r3, #5
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d119      	bne.n	8001b26 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	015a      	lsls	r2, r3, #5
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001afe:	461a      	mov	r2, r3
 8001b00:	2304      	movs	r3, #4
 8001b02:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	015a      	lsls	r2, r3, #5
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	0151      	lsls	r1, r2, #5
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	440a      	add	r2, r1
 8001b1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b1e:	f043 0302 	orr.w	r3, r3, #2
 8001b22:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001b24:	e33e      	b.n	80021a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	015a      	lsls	r2, r3, #5
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	2b20      	cmp	r3, #32
 8001b3a:	d141      	bne.n	8001bc0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	015a      	lsls	r2, r3, #5
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4413      	add	r3, r2
 8001b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2320      	movs	r3, #32
 8001b4c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	440b      	add	r3, r1
 8001b5c:	333d      	adds	r3, #61	; 0x3d
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	f040 831f 	bne.w	80021a4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001b66:	6879      	ldr	r1, [r7, #4]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	333d      	adds	r3, #61	; 0x3d
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	440b      	add	r3, r1
 8001b88:	335c      	adds	r3, #92	; 0x5c
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	015a      	lsls	r2, r3, #5
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4413      	add	r3, r2
 8001b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	0151      	lsls	r1, r2, #5
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	440a      	add	r2, r1
 8001ba4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ba8:	f043 0302 	orr.w	r3, r3, #2
 8001bac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f003 fb2e 	bl	800521a <USB_HC_Halt>
}
 8001bbe:	e2f1      	b.n	80021a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	015a      	lsls	r2, r3, #5
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd2:	2b40      	cmp	r3, #64	; 0x40
 8001bd4:	d13f      	bne.n	8001c56 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	440b      	add	r3, r1
 8001be4:	335d      	adds	r3, #93	; 0x5d
 8001be6:	2204      	movs	r2, #4
 8001be8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	440b      	add	r3, r1
 8001bf8:	333d      	adds	r3, #61	; 0x3d
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	4613      	mov	r3, r2
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3358      	adds	r3, #88	; 0x58
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	015a      	lsls	r2, r3, #5
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	0151      	lsls	r1, r2, #5
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	440a      	add	r2, r1
 8001c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f003 faec 	bl	800521a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	015a      	lsls	r2, r3, #5
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4e:	461a      	mov	r2, r3
 8001c50:	2340      	movs	r3, #64	; 0x40
 8001c52:	6093      	str	r3, [r2, #8]
}
 8001c54:	e2a6      	b.n	80021a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c6c:	d122      	bne.n	8001cb4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	015a      	lsls	r2, r3, #5
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	0151      	lsls	r1, r2, #5
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	440a      	add	r2, r1
 8001c84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f003 fabe 	bl	800521a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	015a      	lsls	r2, r3, #5
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001caa:	461a      	mov	r2, r3
 8001cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb0:	6093      	str	r3, [r2, #8]
}
 8001cb2:	e277      	b.n	80021a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	015a      	lsls	r2, r3, #5
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d135      	bne.n	8001d36 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	440b      	add	r3, r1
 8001cd8:	3358      	adds	r3, #88	; 0x58
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	015a      	lsls	r2, r3, #5
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	0151      	lsls	r1, r2, #5
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	440a      	add	r2, r1
 8001cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fa86 	bl	800521a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	015a      	lsls	r2, r3, #5
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	440b      	add	r3, r1
 8001d2e:	335d      	adds	r3, #93	; 0x5d
 8001d30:	2201      	movs	r2, #1
 8001d32:	701a      	strb	r2, [r3, #0]
}
 8001d34:	e236      	b.n	80021a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	015a      	lsls	r2, r3, #5
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d12b      	bne.n	8001da4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	015a      	lsls	r2, r3, #5
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	015a      	lsls	r2, r3, #5
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	0151      	lsls	r1, r2, #5
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	440a      	add	r2, r1
 8001d74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 fa46 	bl	800521a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	440b      	add	r3, r1
 8001d9c:	335d      	adds	r3, #93	; 0x5d
 8001d9e:	2205      	movs	r2, #5
 8001da0:	701a      	strb	r2, [r3, #0]
}
 8001da2:	e1ff      	b.n	80021a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	d155      	bne.n	8001e66 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3358      	adds	r3, #88	; 0x58
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	335d      	adds	r3, #93	; 0x5d
 8001dde:	2203      	movs	r2, #3
 8001de0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	333d      	adds	r3, #61	; 0x3d
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d114      	bne.n	8001e22 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	440b      	add	r3, r1
 8001e06:	333c      	adds	r3, #60	; 0x3c
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	440b      	add	r3, r1
 8001e1c:	333d      	adds	r3, #61	; 0x3d
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	0151      	lsls	r1, r2, #5
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	440a      	add	r2, r1
 8001e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e3c:	f043 0302 	orr.w	r3, r3, #2
 8001e40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 f9e4 	bl	800521a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	015a      	lsls	r2, r3, #5
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2310      	movs	r3, #16
 8001e62:	6093      	str	r3, [r2, #8]
}
 8001e64:	e19e      	b.n	80021a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e78:	2b80      	cmp	r3, #128	; 0x80
 8001e7a:	d12b      	bne.n	8001ed4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	0151      	lsls	r1, r2, #5
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	440a      	add	r2, r1
 8001e92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e96:	f043 0302 	orr.w	r3, r3, #2
 8001e9a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 f9b7 	bl	800521a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	440b      	add	r3, r1
 8001eba:	335d      	adds	r3, #93	; 0x5d
 8001ebc:	2206      	movs	r2, #6
 8001ebe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	461a      	mov	r2, r3
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	6093      	str	r3, [r2, #8]
}
 8001ed2:	e167      	b.n	80021a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	015a      	lsls	r2, r3, #5
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eea:	d135      	bne.n	8001f58 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	0151      	lsls	r1, r2, #5
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	440a      	add	r2, r1
 8001f02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f06:	f043 0302 	orr.w	r3, r3, #2
 8001f0a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 f97f 	bl	800521a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	015a      	lsls	r2, r3, #5
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2310      	movs	r3, #16
 8001f2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	335d      	adds	r3, #93	; 0x5d
 8001f52:	2208      	movs	r2, #8
 8001f54:	701a      	strb	r2, [r3, #0]
}
 8001f56:	e125      	b.n	80021a4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	f040 811a 	bne.w	80021a4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	0151      	lsls	r1, r2, #5
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	440a      	add	r2, r1
 8001f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f8a:	f023 0302 	bic.w	r3, r3, #2
 8001f8e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4613      	mov	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	440b      	add	r3, r1
 8001f9e:	335d      	adds	r3, #93	; 0x5d
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d137      	bne.n	8002016 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	440b      	add	r3, r1
 8001fb4:	335c      	adds	r3, #92	; 0x5c
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	440b      	add	r3, r1
 8001fc8:	333f      	adds	r3, #63	; 0x3f
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d00b      	beq.n	8001fe8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	333f      	adds	r3, #63	; 0x3f
 8001fe0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	f040 80c5 	bne.w	8002172 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3351      	adds	r3, #81	; 0x51
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	f083 0301 	eor.w	r3, r3, #1
 8001ffe:	b2d8      	uxtb	r0, r3
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	3351      	adds	r3, #81	; 0x51
 8002010:	4602      	mov	r2, r0
 8002012:	701a      	strb	r2, [r3, #0]
 8002014:	e0ad      	b.n	8002172 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	335d      	adds	r3, #93	; 0x5d
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d10a      	bne.n	8002042 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	335c      	adds	r3, #92	; 0x5c
 800203c:	2202      	movs	r2, #2
 800203e:	701a      	strb	r2, [r3, #0]
 8002040:	e097      	b.n	8002172 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	440b      	add	r3, r1
 8002050:	335d      	adds	r3, #93	; 0x5d
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b04      	cmp	r3, #4
 8002056:	d10a      	bne.n	800206e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	440b      	add	r3, r1
 8002066:	335c      	adds	r3, #92	; 0x5c
 8002068:	2202      	movs	r2, #2
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	e081      	b.n	8002172 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	335d      	adds	r3, #93	; 0x5d
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d10a      	bne.n	800209a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	440b      	add	r3, r1
 8002092:	335c      	adds	r3, #92	; 0x5c
 8002094:	2205      	movs	r2, #5
 8002096:	701a      	strb	r2, [r3, #0]
 8002098:	e06b      	b.n	8002172 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	335d      	adds	r3, #93	; 0x5d
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b06      	cmp	r3, #6
 80020ae:	d00a      	beq.n	80020c6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	440b      	add	r3, r1
 80020be:	335d      	adds	r3, #93	; 0x5d
 80020c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d155      	bne.n	8002172 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	440b      	add	r3, r1
 80020d4:	3358      	adds	r3, #88	; 0x58
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	1c59      	adds	r1, r3, #1
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4403      	add	r3, r0
 80020e8:	3358      	adds	r3, #88	; 0x58
 80020ea:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	440b      	add	r3, r1
 80020fa:	3358      	adds	r3, #88	; 0x58
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d914      	bls.n	800212c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	3358      	adds	r3, #88	; 0x58
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	440b      	add	r3, r1
 8002124:	335c      	adds	r3, #92	; 0x5c
 8002126:	2204      	movs	r2, #4
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e009      	b.n	8002140 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	440b      	add	r3, r1
 800213a:	335c      	adds	r3, #92	; 0x5c
 800213c:	2202      	movs	r2, #2
 800213e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4413      	add	r3, r2
 8002148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002156:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800215e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	015a      	lsls	r2, r3, #5
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4413      	add	r3, r2
 8002168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800216c:	461a      	mov	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217e:	461a      	mov	r2, r3
 8002180:	2302      	movs	r3, #2
 8002182:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	b2d8      	uxtb	r0, r3
 8002188:	6879      	ldr	r1, [r7, #4]
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	335c      	adds	r3, #92	; 0x5c
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	4601      	mov	r1, r0
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f005 feca 	bl	8007f38 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80021a4:	bf00      	nop
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	0c5b      	lsrs	r3, r3, #17
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d003      	beq.n	80021f0 <HCD_RXQLVL_IRQHandler+0x44>
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	f000 8082 	beq.w	80022f2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80021ee:	e083      	b.n	80022f8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d07f      	beq.n	80022f6 <HCD_RXQLVL_IRQHandler+0x14a>
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	440b      	add	r3, r1
 8002204:	3344      	adds	r3, #68	; 0x44
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d074      	beq.n	80022f6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	440b      	add	r3, r1
 800221e:	3344      	adds	r3, #68	; 0x44
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	b292      	uxth	r2, r2
 8002226:	4619      	mov	r1, r3
 8002228:	f002 fb97 	bl	800495a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	440b      	add	r3, r1
 800223a:	3344      	adds	r3, #68	; 0x44
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	18d1      	adds	r1, r2, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	4403      	add	r3, r0
 8002250:	3344      	adds	r3, #68	; 0x44
 8002252:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	334c      	adds	r3, #76	; 0x4c
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	18d1      	adds	r1, r2, r3
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4403      	add	r3, r0
 8002278:	334c      	adds	r3, #76	; 0x4c
 800227a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	4413      	add	r3, r2
 8002284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HCD_RXQLVL_IRQHandler+0x154>)
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d031      	beq.n	80022f6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	4413      	add	r3, r2
 800229a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022a8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022b0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	440b      	add	r3, r1
 80022d2:	3350      	adds	r3, #80	; 0x50
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	f083 0301 	eor.w	r3, r3, #1
 80022da:	b2d8      	uxtb	r0, r3
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	440b      	add	r3, r1
 80022ea:	3350      	adds	r3, #80	; 0x50
 80022ec:	4602      	mov	r2, r0
 80022ee:	701a      	strb	r2, [r3, #0]
      break;
 80022f0:	e001      	b.n	80022f6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80022f2:	bf00      	nop
 80022f4:	e000      	b.n	80022f8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80022f6:	bf00      	nop
  }
}
 80022f8:	bf00      	nop
 80022fa:	3728      	adds	r7, #40	; 0x28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	1ff80000 	.word	0x1ff80000

08002304 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002330:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b02      	cmp	r3, #2
 800233a:	d113      	bne.n	8002364 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b01      	cmp	r3, #1
 8002344:	d10a      	bne.n	800235c <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699a      	ldr	r2, [r3, #24]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002354:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f005 fdd2 	bl	8007f00 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f043 0302 	orr.w	r3, r3, #2
 8002362:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b08      	cmp	r3, #8
 800236c:	d147      	bne.n	80023fe <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	f043 0308 	orr.w	r3, r3, #8
 8002374:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b04      	cmp	r3, #4
 800237e:	d129      	bne.n	80023d4 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d113      	bne.n	80023b0 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800238e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002392:	d106      	bne.n	80023a2 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2102      	movs	r1, #2
 800239a:	4618      	mov	r0, r3
 800239c:	f002 fc18 	bl	8004bd0 <USB_InitFSLSPClkSel>
 80023a0:	e011      	b.n	80023c6 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2101      	movs	r1, #1
 80023a8:	4618      	mov	r0, r3
 80023aa:	f002 fc11 	bl	8004bd0 <USB_InitFSLSPClkSel>
 80023ae:	e00a      	b.n	80023c6 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d106      	bne.n	80023c6 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023be:	461a      	mov	r2, r3
 80023c0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80023c4:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f005 fdc4 	bl	8007f54 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f005 fd97 	bl	8007f00 <HAL_HCD_Connect_Callback>
 80023d2:	e014      	b.n	80023fe <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f005 fdcb 	bl	8007f70 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80023e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80023ec:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699a      	ldr	r2, [r3, #24]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80023fc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b20      	cmp	r3, #32
 8002406:	d103      	bne.n	8002410 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f043 0320 	orr.w	r3, r3, #32
 800240e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002416:	461a      	mov	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	6013      	str	r3, [r2, #0]
}
 800241c:	bf00      	nop
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e11f      	b.n	8002676 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f005 fa00 	bl	8007850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2224      	movs	r2, #36	; 0x24
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002476:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002486:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002488:	f001 f9de 	bl	8003848 <HAL_RCC_GetPCLK1Freq>
 800248c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4a7b      	ldr	r2, [pc, #492]	; (8002680 <HAL_I2C_Init+0x25c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d807      	bhi.n	80024a8 <HAL_I2C_Init+0x84>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4a7a      	ldr	r2, [pc, #488]	; (8002684 <HAL_I2C_Init+0x260>)
 800249c:	4293      	cmp	r3, r2
 800249e:	bf94      	ite	ls
 80024a0:	2301      	movls	r3, #1
 80024a2:	2300      	movhi	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	e006      	b.n	80024b6 <HAL_I2C_Init+0x92>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4a77      	ldr	r2, [pc, #476]	; (8002688 <HAL_I2C_Init+0x264>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	bf94      	ite	ls
 80024b0:	2301      	movls	r3, #1
 80024b2:	2300      	movhi	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0db      	b.n	8002676 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4a72      	ldr	r2, [pc, #456]	; (800268c <HAL_I2C_Init+0x268>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	0c9b      	lsrs	r3, r3, #18
 80024c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	430a      	orrs	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4a64      	ldr	r2, [pc, #400]	; (8002680 <HAL_I2C_Init+0x25c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d802      	bhi.n	80024f8 <HAL_I2C_Init+0xd4>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	3301      	adds	r3, #1
 80024f6:	e009      	b.n	800250c <HAL_I2C_Init+0xe8>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
 8002502:	4a63      	ldr	r2, [pc, #396]	; (8002690 <HAL_I2C_Init+0x26c>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	099b      	lsrs	r3, r3, #6
 800250a:	3301      	adds	r3, #1
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	430b      	orrs	r3, r1
 8002512:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800251e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4956      	ldr	r1, [pc, #344]	; (8002680 <HAL_I2C_Init+0x25c>)
 8002528:	428b      	cmp	r3, r1
 800252a:	d80d      	bhi.n	8002548 <HAL_I2C_Init+0x124>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1e59      	subs	r1, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	fbb1 f3f3 	udiv	r3, r1, r3
 800253a:	3301      	adds	r3, #1
 800253c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002540:	2b04      	cmp	r3, #4
 8002542:	bf38      	it	cc
 8002544:	2304      	movcc	r3, #4
 8002546:	e04f      	b.n	80025e8 <HAL_I2C_Init+0x1c4>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d111      	bne.n	8002574 <HAL_I2C_Init+0x150>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1e58      	subs	r0, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	440b      	add	r3, r1
 800255e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002562:	3301      	adds	r3, #1
 8002564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	e012      	b.n	800259a <HAL_I2C_Init+0x176>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	1e58      	subs	r0, r3, #1
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6859      	ldr	r1, [r3, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	0099      	lsls	r1, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	fbb0 f3f3 	udiv	r3, r0, r3
 800258a:	3301      	adds	r3, #1
 800258c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_Init+0x17e>
 800259e:	2301      	movs	r3, #1
 80025a0:	e022      	b.n	80025e8 <HAL_I2C_Init+0x1c4>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10e      	bne.n	80025c8 <HAL_I2C_Init+0x1a4>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1e58      	subs	r0, r3, #1
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6859      	ldr	r1, [r3, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	440b      	add	r3, r1
 80025b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80025bc:	3301      	adds	r3, #1
 80025be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c6:	e00f      	b.n	80025e8 <HAL_I2C_Init+0x1c4>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1e58      	subs	r0, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6859      	ldr	r1, [r3, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	0099      	lsls	r1, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	fbb0 f3f3 	udiv	r3, r0, r3
 80025de:	3301      	adds	r3, #1
 80025e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	6809      	ldr	r1, [r1, #0]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002616:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6911      	ldr	r1, [r2, #16]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	68d2      	ldr	r2, [r2, #12]
 8002622:	4311      	orrs	r1, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	430b      	orrs	r3, r1
 800262a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2220      	movs	r2, #32
 8002662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	000186a0 	.word	0x000186a0
 8002684:	001e847f 	.word	0x001e847f
 8002688:	003d08ff 	.word	0x003d08ff
 800268c:	431bde83 	.word	0x431bde83
 8002690:	10624dd3 	.word	0x10624dd3

08002694 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e128      	b.n	80028f8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a90      	ldr	r2, [pc, #576]	; (8002900 <HAL_I2S_Init+0x26c>)
 80026be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f005 f90d 	bl	80078e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2202      	movs	r2, #2
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80026dc:	f023 030f 	bic.w	r3, r3, #15
 80026e0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2202      	movs	r2, #2
 80026e8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d060      	beq.n	80027b4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80026fa:	2310      	movs	r3, #16
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	e001      	b.n	8002704 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002700:	2320      	movs	r3, #32
 8002702:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b20      	cmp	r3, #32
 800270a:	d802      	bhi.n	8002712 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002712:	2001      	movs	r0, #1
 8002714:	f001 f99a 	bl	8003a4c <HAL_RCCEx_GetPeriphCLKFreq>
 8002718:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002722:	d125      	bne.n	8002770 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d010      	beq.n	800274e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	fbb2 f2f3 	udiv	r2, r2, r3
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	461a      	mov	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	fbb2 f3f3 	udiv	r3, r2, r3
 8002748:	3305      	adds	r3, #5
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	e01f      	b.n	800278e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	fbb2 f2f3 	udiv	r2, r2, r3
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	461a      	mov	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	3305      	adds	r3, #5
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	e00e      	b.n	800278e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	fbb2 f2f3 	udiv	r2, r2, r3
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	461a      	mov	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	fbb2 f3f3 	udiv	r3, r2, r3
 800278a:	3305      	adds	r3, #5
 800278c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4a5c      	ldr	r2, [pc, #368]	; (8002904 <HAL_I2S_Init+0x270>)
 8002792:	fba2 2303 	umull	r2, r3, r2, r3
 8002796:	08db      	lsrs	r3, r3, #3
 8002798:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	085b      	lsrs	r3, r3, #1
 80027aa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	e003      	b.n	80027bc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80027b4:	2302      	movs	r3, #2
 80027b6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d902      	bls.n	80027c8 <HAL_I2S_Init+0x134>
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	2bff      	cmp	r3, #255	; 0xff
 80027c6:	d907      	bls.n	80027d8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027cc:	f043 0210 	orr.w	r2, r3, #16
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e08f      	b.n	80028f8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	ea42 0103 	orr.w	r1, r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80027f6:	f023 030f 	bic.w	r3, r3, #15
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6851      	ldr	r1, [r2, #4]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6892      	ldr	r2, [r2, #8]
 8002802:	4311      	orrs	r1, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	68d2      	ldr	r2, [r2, #12]
 8002808:	4311      	orrs	r1, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6992      	ldr	r2, [r2, #24]
 800280e:	430a      	orrs	r2, r1
 8002810:	431a      	orrs	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800281a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d161      	bne.n	80028e8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a38      	ldr	r2, [pc, #224]	; (8002908 <HAL_I2S_Init+0x274>)
 8002828:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a37      	ldr	r2, [pc, #220]	; (800290c <HAL_I2S_Init+0x278>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d101      	bne.n	8002838 <HAL_I2S_Init+0x1a4>
 8002834:	4b36      	ldr	r3, [pc, #216]	; (8002910 <HAL_I2S_Init+0x27c>)
 8002836:	e001      	b.n	800283c <HAL_I2S_Init+0x1a8>
 8002838:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	4932      	ldr	r1, [pc, #200]	; (800290c <HAL_I2S_Init+0x278>)
 8002844:	428a      	cmp	r2, r1
 8002846:	d101      	bne.n	800284c <HAL_I2S_Init+0x1b8>
 8002848:	4a31      	ldr	r2, [pc, #196]	; (8002910 <HAL_I2S_Init+0x27c>)
 800284a:	e001      	b.n	8002850 <HAL_I2S_Init+0x1bc>
 800284c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002850:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002854:	f023 030f 	bic.w	r3, r3, #15
 8002858:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a2b      	ldr	r2, [pc, #172]	; (800290c <HAL_I2S_Init+0x278>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d101      	bne.n	8002868 <HAL_I2S_Init+0x1d4>
 8002864:	4b2a      	ldr	r3, [pc, #168]	; (8002910 <HAL_I2S_Init+0x27c>)
 8002866:	e001      	b.n	800286c <HAL_I2S_Init+0x1d8>
 8002868:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800286c:	2202      	movs	r2, #2
 800286e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a25      	ldr	r2, [pc, #148]	; (800290c <HAL_I2S_Init+0x278>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d101      	bne.n	800287e <HAL_I2S_Init+0x1ea>
 800287a:	4b25      	ldr	r3, [pc, #148]	; (8002910 <HAL_I2S_Init+0x27c>)
 800287c:	e001      	b.n	8002882 <HAL_I2S_Init+0x1ee>
 800287e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800288e:	d003      	beq.n	8002898 <HAL_I2S_Init+0x204>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d103      	bne.n	80028a0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	e001      	b.n	80028a4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	b299      	uxth	r1, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80028ba:	4303      	orrs	r3, r0
 80028bc:	b29b      	uxth	r3, r3
 80028be:	430b      	orrs	r3, r1
 80028c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80028c2:	4313      	orrs	r3, r2
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	897b      	ldrh	r3, [r7, #10]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028d0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a0d      	ldr	r2, [pc, #52]	; (800290c <HAL_I2S_Init+0x278>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d101      	bne.n	80028e0 <HAL_I2S_Init+0x24c>
 80028dc:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <HAL_I2S_Init+0x27c>)
 80028de:	e001      	b.n	80028e4 <HAL_I2S_Init+0x250>
 80028e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028e4:	897a      	ldrh	r2, [r7, #10]
 80028e6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3720      	adds	r7, #32
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	08002a0b 	.word	0x08002a0b
 8002904:	cccccccd 	.word	0xcccccccd
 8002908:	08002b21 	.word	0x08002b21
 800290c:	40003800 	.word	0x40003800
 8002910:	40003400 	.word	0x40003400

08002914 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	881a      	ldrh	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	1c9a      	adds	r2, r3, #2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10e      	bne.n	80029a4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002994:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff ffb8 	bl	8002914 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029be:	b292      	uxth	r2, r2
 80029c0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	1c9a      	adds	r2, r3, #2
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10e      	bne.n	8002a02 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029f2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ff93 	bl	8002928 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b086      	sub	sp, #24
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d13a      	bne.n	8002a9c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d109      	bne.n	8002a44 <I2S_IRQHandler+0x3a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3a:	2b40      	cmp	r3, #64	; 0x40
 8002a3c:	d102      	bne.n	8002a44 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7ff ffb4 	bl	80029ac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4a:	2b40      	cmp	r3, #64	; 0x40
 8002a4c:	d126      	bne.n	8002a9c <I2S_IRQHandler+0x92>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d11f      	bne.n	8002a9c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f043 0202 	orr.w	r2, r3, #2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff ff50 	bl	800293c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d136      	bne.n	8002b16 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d109      	bne.n	8002ac6 <I2S_IRQHandler+0xbc>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abc:	2b80      	cmp	r3, #128	; 0x80
 8002abe:	d102      	bne.n	8002ac6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ff45 	bl	8002950 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d122      	bne.n	8002b16 <I2S_IRQHandler+0x10c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d11b      	bne.n	8002b16 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002aec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	f043 0204 	orr.w	r2, r3, #4
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff13 	bl	800293c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b16:	bf00      	nop
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4aa2      	ldr	r2, [pc, #648]	; (8002dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d101      	bne.n	8002b3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002b3a:	4ba2      	ldr	r3, [pc, #648]	; (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b3c:	e001      	b.n	8002b42 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002b3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a9b      	ldr	r2, [pc, #620]	; (8002dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d101      	bne.n	8002b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002b58:	4b9a      	ldr	r3, [pc, #616]	; (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002b5a:	e001      	b.n	8002b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002b5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b6c:	d004      	beq.n	8002b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f040 8099 	bne.w	8002caa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d107      	bne.n	8002b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d002      	beq.n	8002b92 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f925 	bl	8002ddc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d107      	bne.n	8002bac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f9c8 	bl	8002f3c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb2:	2b40      	cmp	r3, #64	; 0x40
 8002bb4:	d13a      	bne.n	8002c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f003 0320 	and.w	r3, r3, #32
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d035      	beq.n	8002c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a7e      	ldr	r2, [pc, #504]	; (8002dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d101      	bne.n	8002bce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002bca:	4b7e      	ldr	r3, [pc, #504]	; (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bcc:	e001      	b.n	8002bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002bce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4979      	ldr	r1, [pc, #484]	; (8002dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bda:	428b      	cmp	r3, r1
 8002bdc:	d101      	bne.n	8002be2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002bde:	4b79      	ldr	r3, [pc, #484]	; (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002be0:	e001      	b.n	8002be6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002be2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002be6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bfa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f043 0202 	orr.w	r2, r3, #2
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff fe88 	bl	800293c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	f040 80be 	bne.w	8002db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 80b8 	beq.w	8002db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c52:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a59      	ldr	r2, [pc, #356]	; (8002dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002c5e:	4b59      	ldr	r3, [pc, #356]	; (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c60:	e001      	b.n	8002c66 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002c62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4954      	ldr	r1, [pc, #336]	; (8002dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c6e:	428b      	cmp	r3, r1
 8002c70:	d101      	bne.n	8002c76 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002c72:	4b54      	ldr	r3, [pc, #336]	; (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c74:	e001      	b.n	8002c7a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002c76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c7e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002c80:	2300      	movs	r3, #0
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9a:	f043 0204 	orr.w	r2, r3, #4
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff fe4a 	bl	800293c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ca8:	e084      	b.n	8002db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d107      	bne.n	8002cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f8be 	bl	8002e40 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d107      	bne.n	8002cde <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f8fd 	bl	8002ed8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce4:	2b40      	cmp	r3, #64	; 0x40
 8002ce6:	d12f      	bne.n	8002d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d02a      	beq.n	8002d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d00:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a2e      	ldr	r2, [pc, #184]	; (8002dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d101      	bne.n	8002d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d0c:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d0e:	e001      	b.n	8002d14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4929      	ldr	r1, [pc, #164]	; (8002dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d1c:	428b      	cmp	r3, r1
 8002d1e:	d101      	bne.n	8002d24 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d20:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d22:	e001      	b.n	8002d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d2c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f043 0202 	orr.w	r2, r3, #2
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff fdfa 	bl	800293c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d131      	bne.n	8002db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d02c      	beq.n	8002db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a17      	ldr	r2, [pc, #92]	; (8002dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d68:	e001      	b.n	8002d6e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002d6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4912      	ldr	r1, [pc, #72]	; (8002dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d76:	428b      	cmp	r3, r1
 8002d78:	d101      	bne.n	8002d7e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002d7a:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d7c:	e001      	b.n	8002d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002d7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d86:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d96:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da4:	f043 0204 	orr.w	r2, r3, #4
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f7ff fdc5 	bl	800293c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002db2:	e000      	b.n	8002db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002db4:	bf00      	nop
}
 8002db6:	bf00      	nop
 8002db8:	3720      	adds	r7, #32
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40003800 	.word	0x40003800
 8002dc4:	40003400 	.word	0x40003400

08002dc8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	1c99      	adds	r1, r3, #2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6251      	str	r1, [r2, #36]	; 0x24
 8002dee:	881a      	ldrh	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d113      	bne.n	8002e36 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff ffc9 	bl	8002dc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	1c99      	adds	r1, r3, #2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6251      	str	r1, [r2, #36]	; 0x24
 8002e52:	8819      	ldrh	r1, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a1d      	ldr	r2, [pc, #116]	; (8002ed0 <I2SEx_TxISR_I2SExt+0x90>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <I2SEx_TxISR_I2SExt+0x22>
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <I2SEx_TxISR_I2SExt+0x94>)
 8002e60:	e001      	b.n	8002e66 <I2SEx_TxISR_I2SExt+0x26>
 8002e62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e66:	460a      	mov	r2, r1
 8002e68:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d121      	bne.n	8002ec6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a12      	ldr	r2, [pc, #72]	; (8002ed0 <I2SEx_TxISR_I2SExt+0x90>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d101      	bne.n	8002e90 <I2SEx_TxISR_I2SExt+0x50>
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <I2SEx_TxISR_I2SExt+0x94>)
 8002e8e:	e001      	b.n	8002e94 <I2SEx_TxISR_I2SExt+0x54>
 8002e90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	490d      	ldr	r1, [pc, #52]	; (8002ed0 <I2SEx_TxISR_I2SExt+0x90>)
 8002e9c:	428b      	cmp	r3, r1
 8002e9e:	d101      	bne.n	8002ea4 <I2SEx_TxISR_I2SExt+0x64>
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <I2SEx_TxISR_I2SExt+0x94>)
 8002ea2:	e001      	b.n	8002ea8 <I2SEx_TxISR_I2SExt+0x68>
 8002ea4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ea8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002eac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d106      	bne.n	8002ec6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ff81 	bl	8002dc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40003800 	.word	0x40003800
 8002ed4:	40003400 	.word	0x40003400

08002ed8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68d8      	ldr	r0, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	1c99      	adds	r1, r3, #2
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002ef0:	b282      	uxth	r2, r0
 8002ef2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d113      	bne.n	8002f34 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f1a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff ff4a 	bl	8002dc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a20      	ldr	r2, [pc, #128]	; (8002fcc <I2SEx_RxISR_I2SExt+0x90>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <I2SEx_RxISR_I2SExt+0x16>
 8002f4e:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <I2SEx_RxISR_I2SExt+0x94>)
 8002f50:	e001      	b.n	8002f56 <I2SEx_RxISR_I2SExt+0x1a>
 8002f52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f56:	68d8      	ldr	r0, [r3, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5c:	1c99      	adds	r1, r3, #2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f62:	b282      	uxth	r2, r0
 8002f64:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d121      	bne.n	8002fc2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <I2SEx_RxISR_I2SExt+0x90>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d101      	bne.n	8002f8c <I2SEx_RxISR_I2SExt+0x50>
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <I2SEx_RxISR_I2SExt+0x94>)
 8002f8a:	e001      	b.n	8002f90 <I2SEx_RxISR_I2SExt+0x54>
 8002f8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	490d      	ldr	r1, [pc, #52]	; (8002fcc <I2SEx_RxISR_I2SExt+0x90>)
 8002f98:	428b      	cmp	r3, r1
 8002f9a:	d101      	bne.n	8002fa0 <I2SEx_RxISR_I2SExt+0x64>
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <I2SEx_RxISR_I2SExt+0x94>)
 8002f9e:	e001      	b.n	8002fa4 <I2SEx_RxISR_I2SExt+0x68>
 8002fa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fa4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fa8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d106      	bne.n	8002fc2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f7ff ff03 	bl	8002dc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40003800 	.word	0x40003800
 8002fd0:	40003400 	.word	0x40003400

08002fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e25b      	b.n	800349e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d075      	beq.n	80030de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ff2:	4ba3      	ldr	r3, [pc, #652]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d00c      	beq.n	8003018 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ffe:	4ba0      	ldr	r3, [pc, #640]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003006:	2b08      	cmp	r3, #8
 8003008:	d112      	bne.n	8003030 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800300a:	4b9d      	ldr	r3, [pc, #628]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003012:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003016:	d10b      	bne.n	8003030 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003018:	4b99      	ldr	r3, [pc, #612]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d05b      	beq.n	80030dc <HAL_RCC_OscConfig+0x108>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d157      	bne.n	80030dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e236      	b.n	800349e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003038:	d106      	bne.n	8003048 <HAL_RCC_OscConfig+0x74>
 800303a:	4b91      	ldr	r3, [pc, #580]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a90      	ldr	r2, [pc, #576]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	e01d      	b.n	8003084 <HAL_RCC_OscConfig+0xb0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0x98>
 8003052:	4b8b      	ldr	r3, [pc, #556]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a8a      	ldr	r2, [pc, #552]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	4b88      	ldr	r3, [pc, #544]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a87      	ldr	r2, [pc, #540]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	e00b      	b.n	8003084 <HAL_RCC_OscConfig+0xb0>
 800306c:	4b84      	ldr	r3, [pc, #528]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a83      	ldr	r2, [pc, #524]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	4b81      	ldr	r3, [pc, #516]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a80      	ldr	r2, [pc, #512]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 800307e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d013      	beq.n	80030b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7fd fa88 	bl	80005a0 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003094:	f7fd fa84 	bl	80005a0 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	; 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e1fb      	b.n	800349e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	4b76      	ldr	r3, [pc, #472]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0xc0>
 80030b2:	e014      	b.n	80030de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b4:	f7fd fa74 	bl	80005a0 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030bc:	f7fd fa70 	bl	80005a0 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b64      	cmp	r3, #100	; 0x64
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e1e7      	b.n	800349e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ce:	4b6c      	ldr	r3, [pc, #432]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0xe8>
 80030da:	e000      	b.n	80030de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d063      	beq.n	80031b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ea:	4b65      	ldr	r3, [pc, #404]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030f6:	4b62      	ldr	r3, [pc, #392]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d11c      	bne.n	800313c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003102:	4b5f      	ldr	r3, [pc, #380]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d116      	bne.n	800313c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310e:	4b5c      	ldr	r3, [pc, #368]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_RCC_OscConfig+0x152>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d001      	beq.n	8003126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e1bb      	b.n	800349e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003126:	4b56      	ldr	r3, [pc, #344]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4952      	ldr	r1, [pc, #328]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313a:	e03a      	b.n	80031b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d020      	beq.n	8003186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003144:	4b4f      	ldr	r3, [pc, #316]	; (8003284 <HAL_RCC_OscConfig+0x2b0>)
 8003146:	2201      	movs	r2, #1
 8003148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314a:	f7fd fa29 	bl	80005a0 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003152:	f7fd fa25 	bl	80005a0 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e19c      	b.n	800349e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003164:	4b46      	ldr	r3, [pc, #280]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003170:	4b43      	ldr	r3, [pc, #268]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4940      	ldr	r1, [pc, #256]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003180:	4313      	orrs	r3, r2
 8003182:	600b      	str	r3, [r1, #0]
 8003184:	e015      	b.n	80031b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003186:	4b3f      	ldr	r3, [pc, #252]	; (8003284 <HAL_RCC_OscConfig+0x2b0>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fd fa08 	bl	80005a0 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003194:	f7fd fa04 	bl	80005a0 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e17b      	b.n	800349e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a6:	4b36      	ldr	r3, [pc, #216]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d030      	beq.n	8003220 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d016      	beq.n	80031f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c6:	4b30      	ldr	r3, [pc, #192]	; (8003288 <HAL_RCC_OscConfig+0x2b4>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031cc:	f7fd f9e8 	bl	80005a0 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d4:	f7fd f9e4 	bl	80005a0 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e15b      	b.n	800349e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e6:	4b26      	ldr	r3, [pc, #152]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0x200>
 80031f2:	e015      	b.n	8003220 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f4:	4b24      	ldr	r3, [pc, #144]	; (8003288 <HAL_RCC_OscConfig+0x2b4>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fa:	f7fd f9d1 	bl	80005a0 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003202:	f7fd f9cd 	bl	80005a0 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e144      	b.n	800349e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f0      	bne.n	8003202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80a0 	beq.w	800336e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800322e:	2300      	movs	r3, #0
 8003230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003232:	4b13      	ldr	r3, [pc, #76]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10f      	bne.n	800325e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	4a0e      	ldr	r2, [pc, #56]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324c:	6413      	str	r3, [r2, #64]	; 0x40
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <HAL_RCC_OscConfig+0x2ac>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325a:	2301      	movs	r3, #1
 800325c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCC_OscConfig+0x2b8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d121      	bne.n	80032ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326a:	4b08      	ldr	r3, [pc, #32]	; (800328c <HAL_RCC_OscConfig+0x2b8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a07      	ldr	r2, [pc, #28]	; (800328c <HAL_RCC_OscConfig+0x2b8>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003276:	f7fd f993 	bl	80005a0 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327c:	e011      	b.n	80032a2 <HAL_RCC_OscConfig+0x2ce>
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	42470000 	.word	0x42470000
 8003288:	42470e80 	.word	0x42470e80
 800328c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003290:	f7fd f986 	bl	80005a0 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e0fd      	b.n	800349e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	4b81      	ldr	r3, [pc, #516]	; (80034a8 <HAL_RCC_OscConfig+0x4d4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d106      	bne.n	80032c4 <HAL_RCC_OscConfig+0x2f0>
 80032b6:	4b7d      	ldr	r3, [pc, #500]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	4a7c      	ldr	r2, [pc, #496]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	6713      	str	r3, [r2, #112]	; 0x70
 80032c2:	e01c      	b.n	80032fe <HAL_RCC_OscConfig+0x32a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b05      	cmp	r3, #5
 80032ca:	d10c      	bne.n	80032e6 <HAL_RCC_OscConfig+0x312>
 80032cc:	4b77      	ldr	r3, [pc, #476]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	4a76      	ldr	r2, [pc, #472]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 80032d2:	f043 0304 	orr.w	r3, r3, #4
 80032d6:	6713      	str	r3, [r2, #112]	; 0x70
 80032d8:	4b74      	ldr	r3, [pc, #464]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	4a73      	ldr	r2, [pc, #460]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	6713      	str	r3, [r2, #112]	; 0x70
 80032e4:	e00b      	b.n	80032fe <HAL_RCC_OscConfig+0x32a>
 80032e6:	4b71      	ldr	r3, [pc, #452]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	4a70      	ldr	r2, [pc, #448]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	6713      	str	r3, [r2, #112]	; 0x70
 80032f2:	4b6e      	ldr	r3, [pc, #440]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	4a6d      	ldr	r2, [pc, #436]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 80032f8:	f023 0304 	bic.w	r3, r3, #4
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d015      	beq.n	8003332 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003306:	f7fd f94b 	bl	80005a0 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330c:	e00a      	b.n	8003324 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330e:	f7fd f947 	bl	80005a0 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f241 3288 	movw	r2, #5000	; 0x1388
 800331c:	4293      	cmp	r3, r2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e0bc      	b.n	800349e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003324:	4b61      	ldr	r3, [pc, #388]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0ee      	beq.n	800330e <HAL_RCC_OscConfig+0x33a>
 8003330:	e014      	b.n	800335c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003332:	f7fd f935 	bl	80005a0 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333a:	f7fd f931 	bl	80005a0 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	; 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e0a6      	b.n	800349e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003350:	4b56      	ldr	r3, [pc, #344]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1ee      	bne.n	800333a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800335c:	7dfb      	ldrb	r3, [r7, #23]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d105      	bne.n	800336e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003362:	4b52      	ldr	r3, [pc, #328]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	4a51      	ldr	r2, [pc, #324]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 8003368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800336c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8092 	beq.w	800349c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003378:	4b4c      	ldr	r3, [pc, #304]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b08      	cmp	r3, #8
 8003382:	d05c      	beq.n	800343e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d141      	bne.n	8003410 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338c:	4b48      	ldr	r3, [pc, #288]	; (80034b0 <HAL_RCC_OscConfig+0x4dc>)
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003392:	f7fd f905 	bl	80005a0 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339a:	f7fd f901 	bl	80005a0 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e078      	b.n	800349e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ac:	4b3f      	ldr	r3, [pc, #252]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1f0      	bne.n	800339a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	019b      	lsls	r3, r3, #6
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	085b      	lsrs	r3, r3, #1
 80033d0:	3b01      	subs	r3, #1
 80033d2:	041b      	lsls	r3, r3, #16
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	061b      	lsls	r3, r3, #24
 80033dc:	4933      	ldr	r1, [pc, #204]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033e2:	4b33      	ldr	r3, [pc, #204]	; (80034b0 <HAL_RCC_OscConfig+0x4dc>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fd f8da 	bl	80005a0 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f0:	f7fd f8d6 	bl	80005a0 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e04d      	b.n	800349e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003402:	4b2a      	ldr	r3, [pc, #168]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f0      	beq.n	80033f0 <HAL_RCC_OscConfig+0x41c>
 800340e:	e045      	b.n	800349c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003410:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <HAL_RCC_OscConfig+0x4dc>)
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7fd f8c3 	bl	80005a0 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341e:	f7fd f8bf 	bl	80005a0 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e036      	b.n	800349e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003430:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f0      	bne.n	800341e <HAL_RCC_OscConfig+0x44a>
 800343c:	e02e      	b.n	800349c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e029      	b.n	800349e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800344a:	4b18      	ldr	r3, [pc, #96]	; (80034ac <HAL_RCC_OscConfig+0x4d8>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	429a      	cmp	r2, r3
 800345c:	d11c      	bne.n	8003498 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d115      	bne.n	8003498 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003472:	4013      	ands	r3, r2
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003478:	4293      	cmp	r3, r2
 800347a:	d10d      	bne.n	8003498 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003486:	429a      	cmp	r2, r3
 8003488:	d106      	bne.n	8003498 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	40007000 	.word	0x40007000
 80034ac:	40023800 	.word	0x40023800
 80034b0:	42470060 	.word	0x42470060

080034b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0cc      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c8:	4b68      	ldr	r3, [pc, #416]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d90c      	bls.n	80034f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b65      	ldr	r3, [pc, #404]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b63      	ldr	r3, [pc, #396]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0b8      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d020      	beq.n	800353e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003508:	4b59      	ldr	r3, [pc, #356]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	4a58      	ldr	r2, [pc, #352]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 800350e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003512:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003520:	4b53      	ldr	r3, [pc, #332]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	4a52      	ldr	r2, [pc, #328]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800352a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800352c:	4b50      	ldr	r3, [pc, #320]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	494d      	ldr	r1, [pc, #308]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d044      	beq.n	80035d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d107      	bne.n	8003562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003552:	4b47      	ldr	r3, [pc, #284]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d119      	bne.n	8003592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e07f      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d003      	beq.n	8003572 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800356e:	2b03      	cmp	r3, #3
 8003570:	d107      	bne.n	8003582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003572:	4b3f      	ldr	r3, [pc, #252]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d109      	bne.n	8003592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e06f      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003582:	4b3b      	ldr	r3, [pc, #236]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e067      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003592:	4b37      	ldr	r3, [pc, #220]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f023 0203 	bic.w	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4934      	ldr	r1, [pc, #208]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035a4:	f7fc fffc 	bl	80005a0 <HAL_GetTick>
 80035a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035aa:	e00a      	b.n	80035c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ac:	f7fc fff8 	bl	80005a0 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e04f      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c2:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 020c 	and.w	r2, r3, #12
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d1eb      	bne.n	80035ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035d4:	4b25      	ldr	r3, [pc, #148]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d20c      	bcs.n	80035fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b22      	ldr	r3, [pc, #136]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b20      	ldr	r3, [pc, #128]	; (800366c <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e032      	b.n	8003662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d008      	beq.n	800361a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003608:	4b19      	ldr	r3, [pc, #100]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	4916      	ldr	r1, [pc, #88]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003626:	4b12      	ldr	r3, [pc, #72]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	490e      	ldr	r1, [pc, #56]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800363a:	f000 f821 	bl	8003680 <HAL_RCC_GetSysClockFreq>
 800363e:	4601      	mov	r1, r0
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <HAL_RCC_ClockConfig+0x1c0>)
 800364c:	5cd3      	ldrb	r3, [r2, r3]
 800364e:	fa21 f303 	lsr.w	r3, r1, r3
 8003652:	4a09      	ldr	r2, [pc, #36]	; (8003678 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003656:	4b09      	ldr	r3, [pc, #36]	; (800367c <HAL_RCC_ClockConfig+0x1c8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fc ff5c 	bl	8000518 <HAL_InitTick>

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40023c00 	.word	0x40023c00
 8003670:	40023800 	.word	0x40023800
 8003674:	080085dc 	.word	0x080085dc
 8003678:	20000028 	.word	0x20000028
 800367c:	20000000 	.word	0x20000000

08003680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	2300      	movs	r3, #0
 8003690:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003696:	4b63      	ldr	r3, [pc, #396]	; (8003824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 030c 	and.w	r3, r3, #12
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d007      	beq.n	80036b2 <HAL_RCC_GetSysClockFreq+0x32>
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d008      	beq.n	80036b8 <HAL_RCC_GetSysClockFreq+0x38>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f040 80b4 	bne.w	8003814 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036ac:	4b5e      	ldr	r3, [pc, #376]	; (8003828 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036ae:	60bb      	str	r3, [r7, #8]
       break;
 80036b0:	e0b3      	b.n	800381a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036b2:	4b5e      	ldr	r3, [pc, #376]	; (800382c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80036b4:	60bb      	str	r3, [r7, #8]
      break;
 80036b6:	e0b0      	b.n	800381a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036b8:	4b5a      	ldr	r3, [pc, #360]	; (8003824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036c2:	4b58      	ldr	r3, [pc, #352]	; (8003824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d04a      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ce:	4b55      	ldr	r3, [pc, #340]	; (8003824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	099b      	lsrs	r3, r3, #6
 80036d4:	f04f 0400 	mov.w	r4, #0
 80036d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	ea03 0501 	and.w	r5, r3, r1
 80036e4:	ea04 0602 	and.w	r6, r4, r2
 80036e8:	4629      	mov	r1, r5
 80036ea:	4632      	mov	r2, r6
 80036ec:	f04f 0300 	mov.w	r3, #0
 80036f0:	f04f 0400 	mov.w	r4, #0
 80036f4:	0154      	lsls	r4, r2, #5
 80036f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036fa:	014b      	lsls	r3, r1, #5
 80036fc:	4619      	mov	r1, r3
 80036fe:	4622      	mov	r2, r4
 8003700:	1b49      	subs	r1, r1, r5
 8003702:	eb62 0206 	sbc.w	r2, r2, r6
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	f04f 0400 	mov.w	r4, #0
 800370e:	0194      	lsls	r4, r2, #6
 8003710:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003714:	018b      	lsls	r3, r1, #6
 8003716:	1a5b      	subs	r3, r3, r1
 8003718:	eb64 0402 	sbc.w	r4, r4, r2
 800371c:	f04f 0100 	mov.w	r1, #0
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	00e2      	lsls	r2, r4, #3
 8003726:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800372a:	00d9      	lsls	r1, r3, #3
 800372c:	460b      	mov	r3, r1
 800372e:	4614      	mov	r4, r2
 8003730:	195b      	adds	r3, r3, r5
 8003732:	eb44 0406 	adc.w	r4, r4, r6
 8003736:	f04f 0100 	mov.w	r1, #0
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	0262      	lsls	r2, r4, #9
 8003740:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003744:	0259      	lsls	r1, r3, #9
 8003746:	460b      	mov	r3, r1
 8003748:	4614      	mov	r4, r2
 800374a:	4618      	mov	r0, r3
 800374c:	4621      	mov	r1, r4
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f04f 0400 	mov.w	r4, #0
 8003754:	461a      	mov	r2, r3
 8003756:	4623      	mov	r3, r4
 8003758:	f7fc fd3c 	bl	80001d4 <__aeabi_uldivmod>
 800375c:	4603      	mov	r3, r0
 800375e:	460c      	mov	r4, r1
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	e049      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003764:	4b2f      	ldr	r3, [pc, #188]	; (8003824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	099b      	lsrs	r3, r3, #6
 800376a:	f04f 0400 	mov.w	r4, #0
 800376e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	ea03 0501 	and.w	r5, r3, r1
 800377a:	ea04 0602 	and.w	r6, r4, r2
 800377e:	4629      	mov	r1, r5
 8003780:	4632      	mov	r2, r6
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	f04f 0400 	mov.w	r4, #0
 800378a:	0154      	lsls	r4, r2, #5
 800378c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003790:	014b      	lsls	r3, r1, #5
 8003792:	4619      	mov	r1, r3
 8003794:	4622      	mov	r2, r4
 8003796:	1b49      	subs	r1, r1, r5
 8003798:	eb62 0206 	sbc.w	r2, r2, r6
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	f04f 0400 	mov.w	r4, #0
 80037a4:	0194      	lsls	r4, r2, #6
 80037a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037aa:	018b      	lsls	r3, r1, #6
 80037ac:	1a5b      	subs	r3, r3, r1
 80037ae:	eb64 0402 	sbc.w	r4, r4, r2
 80037b2:	f04f 0100 	mov.w	r1, #0
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	00e2      	lsls	r2, r4, #3
 80037bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80037c0:	00d9      	lsls	r1, r3, #3
 80037c2:	460b      	mov	r3, r1
 80037c4:	4614      	mov	r4, r2
 80037c6:	195b      	adds	r3, r3, r5
 80037c8:	eb44 0406 	adc.w	r4, r4, r6
 80037cc:	f04f 0100 	mov.w	r1, #0
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	02a2      	lsls	r2, r4, #10
 80037d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037da:	0299      	lsls	r1, r3, #10
 80037dc:	460b      	mov	r3, r1
 80037de:	4614      	mov	r4, r2
 80037e0:	4618      	mov	r0, r3
 80037e2:	4621      	mov	r1, r4
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f04f 0400 	mov.w	r4, #0
 80037ea:	461a      	mov	r2, r3
 80037ec:	4623      	mov	r3, r4
 80037ee:	f7fc fcf1 	bl	80001d4 <__aeabi_uldivmod>
 80037f2:	4603      	mov	r3, r0
 80037f4:	460c      	mov	r4, r1
 80037f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037f8:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	0c1b      	lsrs	r3, r3, #16
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	3301      	adds	r3, #1
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003810:	60bb      	str	r3, [r7, #8]
      break;
 8003812:	e002      	b.n	800381a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003816:	60bb      	str	r3, [r7, #8]
      break;
 8003818:	bf00      	nop
    }
  }
  return sysclockfreq;
 800381a:	68bb      	ldr	r3, [r7, #8]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003824:	40023800 	.word	0x40023800
 8003828:	00f42400 	.word	0x00f42400
 800382c:	007a1200 	.word	0x007a1200

08003830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003834:	4b03      	ldr	r3, [pc, #12]	; (8003844 <HAL_RCC_GetHCLKFreq+0x14>)
 8003836:	681b      	ldr	r3, [r3, #0]
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000028 	.word	0x20000028

08003848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800384c:	f7ff fff0 	bl	8003830 <HAL_RCC_GetHCLKFreq>
 8003850:	4601      	mov	r1, r0
 8003852:	4b05      	ldr	r3, [pc, #20]	; (8003868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	0a9b      	lsrs	r3, r3, #10
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	4a03      	ldr	r2, [pc, #12]	; (800386c <HAL_RCC_GetPCLK1Freq+0x24>)
 800385e:	5cd3      	ldrb	r3, [r2, r3]
 8003860:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40023800 	.word	0x40023800
 800386c:	080085ec 	.word	0x080085ec

08003870 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d105      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003894:	2b00      	cmp	r3, #0
 8003896:	d035      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003898:	4b67      	ldr	r3, [pc, #412]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800389e:	f7fc fe7f 	bl	80005a0 <HAL_GetTick>
 80038a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038a4:	e008      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038a6:	f7fc fe7b 	bl	80005a0 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e0ba      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038b8:	4b60      	ldr	r3, [pc, #384]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1f0      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	019a      	lsls	r2, r3, #6
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	071b      	lsls	r3, r3, #28
 80038d0:	495a      	ldr	r1, [pc, #360]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038d8:	4b57      	ldr	r3, [pc, #348]	; (8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80038da:	2201      	movs	r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038de:	f7fc fe5f 	bl	80005a0 <HAL_GetTick>
 80038e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038e6:	f7fc fe5b 	bl	80005a0 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e09a      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038f8:	4b50      	ldr	r3, [pc, #320]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 8083 	beq.w	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	4b49      	ldr	r3, [pc, #292]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	4a48      	ldr	r2, [pc, #288]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800391c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003920:	6413      	str	r3, [r2, #64]	; 0x40
 8003922:	4b46      	ldr	r3, [pc, #280]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800392e:	4b44      	ldr	r3, [pc, #272]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a43      	ldr	r2, [pc, #268]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003938:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800393a:	f7fc fe31 	bl	80005a0 <HAL_GetTick>
 800393e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003942:	f7fc fe2d 	bl	80005a0 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e06c      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003954:	4b3a      	ldr	r3, [pc, #232]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003960:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003968:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d02f      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	429a      	cmp	r2, r3
 800397c:	d028      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800397e:	4b2f      	ldr	r3, [pc, #188]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003986:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003988:	4b2e      	ldr	r3, [pc, #184]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800398e:	4b2d      	ldr	r3, [pc, #180]	; (8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003994:	4a29      	ldr	r2, [pc, #164]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800399a:	4b28      	ldr	r3, [pc, #160]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d114      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80039a6:	f7fc fdfb 	bl	80005a0 <HAL_GetTick>
 80039aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ac:	e00a      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ae:	f7fc fdf7 	bl	80005a0 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039bc:	4293      	cmp	r3, r2
 80039be:	d901      	bls.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e034      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c4:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0ee      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039dc:	d10d      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80039de:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80039ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f2:	4912      	ldr	r1, [pc, #72]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]
 80039f8:	e005      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80039fa:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	4a0f      	ldr	r2, [pc, #60]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a00:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a04:	6093      	str	r3, [r2, #8]
 8003a06:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a08:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a12:	490a      	ldr	r1, [pc, #40]	; (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	7c1a      	ldrb	r2, [r3, #16]
 8003a28:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a2a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	42470068 	.word	0x42470068
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	40007000 	.word	0x40007000
 8003a44:	42470e40 	.word	0x42470e40
 8003a48:	424711e0 	.word	0x424711e0

08003a4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d13d      	bne.n	8003ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003a6a:	4b22      	ldr	r3, [pc, #136]	; (8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a72:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d12f      	bne.n	8003ade <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003a80:	617b      	str	r3, [r7, #20]
          break;
 8003a82:	e02f      	b.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a90:	d108      	bne.n	8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a92:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a9a:	4a18      	ldr	r2, [pc, #96]	; (8003afc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	e007      	b.n	8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003aa4:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aac:	4a14      	ldr	r2, [pc, #80]	; (8003b00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ab4:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aba:	099b      	lsrs	r3, r3, #6
 8003abc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ace:	0f1b      	lsrs	r3, r3, #28
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ada:	617b      	str	r3, [r7, #20]
          break;
 8003adc:	e002      	b.n	8003ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
          break;
 8003ae2:	bf00      	nop
        }
      }
      break;
 8003ae4:	bf00      	nop
    }
  }
  return frequency;
 8003ae6:	697b      	ldr	r3, [r7, #20]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	40023800 	.word	0x40023800
 8003af8:	00bb8000 	.word	0x00bb8000
 8003afc:	007a1200 	.word	0x007a1200
 8003b00:	00f42400 	.word	0x00f42400

08003b04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e056      	b.n	8003bc4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d106      	bne.n	8003b36 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f003 ff93 	bl	8007a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	ea42 0103 	orr.w	r1, r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	0c1b      	lsrs	r3, r3, #16
 8003b94:	f003 0104 	and.w	r1, r3, #4
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e01d      	b.n	8003c1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f003 ff7a 	bl	8007aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3304      	adds	r3, #4
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	f000 f9ee 	bl	8003fec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e01d      	b.n	8003c70 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d106      	bne.n	8003c4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f815 	bl	8003c78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2202      	movs	r2, #2
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4610      	mov	r0, r2
 8003c62:	f000 f9c3 	bl	8003fec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	6839      	ldr	r1, [r7, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fc4a 	bl	8004538 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a10      	ldr	r2, [pc, #64]	; (8003cec <HAL_TIM_PWM_Start+0x60>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d107      	bne.n	8003cbe <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b06      	cmp	r3, #6
 8003cce:	d007      	beq.n	8003ce0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40010000 	.word	0x40010000

08003cf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e0b4      	b.n	8003e74 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2202      	movs	r2, #2
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b0c      	cmp	r3, #12
 8003d1e:	f200 809f 	bhi.w	8003e60 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003d22:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d28:	08003d5d 	.word	0x08003d5d
 8003d2c:	08003e61 	.word	0x08003e61
 8003d30:	08003e61 	.word	0x08003e61
 8003d34:	08003e61 	.word	0x08003e61
 8003d38:	08003d9d 	.word	0x08003d9d
 8003d3c:	08003e61 	.word	0x08003e61
 8003d40:	08003e61 	.word	0x08003e61
 8003d44:	08003e61 	.word	0x08003e61
 8003d48:	08003ddf 	.word	0x08003ddf
 8003d4c:	08003e61 	.word	0x08003e61
 8003d50:	08003e61 	.word	0x08003e61
 8003d54:	08003e61 	.word	0x08003e61
 8003d58:	08003e1f 	.word	0x08003e1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f9c2 	bl	80040ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0208 	orr.w	r2, r2, #8
 8003d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 0204 	bic.w	r2, r2, #4
 8003d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6999      	ldr	r1, [r3, #24]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	619a      	str	r2, [r3, #24]
      break;
 8003d9a:	e062      	b.n	8003e62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68b9      	ldr	r1, [r7, #8]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fa08 	bl	80041b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699a      	ldr	r2, [r3, #24]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6999      	ldr	r1, [r3, #24]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	021a      	lsls	r2, r3, #8
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	619a      	str	r2, [r3, #24]
      break;
 8003ddc:	e041      	b.n	8003e62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 fa53 	bl	8004290 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f042 0208 	orr.w	r2, r2, #8
 8003df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0204 	bic.w	r2, r2, #4
 8003e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69d9      	ldr	r1, [r3, #28]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	61da      	str	r2, [r3, #28]
      break;
 8003e1c:	e021      	b.n	8003e62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f000 fa9d 	bl	8004364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69da      	ldr	r2, [r3, #28]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69d9      	ldr	r1, [r3, #28]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	021a      	lsls	r2, r3, #8
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	61da      	str	r2, [r3, #28]
      break;
 8003e5e:	e000      	b.n	8003e62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003e60:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_TIM_ConfigClockSource+0x18>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e0a6      	b.n	8003fe2 <HAL_TIM_ConfigClockSource+0x166>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003eb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b40      	cmp	r3, #64	; 0x40
 8003eca:	d067      	beq.n	8003f9c <HAL_TIM_ConfigClockSource+0x120>
 8003ecc:	2b40      	cmp	r3, #64	; 0x40
 8003ece:	d80b      	bhi.n	8003ee8 <HAL_TIM_ConfigClockSource+0x6c>
 8003ed0:	2b10      	cmp	r3, #16
 8003ed2:	d073      	beq.n	8003fbc <HAL_TIM_ConfigClockSource+0x140>
 8003ed4:	2b10      	cmp	r3, #16
 8003ed6:	d802      	bhi.n	8003ede <HAL_TIM_ConfigClockSource+0x62>
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d06f      	beq.n	8003fbc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003edc:	e078      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d06c      	beq.n	8003fbc <HAL_TIM_ConfigClockSource+0x140>
 8003ee2:	2b30      	cmp	r3, #48	; 0x30
 8003ee4:	d06a      	beq.n	8003fbc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003ee6:	e073      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ee8:	2b70      	cmp	r3, #112	; 0x70
 8003eea:	d00d      	beq.n	8003f08 <HAL_TIM_ConfigClockSource+0x8c>
 8003eec:	2b70      	cmp	r3, #112	; 0x70
 8003eee:	d804      	bhi.n	8003efa <HAL_TIM_ConfigClockSource+0x7e>
 8003ef0:	2b50      	cmp	r3, #80	; 0x50
 8003ef2:	d033      	beq.n	8003f5c <HAL_TIM_ConfigClockSource+0xe0>
 8003ef4:	2b60      	cmp	r3, #96	; 0x60
 8003ef6:	d041      	beq.n	8003f7c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003ef8:	e06a      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efe:	d066      	beq.n	8003fce <HAL_TIM_ConfigClockSource+0x152>
 8003f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f04:	d017      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003f06:	e063      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	6899      	ldr	r1, [r3, #8]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f000 faee 	bl	80044f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f2a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	609a      	str	r2, [r3, #8]
      break;
 8003f34:	e04c      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6899      	ldr	r1, [r3, #8]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f000 fad7 	bl	80044f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f58:	609a      	str	r2, [r3, #8]
      break;
 8003f5a:	e039      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	6859      	ldr	r1, [r3, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f000 fa4b 	bl	8004404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2150      	movs	r1, #80	; 0x50
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 faa4 	bl	80044c2 <TIM_ITRx_SetConfig>
      break;
 8003f7a:	e029      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6859      	ldr	r1, [r3, #4]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	f000 fa6a 	bl	8004462 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2160      	movs	r1, #96	; 0x60
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fa94 	bl	80044c2 <TIM_ITRx_SetConfig>
      break;
 8003f9a:	e019      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	6859      	ldr	r1, [r3, #4]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	f000 fa2b 	bl	8004404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2140      	movs	r1, #64	; 0x40
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fa84 	bl	80044c2 <TIM_ITRx_SetConfig>
      break;
 8003fba:	e009      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f000 fa7b 	bl	80044c2 <TIM_ITRx_SetConfig>
      break;
 8003fcc:	e000      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003fce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a34      	ldr	r2, [pc, #208]	; (80040d0 <TIM_Base_SetConfig+0xe4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00f      	beq.n	8004024 <TIM_Base_SetConfig+0x38>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400a:	d00b      	beq.n	8004024 <TIM_Base_SetConfig+0x38>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a31      	ldr	r2, [pc, #196]	; (80040d4 <TIM_Base_SetConfig+0xe8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d007      	beq.n	8004024 <TIM_Base_SetConfig+0x38>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a30      	ldr	r2, [pc, #192]	; (80040d8 <TIM_Base_SetConfig+0xec>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_Base_SetConfig+0x38>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a2f      	ldr	r2, [pc, #188]	; (80040dc <TIM_Base_SetConfig+0xf0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d108      	bne.n	8004036 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a25      	ldr	r2, [pc, #148]	; (80040d0 <TIM_Base_SetConfig+0xe4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01b      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004044:	d017      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a22      	ldr	r2, [pc, #136]	; (80040d4 <TIM_Base_SetConfig+0xe8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a21      	ldr	r2, [pc, #132]	; (80040d8 <TIM_Base_SetConfig+0xec>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00f      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a20      	ldr	r2, [pc, #128]	; (80040dc <TIM_Base_SetConfig+0xf0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00b      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a1f      	ldr	r2, [pc, #124]	; (80040e0 <TIM_Base_SetConfig+0xf4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d007      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <TIM_Base_SetConfig+0xf8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d003      	beq.n	8004076 <TIM_Base_SetConfig+0x8a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <TIM_Base_SetConfig+0xfc>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d108      	bne.n	8004088 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a08      	ldr	r2, [pc, #32]	; (80040d0 <TIM_Base_SetConfig+0xe4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d103      	bne.n	80040bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	615a      	str	r2, [r3, #20]
}
 80040c2:	bf00      	nop
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40010000 	.word	0x40010000
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000800 	.word	0x40000800
 80040dc:	40000c00 	.word	0x40000c00
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40014400 	.word	0x40014400
 80040e8:	40014800 	.word	0x40014800

080040ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0303 	bic.w	r3, r3, #3
 8004122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f023 0302 	bic.w	r3, r3, #2
 8004134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a1c      	ldr	r2, [pc, #112]	; (80041b4 <TIM_OC1_SetConfig+0xc8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d10c      	bne.n	8004162 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0308 	bic.w	r3, r3, #8
 800414e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f023 0304 	bic.w	r3, r3, #4
 8004160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <TIM_OC1_SetConfig+0xc8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d111      	bne.n	800418e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	621a      	str	r2, [r3, #32]
}
 80041a8:	bf00      	nop
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	40010000 	.word	0x40010000

080041b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f023 0210 	bic.w	r2, r3, #16
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	021b      	lsls	r3, r3, #8
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f023 0320 	bic.w	r3, r3, #32
 8004202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a1e      	ldr	r2, [pc, #120]	; (800428c <TIM_OC2_SetConfig+0xd4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d10d      	bne.n	8004234 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800421e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004232:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a15      	ldr	r2, [pc, #84]	; (800428c <TIM_OC2_SetConfig+0xd4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d113      	bne.n	8004264 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800424a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	621a      	str	r2, [r3, #32]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40010000 	.word	0x40010000

08004290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a1d      	ldr	r2, [pc, #116]	; (8004360 <TIM_OC3_SetConfig+0xd0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d10d      	bne.n	800430a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	021b      	lsls	r3, r3, #8
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a14      	ldr	r2, [pc, #80]	; (8004360 <TIM_OC3_SetConfig+0xd0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d113      	bne.n	800433a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	40010000 	.word	0x40010000

08004364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800439a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	031b      	lsls	r3, r3, #12
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a10      	ldr	r2, [pc, #64]	; (8004400 <TIM_OC4_SetConfig+0x9c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d109      	bne.n	80043d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	019b      	lsls	r3, r3, #6
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40010000 	.word	0x40010000

08004404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f023 0201 	bic.w	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800442e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f023 030a 	bic.w	r3, r3, #10
 8004440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004462:	b480      	push	{r7}
 8004464:	b087      	sub	sp, #28
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f023 0210 	bic.w	r2, r3, #16
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800448c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	031b      	lsls	r3, r3, #12
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800449e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	f043 0307 	orr.w	r3, r3, #7
 80044e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	609a      	str	r2, [r3, #8]
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004512:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	021a      	lsls	r2, r3, #8
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	431a      	orrs	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4313      	orrs	r3, r2
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	609a      	str	r2, [r3, #8]
}
 800452c:	bf00      	nop
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	2201      	movs	r2, #1
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a1a      	ldr	r2, [r3, #32]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	43db      	mvns	r3, r3
 800455a:	401a      	ands	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 031f 	and.w	r3, r3, #31
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	fa01 f303 	lsl.w	r3, r1, r3
 8004570:	431a      	orrs	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
	...

08004584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004594:	2b01      	cmp	r3, #1
 8004596:	d101      	bne.n	800459c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004598:	2302      	movs	r3, #2
 800459a:	e050      	b.n	800463e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a1c      	ldr	r2, [pc, #112]	; (800464c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d018      	beq.n	8004612 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e8:	d013      	beq.n	8004612 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a18      	ldr	r2, [pc, #96]	; (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d00e      	beq.n	8004612 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a16      	ldr	r2, [pc, #88]	; (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d009      	beq.n	8004612 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a15      	ldr	r2, [pc, #84]	; (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d004      	beq.n	8004612 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a13      	ldr	r2, [pc, #76]	; (800465c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d10c      	bne.n	800462c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004618:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	4313      	orrs	r3, r2
 8004622:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	40010000 	.word	0x40010000
 8004650:	40000400 	.word	0x40000400
 8004654:	40000800 	.word	0x40000800
 8004658:	40000c00 	.word	0x40000c00
 800465c:	40014000 	.word	0x40014000

08004660 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004678:	2302      	movs	r3, #2
 800467a:	e03d      	b.n	80046f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	4313      	orrs	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004704:	b084      	sub	sp, #16
 8004706:	b580      	push	{r7, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	f107 001c 	add.w	r0, r7, #28
 8004712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	2b01      	cmp	r3, #1
 800471a:	d122      	bne.n	8004762 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004746:	2b01      	cmp	r3, #1
 8004748:	d105      	bne.n	8004756 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f94a 	bl	80049f0 <USB_CoreReset>
 800475c:	4603      	mov	r3, r0
 800475e:	73fb      	strb	r3, [r7, #15]
 8004760:	e01a      	b.n	8004798 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f93e 	bl	80049f0 <USB_CoreReset>
 8004774:	4603      	mov	r3, r0
 8004776:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	639a      	str	r2, [r3, #56]	; 0x38
 800478a:	e005      	b.n	8004798 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	2b01      	cmp	r3, #1
 800479c:	d10b      	bne.n	80047b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f043 0206 	orr.w	r2, r3, #6
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f043 0220 	orr.w	r2, r3, #32
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047c2:	b004      	add	sp, #16
 80047c4:	4770      	bx	lr

080047c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f043 0201 	orr.w	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f023 0201 	bic.w	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	460b      	mov	r3, r1
 8004814:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d106      	bne.n	8004836 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	60da      	str	r2, [r3, #12]
 8004834:	e00b      	b.n	800484e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004836:	78fb      	ldrb	r3, [r7, #3]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d106      	bne.n	800484a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	60da      	str	r2, [r3, #12]
 8004848:	e001      	b.n	800484e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e003      	b.n	8004856 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800484e:	2032      	movs	r0, #50	; 0x32
 8004850:	f7fb feb2 	bl	80005b8 <HAL_Delay>

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
	...

08004860 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	019b      	lsls	r3, r3, #6
 8004872:	f043 0220 	orr.w	r2, r3, #32
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3301      	adds	r3, #1
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4a09      	ldr	r2, [pc, #36]	; (80048a8 <USB_FlushTxFifo+0x48>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d901      	bls.n	800488c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e006      	b.n	800489a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b20      	cmp	r3, #32
 8004896:	d0f0      	beq.n	800487a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	00030d40 	.word	0x00030d40

080048ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2210      	movs	r2, #16
 80048bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3301      	adds	r3, #1
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4a09      	ldr	r2, [pc, #36]	; (80048ec <USB_FlushRxFifo+0x40>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d901      	bls.n	80048d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e006      	b.n	80048de <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f003 0310 	and.w	r3, r3, #16
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d0f0      	beq.n	80048be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	00030d40 	.word	0x00030d40

080048f0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b089      	sub	sp, #36	; 0x24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	4611      	mov	r1, r2
 80048fc:	461a      	mov	r2, r3
 80048fe:	460b      	mov	r3, r1
 8004900:	71fb      	strb	r3, [r7, #7]
 8004902:	4613      	mov	r3, r2
 8004904:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800490e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004912:	2b00      	cmp	r3, #0
 8004914:	d11a      	bne.n	800494c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004916:	88bb      	ldrh	r3, [r7, #4]
 8004918:	3303      	adds	r3, #3
 800491a:	089b      	lsrs	r3, r3, #2
 800491c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800491e:	2300      	movs	r3, #0
 8004920:	61bb      	str	r3, [r7, #24]
 8004922:	e00f      	b.n	8004944 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	031a      	lsls	r2, r3, #12
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	4413      	add	r3, r2
 800492c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004930:	461a      	mov	r2, r3
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	3304      	adds	r3, #4
 800493c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	3301      	adds	r3, #1
 8004942:	61bb      	str	r3, [r7, #24]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	429a      	cmp	r2, r3
 800494a:	d3eb      	bcc.n	8004924 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3724      	adds	r7, #36	; 0x24
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800495a:	b480      	push	{r7}
 800495c:	b089      	sub	sp, #36	; 0x24
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	4613      	mov	r3, r2
 8004966:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	3303      	adds	r3, #3
 8004974:	089b      	lsrs	r3, r3, #2
 8004976:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004978:	2300      	movs	r3, #0
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	e00b      	b.n	8004996 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	601a      	str	r2, [r3, #0]
    pDest++;
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	3304      	adds	r3, #4
 800498e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	3301      	adds	r3, #1
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	429a      	cmp	r2, r3
 800499c:	d3ef      	bcc.n	800497e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800499e:	69fb      	ldr	r3, [r7, #28]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3724      	adds	r7, #36	; 0x24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4013      	ands	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049c4:	68fb      	ldr	r3, [r7, #12]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0301 	and.w	r3, r3, #1
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
	...

080049f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3301      	adds	r3, #1
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4a13      	ldr	r2, [pc, #76]	; (8004a54 <USB_CoreReset+0x64>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e01b      	b.n	8004a46 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	daf2      	bge.n	80049fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f043 0201 	orr.w	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	60fb      	str	r3, [r7, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4a09      	ldr	r2, [pc, #36]	; (8004a54 <USB_CoreReset+0x64>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d901      	bls.n	8004a38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e006      	b.n	8004a46 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d0f0      	beq.n	8004a26 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	00030d40 	.word	0x00030d40

08004a58 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a58:	b084      	sub	sp, #16
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	f107 001c 	add.w	r0, r7, #28
 8004a66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a74:	461a      	mov	r2, r3
 8004a76:	2300      	movs	r3, #0
 8004a78:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d018      	beq.n	8004adc <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d10a      	bne.n	8004ac6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004abe:	f043 0304 	orr.w	r3, r3, #4
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	e014      	b.n	8004af0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ad4:	f023 0304 	bic.w	r3, r3, #4
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e009      	b.n	8004af0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004aea:	f023 0304 	bic.w	r3, r3, #4
 8004aee:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004af0:	2110      	movs	r1, #16
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff feb4 	bl	8004860 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff fed7 	bl	80048ac <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	e015      	b.n	8004b30 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b10:	461a      	mov	r2, r3
 8004b12:	f04f 33ff 	mov.w	r3, #4294967295
 8004b16:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b24:	461a      	mov	r2, r3
 8004b26:	2300      	movs	r3, #0
 8004b28:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	6a3b      	ldr	r3, [r7, #32]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d3e5      	bcc.n	8004b04 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004b38:	2101      	movs	r1, #1
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f8ac 	bl	8004c98 <USB_DriveVbus>

  HAL_Delay(200U);
 8004b40:	20c8      	movs	r0, #200	; 0xc8
 8004b42:	f7fb fd39 	bl	80005b8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b52:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00b      	beq.n	8004b78 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a14      	ldr	r2, [pc, #80]	; (8004bbc <USB_HostInit+0x164>)
 8004b6c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a13      	ldr	r2, [pc, #76]	; (8004bc0 <USB_HostInit+0x168>)
 8004b72:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b76:	e009      	b.n	8004b8c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2280      	movs	r2, #128	; 0x80
 8004b7c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a10      	ldr	r2, [pc, #64]	; (8004bc4 <USB_HostInit+0x16c>)
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a10      	ldr	r2, [pc, #64]	; (8004bc8 <USB_HostInit+0x170>)
 8004b88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d105      	bne.n	8004b9e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	f043 0210 	orr.w	r2, r3, #16
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699a      	ldr	r2, [r3, #24]
 8004ba2:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <USB_HostInit+0x174>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bb6:	b004      	add	sp, #16
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	01000200 	.word	0x01000200
 8004bc0:	00e00300 	.word	0x00e00300
 8004bc4:	00600080 	.word	0x00600080
 8004bc8:	004000e0 	.word	0x004000e0
 8004bcc:	a3200008 	.word	0xa3200008

08004bd0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bee:	f023 0303 	bic.w	r3, r3, #3
 8004bf2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	68f9      	ldr	r1, [r7, #12]
 8004c04:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004c0c:	78fb      	ldrb	r3, [r7, #3]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d107      	bne.n	8004c22 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c18:	461a      	mov	r2, r3
 8004c1a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004c1e:	6053      	str	r3, [r2, #4]
 8004c20:	e009      	b.n	8004c36 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d106      	bne.n	8004c36 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f241 7370 	movw	r3, #6000	; 0x1770
 8004c34:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c64:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c72:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004c74:	2064      	movs	r0, #100	; 0x64
 8004c76:	f7fb fc9f 	bl	80005b8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c86:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004c88:	200a      	movs	r0, #10
 8004c8a:	f7fb fc95 	bl	80005b8 <HAL_Delay>

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004cbc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d109      	bne.n	8004cdc <USB_DriveVbus+0x44>
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d106      	bne.n	8004cdc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cda:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce6:	d109      	bne.n	8004cfc <USB_DriveVbus+0x64>
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004cf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cfa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	0c5b      	lsrs	r3, r3, #17
 8004d28:	f003 0303 	and.w	r3, r3, #3
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	b29b      	uxth	r3, r3
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b087      	sub	sp, #28
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	4608      	mov	r0, r1
 8004d66:	4611      	mov	r1, r2
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	70fb      	strb	r3, [r7, #3]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	70bb      	strb	r3, [r7, #2]
 8004d72:	4613      	mov	r3, r2
 8004d74:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d76:	2300      	movs	r3, #0
 8004d78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d90:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d87e      	bhi.n	8004e98 <USB_HC_Init+0x13c>
 8004d9a:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <USB_HC_Init+0x44>)
 8004d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da0:	08004db1 	.word	0x08004db1
 8004da4:	08004e5b 	.word	0x08004e5b
 8004da8:	08004db1 	.word	0x08004db1
 8004dac:	08004e1d 	.word	0x08004e1d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	f240 439d 	movw	r3, #1181	; 0x49d
 8004dc2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004dc4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	da10      	bge.n	8004dee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	78fa      	ldrb	r2, [r7, #3]
 8004ddc:	0151      	lsls	r1, r2, #5
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	440a      	add	r2, r1
 8004de2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dea:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004dec:	e057      	b.n	8004e9e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d051      	beq.n	8004e9e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004dfa:	78fb      	ldrb	r3, [r7, #3]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	78fa      	ldrb	r2, [r7, #3]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e18:	60d3      	str	r3, [r2, #12]
      break;
 8004e1a:	e040      	b.n	8004e9e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f240 639d 	movw	r3, #1693	; 0x69d
 8004e2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	da34      	bge.n	8004ea2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e56:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004e58:	e023      	b.n	8004ea2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e66:	461a      	mov	r2, r3
 8004e68:	f240 2325 	movw	r3, #549	; 0x225
 8004e6c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e6e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	da17      	bge.n	8004ea6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004e76:	78fb      	ldrb	r3, [r7, #3]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	78fa      	ldrb	r2, [r7, #3]
 8004e86:	0151      	lsls	r1, r2, #5
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	440a      	add	r2, r1
 8004e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e90:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004e94:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004e96:	e006      	b.n	8004ea6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e9c:	e004      	b.n	8004ea8 <USB_HC_Init+0x14c>
      break;
 8004e9e:	bf00      	nop
 8004ea0:	e002      	b.n	8004ea8 <USB_HC_Init+0x14c>
      break;
 8004ea2:	bf00      	nop
 8004ea4:	e000      	b.n	8004ea8 <USB_HC_Init+0x14c>
      break;
 8004ea6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	78fb      	ldrb	r3, [r7, #3]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004ed2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	da03      	bge.n	8004ee2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	e001      	b.n	8004ee6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004ee6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d103      	bne.n	8004ef6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004eee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	e001      	b.n	8004efa <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004efa:	787b      	ldrb	r3, [r7, #1]
 8004efc:	059b      	lsls	r3, r3, #22
 8004efe:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f02:	78bb      	ldrb	r3, [r7, #2]
 8004f04:	02db      	lsls	r3, r3, #11
 8004f06:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f0a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f10:	049b      	lsls	r3, r3, #18
 8004f12:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f16:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f1e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	0159      	lsls	r1, r3, #5
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	440b      	add	r3, r1
 8004f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f30:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f36:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004f38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d10f      	bne.n	8004f60 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	0151      	lsls	r1, r2, #5
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	440a      	add	r2, r1
 8004f56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f5e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop

08004f70 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08c      	sub	sp, #48	; 0x30
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	785b      	ldrb	r3, [r3, #1]
 8004f86:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004f88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f8c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d028      	beq.n	8004fec <USB_HC_StartXfer+0x7c>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	791b      	ldrb	r3, [r3, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d124      	bne.n	8004fec <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004fa2:	79fb      	ldrb	r3, [r7, #7]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10b      	bne.n	8004fc0 <USB_HC_StartXfer+0x50>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	795b      	ldrb	r3, [r3, #5]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d107      	bne.n	8004fc0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	785b      	ldrb	r3, [r3, #1]
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f000 fa2e 	bl	8005418 <USB_DoPing>
      return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e112      	b.n	80051e6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d112      	bne.n	8004fec <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	69fa      	ldr	r2, [r7, #28]
 8004fd6:	0151      	lsls	r1, r2, #5
 8004fd8:	6a3a      	ldr	r2, [r7, #32]
 8004fda:	440a      	add	r2, r1
 8004fdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004fe0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004fe4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d018      	beq.n	8005026 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	8912      	ldrh	r2, [r2, #8]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	3b01      	subs	r3, #1
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	8912      	ldrh	r2, [r2, #8]
 8005004:	fbb3 f3f2 	udiv	r3, r3, r2
 8005008:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800500a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800500c:	8b7b      	ldrh	r3, [r7, #26]
 800500e:	429a      	cmp	r2, r3
 8005010:	d90b      	bls.n	800502a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005012:	8b7b      	ldrh	r3, [r7, #26]
 8005014:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005016:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	8912      	ldrh	r2, [r2, #8]
 800501c:	fb02 f203 	mul.w	r2, r2, r3
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	611a      	str	r2, [r3, #16]
 8005024:	e001      	b.n	800502a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005026:	2301      	movs	r3, #1
 8005028:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	78db      	ldrb	r3, [r3, #3]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d006      	beq.n	8005040 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005032:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	8912      	ldrh	r2, [r2, #8]
 8005038:	fb02 f203 	mul.w	r2, r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005048:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800504a:	04d9      	lsls	r1, r3, #19
 800504c:	4b68      	ldr	r3, [pc, #416]	; (80051f0 <USB_HC_StartXfer+0x280>)
 800504e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005050:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	7a9b      	ldrb	r3, [r3, #10]
 8005056:	075b      	lsls	r3, r3, #29
 8005058:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800505c:	69f9      	ldr	r1, [r7, #28]
 800505e:	0148      	lsls	r0, r1, #5
 8005060:	6a39      	ldr	r1, [r7, #32]
 8005062:	4401      	add	r1, r0
 8005064:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005068:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800506a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	68d9      	ldr	r1, [r3, #12]
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	015a      	lsls	r2, r3, #5
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	4413      	add	r3, r2
 800507e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005082:	460a      	mov	r2, r1
 8005084:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005086:	6a3b      	ldr	r3, [r7, #32]
 8005088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	bf0c      	ite	eq
 8005096:	2301      	moveq	r3, #1
 8005098:	2300      	movne	r3, #0
 800509a:	b2db      	uxtb	r3, r3
 800509c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69fa      	ldr	r2, [r7, #28]
 80050ae:	0151      	lsls	r1, r2, #5
 80050b0:	6a3a      	ldr	r2, [r7, #32]
 80050b2:	440a      	add	r2, r1
 80050b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050bc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	7e7b      	ldrb	r3, [r7, #25]
 80050ce:	075b      	lsls	r3, r3, #29
 80050d0:	69f9      	ldr	r1, [r7, #28]
 80050d2:	0148      	lsls	r0, r1, #5
 80050d4:	6a39      	ldr	r1, [r7, #32]
 80050d6:	4401      	add	r1, r0
 80050d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80050dc:	4313      	orrs	r3, r2
 80050de:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a41      	ldr	r2, [pc, #260]	; (80051f4 <USB_HC_StartXfer+0x284>)
 80050f0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050f2:	4b40      	ldr	r3, [pc, #256]	; (80051f4 <USB_HC_StartXfer+0x284>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050fa:	4a3e      	ldr	r2, [pc, #248]	; (80051f4 <USB_HC_StartXfer+0x284>)
 80050fc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	78db      	ldrb	r3, [r3, #3]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d006      	beq.n	8005114 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005106:	4b3b      	ldr	r3, [pc, #236]	; (80051f4 <USB_HC_StartXfer+0x284>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800510e:	4a39      	ldr	r2, [pc, #228]	; (80051f4 <USB_HC_StartXfer+0x284>)
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	e005      	b.n	8005120 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005114:	4b37      	ldr	r3, [pc, #220]	; (80051f4 <USB_HC_StartXfer+0x284>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800511c:	4a35      	ldr	r2, [pc, #212]	; (80051f4 <USB_HC_StartXfer+0x284>)
 800511e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005120:	4b34      	ldr	r3, [pc, #208]	; (80051f4 <USB_HC_StartXfer+0x284>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005128:	4a32      	ldr	r2, [pc, #200]	; (80051f4 <USB_HC_StartXfer+0x284>)
 800512a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	4413      	add	r3, r2
 8005134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005138:	461a      	mov	r2, r3
 800513a:	4b2e      	ldr	r3, [pc, #184]	; (80051f4 <USB_HC_StartXfer+0x284>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005140:	79fb      	ldrb	r3, [r7, #7]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d14e      	bne.n	80051e4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	78db      	ldrb	r3, [r3, #3]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d14a      	bne.n	80051e4 <USB_HC_StartXfer+0x274>
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d046      	beq.n	80051e4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	79db      	ldrb	r3, [r3, #7]
 800515a:	2b03      	cmp	r3, #3
 800515c:	d830      	bhi.n	80051c0 <USB_HC_StartXfer+0x250>
 800515e:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <USB_HC_StartXfer+0x1f4>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	08005175 	.word	0x08005175
 8005168:	08005199 	.word	0x08005199
 800516c:	08005175 	.word	0x08005175
 8005170:	08005199 	.word	0x08005199
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	3303      	adds	r3, #3
 800517a:	089b      	lsrs	r3, r3, #2
 800517c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800517e:	8afa      	ldrh	r2, [r7, #22]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005184:	b29b      	uxth	r3, r3
 8005186:	429a      	cmp	r2, r3
 8005188:	d91c      	bls.n	80051c4 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	f043 0220 	orr.w	r2, r3, #32
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	619a      	str	r2, [r3, #24]
          }
          break;
 8005196:	e015      	b.n	80051c4 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	3303      	adds	r3, #3
 800519e:	089b      	lsrs	r3, r3, #2
 80051a0:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80051a2:	8afa      	ldrh	r2, [r7, #22]
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d90a      	bls.n	80051c8 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	619a      	str	r2, [r3, #24]
          }
          break;
 80051be:	e003      	b.n	80051c8 <USB_HC_StartXfer+0x258>

        default:
          break;
 80051c0:	bf00      	nop
 80051c2:	e002      	b.n	80051ca <USB_HC_StartXfer+0x25a>
          break;
 80051c4:	bf00      	nop
 80051c6:	e000      	b.n	80051ca <USB_HC_StartXfer+0x25a>
          break;
 80051c8:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	68d9      	ldr	r1, [r3, #12]
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	785a      	ldrb	r2, [r3, #1]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	b298      	uxth	r0, r3
 80051d8:	2300      	movs	r3, #0
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	4603      	mov	r3, r0
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7ff fb86 	bl	80048f0 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3728      	adds	r7, #40	; 0x28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	1ff80000 	.word	0x1ff80000
 80051f4:	200000ac 	.word	0x200000ac

080051f8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	b29b      	uxth	r3, r3
}
 800520e:	4618      	mov	r0, r3
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800521a:	b480      	push	{r7}
 800521c:	b087      	sub	sp, #28
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800522a:	78fb      	ldrb	r3, [r7, #3]
 800522c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	4413      	add	r3, r2
 800523a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	0c9b      	lsrs	r3, r3, #18
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <USB_HC_Halt+0x3a>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d16c      	bne.n	800532e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4413      	add	r3, r2
 800525c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	0151      	lsls	r1, r2, #5
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	440a      	add	r2, r1
 800526a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800526e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005272:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d143      	bne.n	8005308 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	4413      	add	r3, r2
 8005288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	0151      	lsls	r1, r2, #5
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	440a      	add	r2, r1
 8005296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800529a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800529e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	0151      	lsls	r1, r2, #5
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	440a      	add	r2, r1
 80052d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052de:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	3301      	adds	r3, #1
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052ec:	d81d      	bhi.n	800532a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005300:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005304:	d0ec      	beq.n	80052e0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005306:	e080      	b.n	800540a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	4413      	add	r3, r2
 8005310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	0151      	lsls	r1, r2, #5
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	440a      	add	r2, r1
 800531e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005322:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005326:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005328:	e06f      	b.n	800540a <USB_HC_Halt+0x1f0>
          break;
 800532a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800532c:	e06d      	b.n	800540a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	4413      	add	r3, r2
 8005336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	0151      	lsls	r1, r2, #5
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	440a      	add	r2, r1
 8005344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005348:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800534c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d143      	bne.n	80053e6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4413      	add	r3, r2
 8005366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	0151      	lsls	r1, r2, #5
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	440a      	add	r2, r1
 8005374:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800537c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4413      	add	r3, r2
 8005386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	0151      	lsls	r1, r2, #5
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	440a      	add	r2, r1
 8005394:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005398:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800539c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053bc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	3301      	adds	r3, #1
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ca:	d81d      	bhi.n	8005408 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053e2:	d0ec      	beq.n	80053be <USB_HC_Halt+0x1a4>
 80053e4:	e011      	b.n	800540a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	0151      	lsls	r1, r2, #5
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	440a      	add	r2, r1
 80053fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005400:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e000      	b.n	800540a <USB_HC_Halt+0x1f0>
          break;
 8005408:	bf00      	nop
    }
  }

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800542c:	2301      	movs	r3, #1
 800542e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	04da      	lsls	r2, r3, #19
 8005434:	4b15      	ldr	r3, [pc, #84]	; (800548c <USB_DoPing+0x74>)
 8005436:	4013      	ands	r3, r2
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	0151      	lsls	r1, r2, #5
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	440a      	add	r2, r1
 8005440:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005444:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005448:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	4413      	add	r3, r2
 8005452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005460:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005468:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	4413      	add	r3, r2
 8005472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005476:	461a      	mov	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	1ff80000 	.word	0x1ff80000

08005490 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff f9a1 	bl	80047e8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80054a6:	2110      	movs	r1, #16
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff f9d9 	bl	8004860 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff f9fc 	bl	80048ac <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80054b4:	2300      	movs	r3, #0
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	e01f      	b.n	80054fa <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054d8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054e0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ee:	461a      	mov	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	3301      	adds	r3, #1
 80054f8:	613b      	str	r3, [r7, #16]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2b0f      	cmp	r3, #15
 80054fe:	d9dc      	bls.n	80054ba <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005500:	2300      	movs	r3, #0
 8005502:	613b      	str	r3, [r7, #16]
 8005504:	e034      	b.n	8005570 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	4413      	add	r3, r2
 800550e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800551c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005524:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800552c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4413      	add	r3, r2
 8005536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553a:	461a      	mov	r2, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	3301      	adds	r3, #1
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800554c:	d80c      	bhi.n	8005568 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	015a      	lsls	r2, r3, #5
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005564:	d0ec      	beq.n	8005540 <USB_StopHost+0xb0>
 8005566:	e000      	b.n	800556a <USB_StopHost+0xda>
        break;
 8005568:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	3301      	adds	r3, #1
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	2b0f      	cmp	r3, #15
 8005574:	d9c7      	bls.n	8005506 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800557c:	461a      	mov	r2, r3
 800557e:	f04f 33ff 	mov.w	r3, #4294967295
 8005582:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f04f 32ff 	mov.w	r2, #4294967295
 800558a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff f91a 	bl	80047c6 <USB_EnableGlobalInt>

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800559c:	b590      	push	{r4, r7, lr}
 800559e:	b089      	sub	sp, #36	; 0x24
 80055a0:	af04      	add	r7, sp, #16
 80055a2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80055a4:	2302      	movs	r3, #2
 80055a6:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80055a8:	2301      	movs	r3, #1
 80055aa:	2202      	movs	r2, #2
 80055ac:	2102      	movs	r1, #2
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 fc3a 	bl	8005e28 <USBH_FindInterface>
 80055b4:	4603      	mov	r3, r0
 80055b6:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80055b8:	7bbb      	ldrb	r3, [r7, #14]
 80055ba:	2bff      	cmp	r3, #255	; 0xff
 80055bc:	f000 812a 	beq.w	8005814 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80055c0:	7bbb      	ldrb	r3, [r7, #14]
 80055c2:	4619      	mov	r1, r3
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fc13 	bl	8005df0 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80055d0:	2050      	movs	r0, #80	; 0x50
 80055d2:	f002 ff23 	bl	800841c <malloc>
 80055d6:	4603      	mov	r3, r0
 80055d8:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80055e4:	7bbb      	ldrb	r3, [r7, #14]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	211a      	movs	r1, #26
 80055ea:	fb01 f303 	mul.w	r3, r1, r3
 80055ee:	4413      	add	r3, r2
 80055f0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	b25b      	sxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	da15      	bge.n	8005628 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80055fc:	7bbb      	ldrb	r3, [r7, #14]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	211a      	movs	r1, #26
 8005602:	fb01 f303 	mul.w	r3, r1, r3
 8005606:	4413      	add	r3, r2
 8005608:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800560c:	781a      	ldrb	r2, [r3, #0]
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005612:	7bbb      	ldrb	r3, [r7, #14]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	211a      	movs	r1, #26
 8005618:	fb01 f303 	mul.w	r3, r1, r3
 800561c:	4413      	add	r3, r2
 800561e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005622:	881a      	ldrh	r2, [r3, #0]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	785b      	ldrb	r3, [r3, #1]
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f001 fd21 	bl	8007076 <USBH_AllocPipe>
 8005634:	4603      	mov	r3, r0
 8005636:	461a      	mov	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	7819      	ldrb	r1, [r3, #0]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	7858      	ldrb	r0, [r3, #1]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	8952      	ldrh	r2, [r2, #10]
 8005654:	9202      	str	r2, [sp, #8]
 8005656:	2203      	movs	r2, #3
 8005658:	9201      	str	r2, [sp, #4]
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	4623      	mov	r3, r4
 800565e:	4602      	mov	r2, r0
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f001 fcd9 	bl	8007018 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2200      	movs	r2, #0
 800566c:	4619      	mov	r1, r3
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f002 fdfa 	bl	8008268 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005674:	2300      	movs	r3, #0
 8005676:	2200      	movs	r2, #0
 8005678:	210a      	movs	r1, #10
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fbd4 	bl	8005e28 <USBH_FindInterface>
 8005680:	4603      	mov	r3, r0
 8005682:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005684:	7bbb      	ldrb	r3, [r7, #14]
 8005686:	2bff      	cmp	r3, #255	; 0xff
 8005688:	f000 80c4 	beq.w	8005814 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800568c:	7bbb      	ldrb	r3, [r7, #14]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	211a      	movs	r1, #26
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	4413      	add	r3, r2
 8005698:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	b25b      	sxtb	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	da16      	bge.n	80056d2 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056a4:	7bbb      	ldrb	r3, [r7, #14]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	211a      	movs	r1, #26
 80056aa:	fb01 f303 	mul.w	r3, r1, r3
 80056ae:	4413      	add	r3, r2
 80056b0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80056b4:	781a      	ldrb	r2, [r3, #0]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056ba:	7bbb      	ldrb	r3, [r7, #14]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	211a      	movs	r1, #26
 80056c0:	fb01 f303 	mul.w	r3, r1, r3
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80056ca:	881a      	ldrh	r2, [r3, #0]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	835a      	strh	r2, [r3, #26]
 80056d0:	e015      	b.n	80056fe <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056d2:	7bbb      	ldrb	r3, [r7, #14]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	211a      	movs	r1, #26
 80056d8:	fb01 f303 	mul.w	r3, r1, r3
 80056dc:	4413      	add	r3, r2
 80056de:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80056e2:	781a      	ldrb	r2, [r3, #0]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056e8:	7bbb      	ldrb	r3, [r7, #14]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	211a      	movs	r1, #26
 80056ee:	fb01 f303 	mul.w	r3, r1, r3
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80056f8:	881a      	ldrh	r2, [r3, #0]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80056fe:	7bbb      	ldrb	r3, [r7, #14]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	211a      	movs	r1, #26
 8005704:	fb01 f303 	mul.w	r3, r1, r3
 8005708:	4413      	add	r3, r2
 800570a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	b25b      	sxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	da16      	bge.n	8005744 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005716:	7bbb      	ldrb	r3, [r7, #14]
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	211a      	movs	r1, #26
 800571c:	fb01 f303 	mul.w	r3, r1, r3
 8005720:	4413      	add	r3, r2
 8005722:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005726:	781a      	ldrb	r2, [r3, #0]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800572c:	7bbb      	ldrb	r3, [r7, #14]
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	211a      	movs	r1, #26
 8005732:	fb01 f303 	mul.w	r3, r1, r3
 8005736:	4413      	add	r3, r2
 8005738:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800573c:	881a      	ldrh	r2, [r3, #0]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	835a      	strh	r2, [r3, #26]
 8005742:	e015      	b.n	8005770 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005744:	7bbb      	ldrb	r3, [r7, #14]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	211a      	movs	r1, #26
 800574a:	fb01 f303 	mul.w	r3, r1, r3
 800574e:	4413      	add	r3, r2
 8005750:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005754:	781a      	ldrb	r2, [r3, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800575a:	7bbb      	ldrb	r3, [r7, #14]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	211a      	movs	r1, #26
 8005760:	fb01 f303 	mul.w	r3, r1, r3
 8005764:	4413      	add	r3, r2
 8005766:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800576a:	881a      	ldrh	r2, [r3, #0]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	7b9b      	ldrb	r3, [r3, #14]
 8005774:	4619      	mov	r1, r3
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f001 fc7d 	bl	8007076 <USBH_AllocPipe>
 800577c:	4603      	mov	r3, r0
 800577e:	461a      	mov	r2, r3
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	7bdb      	ldrb	r3, [r3, #15]
 8005788:	4619      	mov	r1, r3
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f001 fc73 	bl	8007076 <USBH_AllocPipe>
 8005790:	4603      	mov	r3, r0
 8005792:	461a      	mov	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	7b59      	ldrb	r1, [r3, #13]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	7b98      	ldrb	r0, [r3, #14]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	8b12      	ldrh	r2, [r2, #24]
 80057b0:	9202      	str	r2, [sp, #8]
 80057b2:	2202      	movs	r2, #2
 80057b4:	9201      	str	r2, [sp, #4]
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	4623      	mov	r3, r4
 80057ba:	4602      	mov	r2, r0
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 fc2b 	bl	8007018 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	7b19      	ldrb	r1, [r3, #12]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	7bd8      	ldrb	r0, [r3, #15]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	8b52      	ldrh	r2, [r2, #26]
 80057da:	9202      	str	r2, [sp, #8]
 80057dc:	2202      	movs	r2, #2
 80057de:	9201      	str	r2, [sp, #4]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	4623      	mov	r3, r4
 80057e4:	4602      	mov	r2, r0
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f001 fc16 	bl	8007018 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	7b5b      	ldrb	r3, [r3, #13]
 80057f8:	2200      	movs	r2, #0
 80057fa:	4619      	mov	r1, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f002 fd33 	bl	8008268 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	7b1b      	ldrb	r3, [r3, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f002 fd2c 	bl	8008268 <USBH_LL_SetToggle>
      status = USBH_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005814:	7bfb      	ldrb	r3, [r7, #15]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	bd90      	pop	{r4, r7, pc}

0800581e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00e      	beq.n	8005856 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f001 fc09 	bl	8007056 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	4619      	mov	r1, r3
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f001 fc31 	bl	80070b2 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	7b1b      	ldrb	r3, [r3, #12]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00e      	beq.n	800587c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	7b1b      	ldrb	r3, [r3, #12]
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f001 fbf6 	bl	8007056 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	7b1b      	ldrb	r3, [r3, #12]
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 fc1e 	bl	80070b2 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	7b5b      	ldrb	r3, [r3, #13]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00e      	beq.n	80058a2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	7b5b      	ldrb	r3, [r3, #13]
 8005888:	4619      	mov	r1, r3
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f001 fbe3 	bl	8007056 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	7b5b      	ldrb	r3, [r3, #13]
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f001 fc0b 	bl	80070b2 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00b      	beq.n	80058c6 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f002 fdb8 	bl	800842c <free>
    phost->pActiveClass->pData = 0U;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80058c2:	2200      	movs	r2, #0
 80058c4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80058d8:	2302      	movs	r3, #2
 80058da:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	3340      	adds	r3, #64	; 0x40
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f8b2 	bl	8005a56 <GetLineCoding>
 80058f2:	4603      	mov	r3, r0
 80058f4:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d105      	bne.n	8005908 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005902:	2102      	movs	r1, #2
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	4798      	blx	r3
  }
  return status;
 8005908:	7bfb      	ldrb	r3, [r7, #15]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005934:	2b04      	cmp	r3, #4
 8005936:	d877      	bhi.n	8005a28 <USBH_CDC_Process+0x114>
 8005938:	a201      	add	r2, pc, #4	; (adr r2, 8005940 <USBH_CDC_Process+0x2c>)
 800593a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593e:	bf00      	nop
 8005940:	08005955 	.word	0x08005955
 8005944:	0800595b 	.word	0x0800595b
 8005948:	0800598b 	.word	0x0800598b
 800594c:	080059ff 	.word	0x080059ff
 8005950:	08005a0d 	.word	0x08005a0d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]
    break;
 8005958:	e06d      	b.n	8005a36 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f897 	bl	8005a94 <SetLineCoding>
 8005966:	4603      	mov	r3, r0
 8005968:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800596a:	7bbb      	ldrb	r3, [r7, #14]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005978:	e058      	b.n	8005a2c <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800597a:	7bbb      	ldrb	r3, [r7, #14]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d055      	beq.n	8005a2c <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2204      	movs	r2, #4
 8005984:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005988:	e050      	b.n	8005a2c <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	3340      	adds	r3, #64	; 0x40
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f860 	bl	8005a56 <GetLineCoding>
 8005996:	4603      	mov	r3, r0
 8005998:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800599a:	7bbb      	ldrb	r3, [r7, #14]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d126      	bne.n	80059ee <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b2:	791b      	ldrb	r3, [r3, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d13b      	bne.n	8005a30 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c2:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d133      	bne.n	8005a30 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d2:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d12b      	bne.n	8005a30 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e0:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d124      	bne.n	8005a30 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f95a 	bl	8005ca0 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80059ec:	e020      	b.n	8005a30 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80059ee:	7bbb      	ldrb	r3, [r7, #14]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d01d      	beq.n	8005a30 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2204      	movs	r2, #4
 80059f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80059fc:	e018      	b.n	8005a30 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f867 	bl	8005ad2 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f8dc 	bl	8005bc2 <CDC_ProcessReception>
    break;
 8005a0a:	e014      	b.n	8005a36 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fece 	bl	80067b0 <USBH_ClrFeature>
 8005a14:	4603      	mov	r3, r0
 8005a16:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8005a18:	7bbb      	ldrb	r3, [r7, #14]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8005a26:	e005      	b.n	8005a34 <USBH_CDC_Process+0x120>

  default:
    break;
 8005a28:	bf00      	nop
 8005a2a:	e004      	b.n	8005a36 <USBH_CDC_Process+0x122>
    break;
 8005a2c:	bf00      	nop
 8005a2e:	e002      	b.n	8005a36 <USBH_CDC_Process+0x122>
    break;
 8005a30:	bf00      	nop
 8005a32:	e000      	b.n	8005a36 <USBH_CDC_Process+0x122>
    break;
 8005a34:	bf00      	nop

  }

  return status;
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	22a1      	movs	r2, #161	; 0xa1
 8005a64:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2221      	movs	r2, #33	; 0x21
 8005a6a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2207      	movs	r2, #7
 8005a7c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2207      	movs	r2, #7
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f001 f873 	bl	8006b70 <USBH_CtlReq>
 8005a8a:	4603      	mov	r3, r0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2221      	movs	r2, #33	; 0x21
 8005aa2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2207      	movs	r2, #7
 8005aba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2207      	movs	r2, #7
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f001 f854 	bl	8006b70 <USBH_CtlReq>
 8005ac8:	4603      	mov	r3, r0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b086      	sub	sp, #24
 8005ad6:	af02      	add	r7, sp, #8
 8005ad8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d002      	beq.n	8005af8 <CDC_ProcessTransmission+0x26>
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d025      	beq.n	8005b42 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8005af6:	e060      	b.n	8005bba <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	8b12      	ldrh	r2, [r2, #24]
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d90c      	bls.n	8005b1e <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	69d9      	ldr	r1, [r3, #28]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8b1a      	ldrh	r2, [r3, #24]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	7b58      	ldrb	r0, [r3, #13]
 8005b10:	2301      	movs	r3, #1
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	4603      	mov	r3, r0
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f001 fa3b 	bl	8006f92 <USBH_BulkSendData>
 8005b1c:	e00c      	b.n	8005b38 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	7b58      	ldrb	r0, [r3, #13]
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	9300      	str	r3, [sp, #0]
 8005b30:	4603      	mov	r3, r0
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f001 fa2d 	bl	8006f92 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005b40:	e03b      	b.n	8005bba <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	7b5b      	ldrb	r3, [r3, #13]
 8005b46:	4619      	mov	r1, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f002 fb63 	bl	8008214 <USBH_LL_GetURBState>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8005b52:	7afb      	ldrb	r3, [r7, #11]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d128      	bne.n	8005baa <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	8b12      	ldrh	r2, [r2, #24]
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d90e      	bls.n	8005b82 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	8b12      	ldrh	r2, [r2, #24]
 8005b6c:	1a9a      	subs	r2, r3, r2
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	8b12      	ldrh	r2, [r2, #24]
 8005b7a:	441a      	add	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	61da      	str	r2, [r3, #28]
 8005b80:	e002      	b.n	8005b88 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d004      	beq.n	8005b9a <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005b98:	e00e      	b.n	8005bb8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f868 	bl	8005c78 <USBH_CDC_TransmitCallback>
    break;
 8005ba8:	e006      	b.n	8005bb8 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005baa:	7afb      	ldrb	r3, [r7, #11]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d103      	bne.n	8005bb8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005bb8:	bf00      	nop
  }
}
 8005bba:	bf00      	nop
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b086      	sub	sp, #24
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005bde:	2b03      	cmp	r3, #3
 8005be0:	d002      	beq.n	8005be8 <CDC_ProcessReception+0x26>
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d00e      	beq.n	8005c04 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8005be6:	e043      	b.n	8005c70 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	6a19      	ldr	r1, [r3, #32]
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	8b5a      	ldrh	r2, [r3, #26]
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	7b1b      	ldrb	r3, [r3, #12]
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f001 f9f1 	bl	8006fdc <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2204      	movs	r2, #4
 8005bfe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005c02:	e035      	b.n	8005c70 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	7b1b      	ldrb	r3, [r3, #12]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f002 fb02 	bl	8008214 <USBH_LL_GetURBState>
 8005c10:	4603      	mov	r3, r0
 8005c12:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005c14:	7cfb      	ldrb	r3, [r7, #19]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d129      	bne.n	8005c6e <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	7b1b      	ldrb	r3, [r3, #12]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f002 fa65 	bl	80080f0 <USBH_LL_GetLastXferSize>
 8005c26:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d016      	beq.n	8005c60 <CDC_ProcessReception+0x9e>
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	8b5b      	ldrh	r3, [r3, #26]
 8005c36:	461a      	mov	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d910      	bls.n	8005c60 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	1ad2      	subs	r2, r2, r3
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	6a1a      	ldr	r2, [r3, #32]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	441a      	add	r2, r3
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2203      	movs	r2, #3
 8005c5a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005c5e:	e006      	b.n	8005c6e <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f80f 	bl	8005c8c <USBH_CDC_ReceiveCallback>
    break;
 8005c6e:	bf00      	nop
  }
}
 8005c70:	bf00      	nop
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]

}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]

}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]

}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	e019      	b.n	8005d00 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	79fa      	ldrb	r2, [r7, #7]
 8005cd0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f000 f80f 	bl	8005d08 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f002 f947 	bl	8007f8c <USBH_LL_Init>

  return USBH_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005d14:	e008      	b.n	8005d28 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	32e0      	adds	r2, #224	; 0xe0
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3301      	adds	r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b0e      	cmp	r3, #14
 8005d2c:	d9f3      	bls.n	8005d16 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	e009      	b.n	8005d48 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005d3e:	2200      	movs	r2, #0
 8005d40:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3301      	adds	r3, #1
 8005d46:	60fb      	str	r3, [r7, #12]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d4e:	d3f1      	bcc.n	8005d34 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2240      	movs	r2, #64	; 0x40
 8005d74:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d017      	beq.n	8005dde <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10f      	bne.n	8005dd8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dbe:	1c59      	adds	r1, r3, #1
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	33dc      	adds	r3, #220	; 0xdc
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	73fb      	strb	r3, [r7, #15]
 8005dd6:	e004      	b.n	8005de2 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005dd8:	2302      	movs	r3, #2
 8005dda:	73fb      	strb	r3, [r7, #15]
 8005ddc:	e001      	b.n	8005de2 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005dde:	2302      	movs	r3, #2
 8005de0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005e06:	78fa      	ldrb	r2, [r7, #3]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d204      	bcs.n	8005e16 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	78fa      	ldrb	r2, [r7, #3]
 8005e10:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005e14:	e001      	b.n	8005e1a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005e16:	2302      	movs	r3, #2
 8005e18:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	4608      	mov	r0, r1
 8005e32:	4611      	mov	r1, r2
 8005e34:	461a      	mov	r2, r3
 8005e36:	4603      	mov	r3, r0
 8005e38:	70fb      	strb	r3, [r7, #3]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	70bb      	strb	r3, [r7, #2]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005e50:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e52:	e025      	b.n	8005ea0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
 8005e56:	221a      	movs	r2, #26
 8005e58:	fb02 f303 	mul.w	r3, r2, r3
 8005e5c:	3308      	adds	r3, #8
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	4413      	add	r3, r2
 8005e62:	3302      	adds	r3, #2
 8005e64:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	795b      	ldrb	r3, [r3, #5]
 8005e6a:	78fa      	ldrb	r2, [r7, #3]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d002      	beq.n	8005e76 <USBH_FindInterface+0x4e>
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	2bff      	cmp	r3, #255	; 0xff
 8005e74:	d111      	bne.n	8005e9a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005e7a:	78ba      	ldrb	r2, [r7, #2]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d002      	beq.n	8005e86 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005e80:	78bb      	ldrb	r3, [r7, #2]
 8005e82:	2bff      	cmp	r3, #255	; 0xff
 8005e84:	d109      	bne.n	8005e9a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005e8a:	787a      	ldrb	r2, [r7, #1]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d002      	beq.n	8005e96 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005e90:	787b      	ldrb	r3, [r7, #1]
 8005e92:	2bff      	cmp	r3, #255	; 0xff
 8005e94:	d101      	bne.n	8005e9a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
 8005e98:	e006      	b.n	8005ea8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ea0:	7dfb      	ldrb	r3, [r7, #23]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d9d6      	bls.n	8005e54 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005ea6:	23ff      	movs	r3, #255	; 0xff
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	371c      	adds	r7, #28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f002 f8a1 	bl	8008004 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f002 f9b8 	bl	800823a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af04      	add	r7, sp, #16
 8005eda:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005edc:	2302      	movs	r3, #2
 8005ede:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 faec 	bl	80064c2 <USBH_IsPortEnabled>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10c      	bne.n	8005f0a <USBH_Process+0x36>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d007      	beq.n	8005f0a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d002      	beq.n	8005f0a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2203      	movs	r2, #3
 8005f08:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b0b      	cmp	r3, #11
 8005f12:	f200 814c 	bhi.w	80061ae <USBH_Process+0x2da>
 8005f16:	a201      	add	r2, pc, #4	; (adr r2, 8005f1c <USBH_Process+0x48>)
 8005f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1c:	08005f4d 	.word	0x08005f4d
 8005f20:	08005f6f 	.word	0x08005f6f
 8005f24:	08005f83 	.word	0x08005f83
 8005f28:	08006189 	.word	0x08006189
 8005f2c:	080061af 	.word	0x080061af
 8005f30:	08006011 	.word	0x08006011
 8005f34:	0800613f 	.word	0x0800613f
 8005f38:	08006041 	.word	0x08006041
 8005f3c:	08006061 	.word	0x08006061
 8005f40:	08006081 	.word	0x08006081
 8005f44:	080060af 	.word	0x080060af
 8005f48:	08006171 	.word	0x08006171
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 812c 	beq.w	80061b2 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8005f60:	20c8      	movs	r0, #200	; 0xc8
 8005f62:	f002 f9b4 	bl	80082ce <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f002 f8a7 	bl	80080ba <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005f6c:	e121      	b.n	80061b2 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	f040 811e 	bne.w	80061b6 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005f80:	e119      	b.n	80061b6 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8005f82:	2064      	movs	r0, #100	; 0x64
 8005f84:	f002 f9a3 	bl	80082ce <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f002 f871 	bl	8008070 <USBH_LL_GetSpeed>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	461a      	mov	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2205      	movs	r2, #5
 8005f9c:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f001 f868 	bl	8007076 <USBH_AllocPipe>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	461a      	mov	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8005fae:	2180      	movs	r1, #128	; 0x80
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f001 f860 	bl	8007076 <USBH_AllocPipe>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	461a      	mov	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	7919      	ldrb	r1, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005fd2:	b292      	uxth	r2, r2
 8005fd4:	9202      	str	r2, [sp, #8]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	9201      	str	r2, [sp, #4]
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2280      	movs	r2, #128	; 0x80
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 f819 	bl	8007018 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	7959      	ldrb	r1, [r3, #5]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005ffa:	b292      	uxth	r2, r2
 8005ffc:	9202      	str	r2, [sp, #8]
 8005ffe:	2200      	movs	r2, #0
 8006000:	9201      	str	r2, [sp, #4]
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	4603      	mov	r3, r0
 8006006:	2200      	movs	r2, #0
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f001 f805 	bl	8007018 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800600e:	e0e3      	b.n	80061d8 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f8e7 	bl	80061e4 <USBH_HandleEnum>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	f040 80ce 	bne.w	80061ba <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800602c:	2b01      	cmp	r3, #1
 800602e:	d103      	bne.n	8006038 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2208      	movs	r2, #8
 8006034:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006036:	e0c0      	b.n	80061ba <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2207      	movs	r2, #7
 800603c:	701a      	strb	r2, [r3, #0]
    break;
 800603e:	e0bc      	b.n	80061ba <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 80b9 	beq.w	80061be <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006052:	2101      	movs	r1, #1
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2208      	movs	r2, #8
 800605c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800605e:	e0ae      	b.n	80061be <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006066:	b29b      	uxth	r3, r3
 8006068:	4619      	mov	r1, r3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fb59 	bl	8006722 <USBH_SetCfg>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	f040 80a5 	bne.w	80061c2 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2209      	movs	r2, #9
 800607c:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800607e:	e0a0      	b.n	80061c2 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006086:	f003 0320 	and.w	r3, r3, #32
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00b      	beq.n	80060a6 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800608e:	2101      	movs	r1, #1
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fb69 	bl	8006768 <USBH_SetFeature>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	f040 8094 	bne.w	80061c6 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	220a      	movs	r2, #10
 80060a2:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80060a4:	e08f      	b.n	80061c6 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	220a      	movs	r2, #10
 80060aa:	701a      	strb	r2, [r3, #0]
    break;
 80060ac:	e08b      	b.n	80061c6 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8088 	beq.w	80061ca <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80060c2:	2300      	movs	r3, #0
 80060c4:	73fb      	strb	r3, [r7, #15]
 80060c6:	e017      	b.n	80060f8 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	33dc      	adds	r3, #220	; 0xdc
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	791a      	ldrb	r2, [r3, #4]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80060dc:	429a      	cmp	r2, r3
 80060de:	d108      	bne.n	80060f2 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	33dc      	adds	r3, #220	; 0xdc
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
 80060f4:	3301      	adds	r3, #1
 80060f6:	73fb      	strb	r3, [r7, #15]
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0e4      	beq.n	80060c8 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006104:	2b00      	cmp	r3, #0
 8006106:	d016      	beq.n	8006136 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	4798      	blx	r3
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d109      	bne.n	800612e <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2206      	movs	r2, #6
 800611e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006126:	2103      	movs	r1, #3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800612c:	e04d      	b.n	80061ca <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	220d      	movs	r2, #13
 8006132:	701a      	strb	r2, [r3, #0]
    break;
 8006134:	e049      	b.n	80061ca <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	220d      	movs	r2, #13
 800613a:	701a      	strb	r2, [r3, #0]
    break;
 800613c:	e045      	b.n	80061ca <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00f      	beq.n	8006168 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
 8006154:	4603      	mov	r3, r0
 8006156:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006158:	7bbb      	ldrb	r3, [r7, #14]
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d136      	bne.n	80061ce <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	220b      	movs	r2, #11
 8006164:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8006166:	e032      	b.n	80061ce <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	220d      	movs	r2, #13
 800616c:	701a      	strb	r2, [r3, #0]
    break;
 800616e:	e02e      	b.n	80061ce <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006176:	2b00      	cmp	r3, #0
 8006178:	d02b      	beq.n	80061d2 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	4798      	blx	r3
    }
    break;
 8006186:	e024      	b.n	80061d2 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff fdbd 	bl	8005d08 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01e      	beq.n	80061d6 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80061ac:	e013      	b.n	80061d6 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 80061ae:	bf00      	nop
 80061b0:	e012      	b.n	80061d8 <USBH_Process+0x304>
    break;
 80061b2:	bf00      	nop
 80061b4:	e010      	b.n	80061d8 <USBH_Process+0x304>
    break;
 80061b6:	bf00      	nop
 80061b8:	e00e      	b.n	80061d8 <USBH_Process+0x304>
    break;
 80061ba:	bf00      	nop
 80061bc:	e00c      	b.n	80061d8 <USBH_Process+0x304>
    break;
 80061be:	bf00      	nop
 80061c0:	e00a      	b.n	80061d8 <USBH_Process+0x304>
    break;
 80061c2:	bf00      	nop
 80061c4:	e008      	b.n	80061d8 <USBH_Process+0x304>
    break;
 80061c6:	bf00      	nop
 80061c8:	e006      	b.n	80061d8 <USBH_Process+0x304>
    break;
 80061ca:	bf00      	nop
 80061cc:	e004      	b.n	80061d8 <USBH_Process+0x304>
    break;
 80061ce:	bf00      	nop
 80061d0:	e002      	b.n	80061d8 <USBH_Process+0x304>
    break;
 80061d2:	bf00      	nop
 80061d4:	e000      	b.n	80061d8 <USBH_Process+0x304>
    break;
 80061d6:	bf00      	nop
  }
 return USBH_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop

080061e4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b088      	sub	sp, #32
 80061e8:	af04      	add	r7, sp, #16
 80061ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80061ec:	2301      	movs	r3, #1
 80061ee:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	785b      	ldrb	r3, [r3, #1]
 80061f4:	2b07      	cmp	r3, #7
 80061f6:	f200 80f8 	bhi.w	80063ea <USBH_HandleEnum+0x206>
 80061fa:	a201      	add	r2, pc, #4	; (adr r2, 8006200 <USBH_HandleEnum+0x1c>)
 80061fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006200:	08006221 	.word	0x08006221
 8006204:	08006293 	.word	0x08006293
 8006208:	080062ab 	.word	0x080062ab
 800620c:	08006321 	.word	0x08006321
 8006210:	08006337 	.word	0x08006337
 8006214:	08006353 	.word	0x08006353
 8006218:	08006387 	.word	0x08006387
 800621c:	080063bb 	.word	0x080063bb
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006220:	2108      	movs	r1, #8
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f9ad 	bl	8006582 <USBH_Get_DevDesc>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	f040 80df 	bne.w	80063ee <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	7919      	ldrb	r1, [r3, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006254:	b292      	uxth	r2, r2
 8006256:	9202      	str	r2, [sp, #8]
 8006258:	2200      	movs	r2, #0
 800625a:	9201      	str	r2, [sp, #4]
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	4603      	mov	r3, r0
 8006260:	2280      	movs	r2, #128	; 0x80
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fed8 	bl	8007018 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	7959      	ldrb	r1, [r3, #5]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800627c:	b292      	uxth	r2, r2
 800627e:	9202      	str	r2, [sp, #8]
 8006280:	2200      	movs	r2, #0
 8006282:	9201      	str	r2, [sp, #4]
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	4603      	mov	r3, r0
 8006288:	2200      	movs	r2, #0
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fec4 	bl	8007018 <USBH_OpenPipe>

    }
    break;
 8006290:	e0ad      	b.n	80063ee <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8006292:	2112      	movs	r1, #18
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f974 	bl	8006582 <USBH_Get_DevDesc>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	f040 80a8 	bne.w	80063f2 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2202      	movs	r2, #2
 80062a6:	705a      	strb	r2, [r3, #1]

    }
    break;
 80062a8:	e0a3      	b.n	80063f2 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80062aa:	2101      	movs	r1, #1
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fa14 	bl	80066da <USBH_SetAddress>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f040 809e 	bne.w	80063f6 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 80062ba:	2002      	movs	r0, #2
 80062bc:	f002 f807 	bl	80082ce <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2203      	movs	r2, #3
 80062cc:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	7919      	ldrb	r1, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80062e2:	b292      	uxth	r2, r2
 80062e4:	9202      	str	r2, [sp, #8]
 80062e6:	2200      	movs	r2, #0
 80062e8:	9201      	str	r2, [sp, #4]
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	4603      	mov	r3, r0
 80062ee:	2280      	movs	r2, #128	; 0x80
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fe91 	bl	8007018 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	7959      	ldrb	r1, [r3, #5]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800630a:	b292      	uxth	r2, r2
 800630c:	9202      	str	r2, [sp, #8]
 800630e:	2200      	movs	r2, #0
 8006310:	9201      	str	r2, [sp, #4]
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	4603      	mov	r3, r0
 8006316:	2200      	movs	r2, #0
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fe7d 	bl	8007018 <USBH_OpenPipe>
    }
    break;
 800631e:	e06a      	b.n	80063f6 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8006320:	2109      	movs	r1, #9
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f955 	bl	80065d2 <USBH_Get_CfgDesc>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d165      	bne.n	80063fa <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2204      	movs	r2, #4
 8006332:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006334:	e061      	b.n	80063fa <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f947 	bl	80065d2 <USBH_Get_CfgDesc>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d159      	bne.n	80063fe <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2205      	movs	r2, #5
 800634e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006350:	e055      	b.n	80063fe <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006358:	2b00      	cmp	r3, #0
 800635a:	d010      	beq.n	800637e <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006368:	23ff      	movs	r3, #255	; 0xff
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f955 	bl	800661a <USBH_Get_StringDesc>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d145      	bne.n	8006402 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2206      	movs	r2, #6
 800637a:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800637c:	e041      	b.n	8006402 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2206      	movs	r2, #6
 8006382:	705a      	strb	r2, [r3, #1]
    break;
 8006384:	e03d      	b.n	8006402 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800638c:	2b00      	cmp	r3, #0
 800638e:	d010      	beq.n	80063b2 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800639c:	23ff      	movs	r3, #255	; 0xff
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f93b 	bl	800661a <USBH_Get_StringDesc>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d12d      	bne.n	8006406 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2207      	movs	r2, #7
 80063ae:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80063b0:	e029      	b.n	8006406 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2207      	movs	r2, #7
 80063b6:	705a      	strb	r2, [r3, #1]
    break;
 80063b8:	e025      	b.n	8006406 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00f      	beq.n	80063e4 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80063d0:	23ff      	movs	r3, #255	; 0xff
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f921 	bl	800661a <USBH_Get_StringDesc>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d115      	bne.n	800640a <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80063e2:	e012      	b.n	800640a <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	73fb      	strb	r3, [r7, #15]
    break;
 80063e8:	e00f      	b.n	800640a <USBH_HandleEnum+0x226>

  default:
    break;
 80063ea:	bf00      	nop
 80063ec:	e00e      	b.n	800640c <USBH_HandleEnum+0x228>
    break;
 80063ee:	bf00      	nop
 80063f0:	e00c      	b.n	800640c <USBH_HandleEnum+0x228>
    break;
 80063f2:	bf00      	nop
 80063f4:	e00a      	b.n	800640c <USBH_HandleEnum+0x228>
    break;
 80063f6:	bf00      	nop
 80063f8:	e008      	b.n	800640c <USBH_HandleEnum+0x228>
    break;
 80063fa:	bf00      	nop
 80063fc:	e006      	b.n	800640c <USBH_HandleEnum+0x228>
    break;
 80063fe:	bf00      	nop
 8006400:	e004      	b.n	800640c <USBH_HandleEnum+0x228>
    break;
 8006402:	bf00      	nop
 8006404:	e002      	b.n	800640c <USBH_HandleEnum+0x228>
    break;
 8006406:	bf00      	nop
 8006408:	e000      	b.n	800640c <USBH_HandleEnum+0x228>
    break;
 800640a:	bf00      	nop
  }
  return Status;
 800640c:	7bfb      	ldrb	r3, [r7, #15]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop

08006418 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b082      	sub	sp, #8
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f804 	bl	800645a <USBH_HandleSof>
}
 8006452:	bf00      	nop
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b082      	sub	sp, #8
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b0b      	cmp	r3, #11
 800646a:	d10a      	bne.n	8006482 <USBH_HandleSof+0x28>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	4798      	blx	r3
  }
}
 8006482:	bf00      	nop
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800649a:	bf00      	nop
}
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b083      	sub	sp, #12
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80064b6:	bf00      	nop
}
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10f      	bne.n	800650e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00e      	beq.n	800651e <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006506:	2104      	movs	r1, #4
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	4798      	blx	r3
 800650c:	e007      	b.n	800651e <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006514:	2b01      	cmp	r3, #1
 8006516:	d102      	bne.n	800651e <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f001 fd82 	bl	800803a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	791b      	ldrb	r3, [r3, #4]
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fdb8 	bl	80070b2 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	795b      	ldrb	r3, [r3, #5]
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fdb2 	bl	80070b2 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006566:	2105      	movs	r1, #5
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f001 fd49 	bl	8008004 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2203      	movs	r2, #3
 8006576:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b086      	sub	sp, #24
 8006586:	af02      	add	r7, sp, #8
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	460b      	mov	r3, r1
 800658c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	b29b      	uxth	r3, r3
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	4613      	mov	r3, r2
 800659c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065a0:	2100      	movs	r1, #0
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f864 	bl	8006670 <USBH_GetDescriptor>
 80065a8:	4603      	mov	r3, r0
 80065aa:	73fb      	strb	r3, [r7, #15]
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10a      	bne.n	80065c8 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f203 3022 	addw	r0, r3, #802	; 0x322
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80065be:	78fa      	ldrb	r2, [r7, #3]
 80065c0:	b292      	uxth	r2, r2
 80065c2:	4619      	mov	r1, r3
 80065c4:	f000 f918 	bl	80067f8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b086      	sub	sp, #24
 80065d6:	af02      	add	r7, sp, #8
 80065d8:	6078      	str	r0, [r7, #4]
 80065da:	460b      	mov	r3, r1
 80065dc:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	331c      	adds	r3, #28
 80065e2:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80065e4:	887b      	ldrh	r3, [r7, #2]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ee:	2100      	movs	r1, #0
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f83d 	bl	8006670 <USBH_GetDescriptor>
 80065f6:	4603      	mov	r3, r0
 80065f8:	72fb      	strb	r3, [r7, #11]
 80065fa:	7afb      	ldrb	r3, [r7, #11]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d107      	bne.n	8006610 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006606:	887a      	ldrh	r2, [r7, #2]
 8006608:	68f9      	ldr	r1, [r7, #12]
 800660a:	4618      	mov	r0, r3
 800660c:	f000 f964 	bl	80068d8 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8006610:	7afb      	ldrb	r3, [r7, #11]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b088      	sub	sp, #32
 800661e:	af02      	add	r7, sp, #8
 8006620:	60f8      	str	r0, [r7, #12]
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	461a      	mov	r2, r3
 8006626:	460b      	mov	r3, r1
 8006628:	72fb      	strb	r3, [r7, #11]
 800662a:	4613      	mov	r3, r2
 800662c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800662e:	7afb      	ldrb	r3, [r7, #11]
 8006630:	b29b      	uxth	r3, r3
 8006632:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006636:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800663e:	893b      	ldrh	r3, [r7, #8]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	460b      	mov	r3, r1
 8006644:	2100      	movs	r1, #0
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 f812 	bl	8006670 <USBH_GetDescriptor>
 800664c:	4603      	mov	r3, r0
 800664e:	75fb      	strb	r3, [r7, #23]
 8006650:	7dfb      	ldrb	r3, [r7, #23]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d107      	bne.n	8006666 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800665c:	893a      	ldrh	r2, [r7, #8]
 800665e:	6879      	ldr	r1, [r7, #4]
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fa37 	bl	8006ad4 <USBH_ParseStringDesc>
  }
  return status;
 8006666:	7dfb      	ldrb	r3, [r7, #23]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	607b      	str	r3, [r7, #4]
 800667a:	460b      	mov	r3, r1
 800667c:	72fb      	strb	r3, [r7, #11]
 800667e:	4613      	mov	r3, r2
 8006680:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	789b      	ldrb	r3, [r3, #2]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d11c      	bne.n	80066c4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006690:	b2da      	uxtb	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2206      	movs	r2, #6
 800669a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	893a      	ldrh	r2, [r7, #8]
 80066a0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80066a2:	893b      	ldrh	r3, [r7, #8]
 80066a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80066a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ac:	d104      	bne.n	80066b8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f240 4209 	movw	r2, #1033	; 0x409
 80066b4:	829a      	strh	r2, [r3, #20]
 80066b6:	e002      	b.n	80066be <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8b3a      	ldrh	r2, [r7, #24]
 80066c2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 80066c4:	8b3b      	ldrh	r3, [r7, #24]
 80066c6:	461a      	mov	r2, r3
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 fa50 	bl	8006b70 <USBH_CtlReq>
 80066d0:	4603      	mov	r3, r0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
 80066e2:	460b      	mov	r3, r1
 80066e4:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	789b      	ldrb	r3, [r3, #2]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d10f      	bne.n	800670e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2205      	movs	r2, #5
 80066f8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800670e:	2200      	movs	r2, #0
 8006710:	2100      	movs	r1, #0
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fa2c 	bl	8006b70 <USBH_CtlReq>
 8006718:	4603      	mov	r3, r0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b082      	sub	sp, #8
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	460b      	mov	r3, r1
 800672c:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	789b      	ldrb	r3, [r3, #2]
 8006732:	2b01      	cmp	r3, #1
 8006734:	d10e      	bne.n	8006754 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2209      	movs	r2, #9
 8006740:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	887a      	ldrh	r2, [r7, #2]
 8006746:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006754:	2200      	movs	r2, #0
 8006756:	2100      	movs	r1, #0
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fa09 	bl	8006b70 <USBH_CtlReq>
 800675e:	4603      	mov	r3, r0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	460b      	mov	r3, r1
 8006772:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	789b      	ldrb	r3, [r3, #2]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d10f      	bne.n	800679c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2203      	movs	r2, #3
 8006786:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	b29a      	uxth	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800679c:	2200      	movs	r2, #0
 800679e:	2100      	movs	r1, #0
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f9e5 	bl	8006b70 <USBH_CtlReq>
 80067a6:	4603      	mov	r3, r0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	789b      	ldrb	r3, [r3, #2]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d10f      	bne.n	80067e4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80067d6:	78fb      	ldrb	r3, [r7, #3]
 80067d8:	b29a      	uxth	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80067e4:	2200      	movs	r2, #0
 80067e6:	2100      	movs	r1, #0
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f9c1 	bl	8006b70 <USBH_CtlReq>
 80067ee:	4603      	mov	r3, r0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3708      	adds	r7, #8
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	4613      	mov	r3, r2
 8006804:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	781a      	ldrb	r2, [r3, #0]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	785a      	ldrb	r2, [r3, #1]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	3302      	adds	r3, #2
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	b29a      	uxth	r2, r3
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	3303      	adds	r3, #3
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	b29b      	uxth	r3, r3
 8006826:	021b      	lsls	r3, r3, #8
 8006828:	b29b      	uxth	r3, r3
 800682a:	4313      	orrs	r3, r2
 800682c:	b29a      	uxth	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	791a      	ldrb	r2, [r3, #4]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	795a      	ldrb	r2, [r3, #5]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	799a      	ldrb	r2, [r3, #6]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	79da      	ldrb	r2, [r3, #7]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006852:	88fb      	ldrh	r3, [r7, #6]
 8006854:	2b08      	cmp	r3, #8
 8006856:	d939      	bls.n	80068cc <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	3308      	adds	r3, #8
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	b29a      	uxth	r2, r3
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	3309      	adds	r3, #9
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	b29b      	uxth	r3, r3
 8006868:	021b      	lsls	r3, r3, #8
 800686a:	b29b      	uxth	r3, r3
 800686c:	4313      	orrs	r3, r2
 800686e:	b29a      	uxth	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	330a      	adds	r3, #10
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	b29a      	uxth	r2, r3
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	330b      	adds	r3, #11
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	021b      	lsls	r3, r3, #8
 8006886:	b29b      	uxth	r3, r3
 8006888:	4313      	orrs	r3, r2
 800688a:	b29a      	uxth	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	330c      	adds	r3, #12
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	b29a      	uxth	r2, r3
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	330d      	adds	r3, #13
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	021b      	lsls	r3, r3, #8
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	4313      	orrs	r3, r2
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	7b9a      	ldrb	r2, [r3, #14]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	7bda      	ldrb	r2, [r3, #15]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	7c1a      	ldrb	r2, [r3, #16]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	7c5a      	ldrb	r2, [r3, #17]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	745a      	strb	r2, [r3, #17]
  }
}
 80068cc:	bf00      	nop
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08a      	sub	sp, #40	; 0x28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	4613      	mov	r3, r2
 80068e4:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	781a      	ldrb	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	785a      	ldrb	r2, [r3, #1]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	3302      	adds	r3, #2
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	b29a      	uxth	r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	3303      	adds	r3, #3
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	b29b      	uxth	r3, r3
 800691a:	021b      	lsls	r3, r3, #8
 800691c:	b29b      	uxth	r3, r3
 800691e:	4313      	orrs	r3, r2
 8006920:	b29a      	uxth	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	791a      	ldrb	r2, [r3, #4]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	795a      	ldrb	r2, [r3, #5]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	799a      	ldrb	r2, [r3, #6]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	79da      	ldrb	r2, [r3, #7]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	7a1a      	ldrb	r2, [r3, #8]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800694e:	88fb      	ldrh	r3, [r7, #6]
 8006950:	2b09      	cmp	r3, #9
 8006952:	d95f      	bls.n	8006a14 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006954:	2309      	movs	r3, #9
 8006956:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006958:	2300      	movs	r3, #0
 800695a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800695c:	e051      	b.n	8006a02 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800695e:	f107 0316 	add.w	r3, r7, #22
 8006962:	4619      	mov	r1, r3
 8006964:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006966:	f000 f8e8 	bl	8006b3a <USBH_GetNextDesc>
 800696a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	785b      	ldrb	r3, [r3, #1]
 8006970:	2b04      	cmp	r3, #4
 8006972:	d146      	bne.n	8006a02 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006974:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006978:	221a      	movs	r2, #26
 800697a:	fb02 f303 	mul.w	r3, r2, r3
 800697e:	3308      	adds	r3, #8
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	4413      	add	r3, r2
 8006984:	3302      	adds	r3, #2
 8006986:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8006988:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800698a:	69f8      	ldr	r0, [r7, #28]
 800698c:	f000 f846 	bl	8006a1c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006996:	2300      	movs	r3, #0
 8006998:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800699a:	e022      	b.n	80069e2 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800699c:	f107 0316 	add.w	r3, r7, #22
 80069a0:	4619      	mov	r1, r3
 80069a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069a4:	f000 f8c9 	bl	8006b3a <USBH_GetNextDesc>
 80069a8:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	785b      	ldrb	r3, [r3, #1]
 80069ae:	2b05      	cmp	r3, #5
 80069b0:	d117      	bne.n	80069e2 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80069b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069b6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80069ba:	3201      	adds	r2, #1
 80069bc:	00d2      	lsls	r2, r2, #3
 80069be:	211a      	movs	r1, #26
 80069c0:	fb01 f303 	mul.w	r3, r1, r3
 80069c4:	4413      	add	r3, r2
 80069c6:	3308      	adds	r3, #8
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	3304      	adds	r3, #4
 80069ce:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 80069d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069d2:	69b8      	ldr	r0, [r7, #24]
 80069d4:	f000 f851 	bl	8006a7a <USBH_ParseEPDesc>
            ep_ix++;
 80069d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80069dc:	3301      	adds	r3, #1
 80069de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	791b      	ldrb	r3, [r3, #4]
 80069e6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d204      	bcs.n	80069f8 <USBH_ParseCfgDesc+0x120>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	885a      	ldrh	r2, [r3, #2]
 80069f2:	8afb      	ldrh	r3, [r7, #22]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d8d1      	bhi.n	800699c <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80069f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069fc:	3301      	adds	r3, #1
 80069fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006a02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d804      	bhi.n	8006a14 <USBH_ParseCfgDesc+0x13c>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	885a      	ldrh	r2, [r3, #2]
 8006a0e:	8afb      	ldrh	r3, [r7, #22]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d8a4      	bhi.n	800695e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006a14:	bf00      	nop
 8006a16:	3728      	adds	r7, #40	; 0x28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781a      	ldrb	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	785a      	ldrb	r2, [r3, #1]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	789a      	ldrb	r2, [r3, #2]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	78da      	ldrb	r2, [r3, #3]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	791a      	ldrb	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	795a      	ldrb	r2, [r3, #5]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	799a      	ldrb	r2, [r3, #6]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	79da      	ldrb	r2, [r3, #7]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	7a1a      	ldrb	r2, [r3, #8]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	721a      	strb	r2, [r3, #8]
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781a      	ldrb	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	785a      	ldrb	r2, [r3, #1]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	789a      	ldrb	r2, [r3, #2]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	78da      	ldrb	r2, [r3, #3]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	3305      	adds	r3, #5
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	021b      	lsls	r3, r3, #8
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	799a      	ldrb	r2, [r3, #6]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	719a      	strb	r2, [r3, #6]
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d120      	bne.n	8006b2e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	1e9a      	subs	r2, r3, #2
 8006af2:	88fb      	ldrh	r3, [r7, #6]
 8006af4:	4293      	cmp	r3, r2
 8006af6:	bf28      	it	cs
 8006af8:	4613      	movcs	r3, r2
 8006afa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3302      	adds	r3, #2
 8006b00:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006b02:	2300      	movs	r3, #0
 8006b04:	82fb      	strh	r3, [r7, #22]
 8006b06:	e00b      	b.n	8006b20 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006b08:	8afb      	ldrh	r3, [r7, #22]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	781a      	ldrb	r2, [r3, #0]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	3301      	adds	r3, #1
 8006b18:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006b1a:	8afb      	ldrh	r3, [r7, #22]
 8006b1c:	3302      	adds	r3, #2
 8006b1e:	82fb      	strh	r3, [r7, #22]
 8006b20:	8afa      	ldrh	r2, [r7, #22]
 8006b22:	8abb      	ldrh	r3, [r7, #20]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d3ef      	bcc.n	8006b08 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	701a      	strb	r2, [r3, #0]
  }
}
 8006b2e:	bf00      	nop
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
 8006b42:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	881a      	ldrh	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	4413      	add	r3, r2
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4413      	add	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8006b62:	68fb      	ldr	r3, [r7, #12]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	789b      	ldrb	r3, [r3, #2]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d002      	beq.n	8006b90 <USBH_CtlReq+0x20>
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d00f      	beq.n	8006bae <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8006b8e:	e034      	b.n	8006bfa <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	88fa      	ldrh	r2, [r7, #6]
 8006b9a:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	75fb      	strb	r3, [r7, #23]
    break;
 8006bac:	e025      	b.n	8006bfa <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 f828 	bl	8006c04 <USBH_HandleControl>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006bb8:	7dfb      	ldrb	r3, [r7, #23]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d108      	bne.n	8006bd0 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	75fb      	strb	r3, [r7, #23]
    break;
 8006bce:	e013      	b.n	8006bf8 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d108      	bne.n	8006be8 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006be2:	2303      	movs	r3, #3
 8006be4:	75fb      	strb	r3, [r7, #23]
    break;
 8006be6:	e007      	b.n	8006bf8 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d104      	bne.n	8006bf8 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	75fb      	strb	r3, [r7, #23]
    break;
 8006bf8:	bf00      	nop
  }
  return status;
 8006bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c10:	2300      	movs	r3, #0
 8006c12:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	7e1b      	ldrb	r3, [r3, #24]
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	2b0a      	cmp	r3, #10
 8006c1c:	f200 814c 	bhi.w	8006eb8 <USBH_HandleControl+0x2b4>
 8006c20:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <USBH_HandleControl+0x24>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006c55 	.word	0x08006c55
 8006c2c:	08006c6f 	.word	0x08006c6f
 8006c30:	08006cd9 	.word	0x08006cd9
 8006c34:	08006cff 	.word	0x08006cff
 8006c38:	08006d37 	.word	0x08006d37
 8006c3c:	08006d63 	.word	0x08006d63
 8006c40:	08006db5 	.word	0x08006db5
 8006c44:	08006dd7 	.word	0x08006dd7
 8006c48:	08006e13 	.word	0x08006e13
 8006c4c:	08006e3b 	.word	0x08006e3b
 8006c50:	08006e79 	.word	0x08006e79
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f103 0110 	add.w	r1, r3, #16
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	795b      	ldrb	r3, [r3, #5]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f939 	bl	8006ed8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2202      	movs	r2, #2
 8006c6a:	761a      	strb	r2, [r3, #24]
    break;
 8006c6c:	e12f      	b.n	8006ece <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	795b      	ldrb	r3, [r3, #5]
 8006c72:	4619      	mov	r1, r3
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f001 facd 	bl	8008214 <USBH_LL_GetURBState>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d11e      	bne.n	8006cc2 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	7c1b      	ldrb	r3, [r3, #16]
 8006c88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c8c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	8adb      	ldrh	r3, [r3, #22]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00a      	beq.n	8006cac <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006c96:	7b7b      	ldrb	r3, [r7, #13]
 8006c98:	2b80      	cmp	r3, #128	; 0x80
 8006c9a:	d103      	bne.n	8006ca4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2203      	movs	r2, #3
 8006ca0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006ca2:	e10b      	b.n	8006ebc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2205      	movs	r2, #5
 8006ca8:	761a      	strb	r2, [r3, #24]
    break;
 8006caa:	e107      	b.n	8006ebc <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8006cac:	7b7b      	ldrb	r3, [r7, #13]
 8006cae:	2b80      	cmp	r3, #128	; 0x80
 8006cb0:	d103      	bne.n	8006cba <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2209      	movs	r2, #9
 8006cb6:	761a      	strb	r2, [r3, #24]
    break;
 8006cb8:	e100      	b.n	8006ebc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2207      	movs	r2, #7
 8006cbe:	761a      	strb	r2, [r3, #24]
    break;
 8006cc0:	e0fc      	b.n	8006ebc <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006cc2:	7bbb      	ldrb	r3, [r7, #14]
 8006cc4:	2b04      	cmp	r3, #4
 8006cc6:	d003      	beq.n	8006cd0 <USBH_HandleControl+0xcc>
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	f040 80f6 	bne.w	8006ebc <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	220b      	movs	r2, #11
 8006cd4:	761a      	strb	r2, [r3, #24]
    break;
 8006cd6:	e0f1      	b.n	8006ebc <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6899      	ldr	r1, [r3, #8]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	899a      	ldrh	r2, [r3, #12]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	791b      	ldrb	r3, [r3, #4]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 f930 	bl	8006f56 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2204      	movs	r2, #4
 8006cfa:	761a      	strb	r2, [r3, #24]
    break;
 8006cfc:	e0e7      	b.n	8006ece <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	791b      	ldrb	r3, [r3, #4]
 8006d02:	4619      	mov	r1, r3
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 fa85 	bl	8008214 <USBH_LL_GetURBState>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006d0e:	7bbb      	ldrb	r3, [r7, #14]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d102      	bne.n	8006d1a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2209      	movs	r2, #9
 8006d18:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006d1a:	7bbb      	ldrb	r3, [r7, #14]
 8006d1c:	2b05      	cmp	r3, #5
 8006d1e:	d102      	bne.n	8006d26 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006d20:	2303      	movs	r3, #3
 8006d22:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006d24:	e0cc      	b.n	8006ec0 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8006d26:	7bbb      	ldrb	r3, [r7, #14]
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	f040 80c9 	bne.w	8006ec0 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	220b      	movs	r2, #11
 8006d32:	761a      	strb	r2, [r3, #24]
    break;
 8006d34:	e0c4      	b.n	8006ec0 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6899      	ldr	r1, [r3, #8]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	899a      	ldrh	r2, [r3, #12]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	7958      	ldrb	r0, [r3, #5]
 8006d42:	2301      	movs	r3, #1
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	4603      	mov	r3, r0
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f8df 	bl	8006f0c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2206      	movs	r2, #6
 8006d5e:	761a      	strb	r2, [r3, #24]
    break;
 8006d60:	e0b5      	b.n	8006ece <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	795b      	ldrb	r3, [r3, #5]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 fa53 	bl	8008214 <USBH_LL_GetURBState>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d103      	bne.n	8006d80 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2207      	movs	r2, #7
 8006d7c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006d7e:	e0a1      	b.n	8006ec4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
 8006d82:	2b05      	cmp	r3, #5
 8006d84:	d105      	bne.n	8006d92 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	220c      	movs	r2, #12
 8006d8a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8006d90:	e098      	b.n	8006ec4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006d92:	7bbb      	ldrb	r3, [r7, #14]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d103      	bne.n	8006da0 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2205      	movs	r2, #5
 8006d9c:	761a      	strb	r2, [r3, #24]
    break;
 8006d9e:	e091      	b.n	8006ec4 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8006da0:	7bbb      	ldrb	r3, [r7, #14]
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	f040 808e 	bne.w	8006ec4 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	220b      	movs	r2, #11
 8006dac:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006dae:	2302      	movs	r3, #2
 8006db0:	73fb      	strb	r3, [r7, #15]
    break;
 8006db2:	e087      	b.n	8006ec4 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	791b      	ldrb	r3, [r3, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	2100      	movs	r1, #0
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f8ca 	bl	8006f56 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2208      	movs	r2, #8
 8006dd2:	761a      	strb	r2, [r3, #24]

    break;
 8006dd4:	e07b      	b.n	8006ece <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	791b      	ldrb	r3, [r3, #4]
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 fa19 	bl	8008214 <USBH_LL_GetURBState>
 8006de2:	4603      	mov	r3, r0
 8006de4:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006de6:	7bbb      	ldrb	r3, [r7, #14]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d105      	bne.n	8006df8 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	220d      	movs	r2, #13
 8006df0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006df6:	e067      	b.n	8006ec8 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d103      	bne.n	8006e06 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	220b      	movs	r2, #11
 8006e02:	761a      	strb	r2, [r3, #24]
    break;
 8006e04:	e060      	b.n	8006ec8 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8006e06:	7bbb      	ldrb	r3, [r7, #14]
 8006e08:	2b05      	cmp	r3, #5
 8006e0a:	d15d      	bne.n	8006ec8 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e10:	e05a      	b.n	8006ec8 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	795a      	ldrb	r2, [r3, #5]
 8006e16:	2301      	movs	r3, #1
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2100      	movs	r1, #0
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f873 	bl	8006f0c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	220a      	movs	r2, #10
 8006e36:	761a      	strb	r2, [r3, #24]
    break;
 8006e38:	e049      	b.n	8006ece <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	795b      	ldrb	r3, [r3, #5]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 f9e7 	bl	8008214 <USBH_LL_GetURBState>
 8006e46:	4603      	mov	r3, r0
 8006e48:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d105      	bne.n	8006e5c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	220d      	movs	r2, #13
 8006e58:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8006e5a:	e037      	b.n	8006ecc <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d103      	bne.n	8006e6a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2209      	movs	r2, #9
 8006e66:	761a      	strb	r2, [r3, #24]
    break;
 8006e68:	e030      	b.n	8006ecc <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	2b04      	cmp	r3, #4
 8006e6e:	d12d      	bne.n	8006ecc <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	220b      	movs	r2, #11
 8006e74:	761a      	strb	r2, [r3, #24]
    break;
 8006e76:	e029      	b.n	8006ecc <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	7e5b      	ldrb	r3, [r3, #25]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	b2da      	uxtb	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	765a      	strb	r2, [r3, #25]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	7e5b      	ldrb	r3, [r3, #25]
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d809      	bhi.n	8006ea0 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f001 f8d4 	bl	800803a <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8006e9e:	e016      	b.n	8006ece <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ea6:	2106      	movs	r1, #6
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8006eb6:	e00a      	b.n	8006ece <USBH_HandleControl+0x2ca>

  default:
    break;
 8006eb8:	bf00      	nop
 8006eba:	e008      	b.n	8006ece <USBH_HandleControl+0x2ca>
    break;
 8006ebc:	bf00      	nop
 8006ebe:	e006      	b.n	8006ece <USBH_HandleControl+0x2ca>
    break;
 8006ec0:	bf00      	nop
 8006ec2:	e004      	b.n	8006ece <USBH_HandleControl+0x2ca>
    break;
 8006ec4:	bf00      	nop
 8006ec6:	e002      	b.n	8006ece <USBH_HandleControl+0x2ca>
    break;
 8006ec8:	bf00      	nop
 8006eca:	e000      	b.n	8006ece <USBH_HandleControl+0x2ca>
    break;
 8006ecc:	bf00      	nop
  }
  return status;
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b088      	sub	sp, #32
 8006edc:	af04      	add	r7, sp, #16
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006ee6:	79f9      	ldrb	r1, [r7, #7]
 8006ee8:	2300      	movs	r3, #0
 8006eea:	9303      	str	r3, [sp, #12]
 8006eec:	2308      	movs	r3, #8
 8006eee:	9302      	str	r3, [sp, #8]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	9301      	str	r3, [sp, #4]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	2200      	movs	r2, #0
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f001 f958 	bl	80081b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af04      	add	r7, sp, #16
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	4611      	mov	r1, r2
 8006f18:	461a      	mov	r2, r3
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	80fb      	strh	r3, [r7, #6]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006f30:	7979      	ldrb	r1, [r7, #5]
 8006f32:	7e3b      	ldrb	r3, [r7, #24]
 8006f34:	9303      	str	r3, [sp, #12]
 8006f36:	88fb      	ldrh	r3, [r7, #6]
 8006f38:	9302      	str	r3, [sp, #8]
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	2301      	movs	r3, #1
 8006f40:	9300      	str	r3, [sp, #0]
 8006f42:	2300      	movs	r3, #0
 8006f44:	2200      	movs	r2, #0
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f001 f933 	bl	80081b2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b088      	sub	sp, #32
 8006f5a:	af04      	add	r7, sp, #16
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	4611      	mov	r1, r2
 8006f62:	461a      	mov	r2, r3
 8006f64:	460b      	mov	r3, r1
 8006f66:	80fb      	strh	r3, [r7, #6]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006f6c:	7979      	ldrb	r1, [r7, #5]
 8006f6e:	2300      	movs	r3, #0
 8006f70:	9303      	str	r3, [sp, #12]
 8006f72:	88fb      	ldrh	r3, [r7, #6]
 8006f74:	9302      	str	r3, [sp, #8]
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	9301      	str	r3, [sp, #4]
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	2201      	movs	r2, #1
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f001 f915 	bl	80081b2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006f88:	2300      	movs	r3, #0

}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b088      	sub	sp, #32
 8006f96:	af04      	add	r7, sp, #16
 8006f98:	60f8      	str	r0, [r7, #12]
 8006f9a:	60b9      	str	r1, [r7, #8]
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	80fb      	strh	r3, [r7, #6]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d001      	beq.n	8006fb6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006fb6:	7979      	ldrb	r1, [r7, #5]
 8006fb8:	7e3b      	ldrb	r3, [r7, #24]
 8006fba:	9303      	str	r3, [sp, #12]
 8006fbc:	88fb      	ldrh	r3, [r7, #6]
 8006fbe:	9302      	str	r3, [sp, #8]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	9301      	str	r3, [sp, #4]
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	2302      	movs	r3, #2
 8006fca:	2200      	movs	r2, #0
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f001 f8f0 	bl	80081b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b088      	sub	sp, #32
 8006fe0:	af04      	add	r7, sp, #16
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	461a      	mov	r2, r3
 8006fea:	460b      	mov	r3, r1
 8006fec:	80fb      	strh	r3, [r7, #6]
 8006fee:	4613      	mov	r3, r2
 8006ff0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006ff2:	7979      	ldrb	r1, [r7, #5]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	9303      	str	r3, [sp, #12]
 8006ff8:	88fb      	ldrh	r3, [r7, #6]
 8006ffa:	9302      	str	r3, [sp, #8]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	9301      	str	r3, [sp, #4]
 8007000:	2301      	movs	r3, #1
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	2302      	movs	r3, #2
 8007006:	2201      	movs	r2, #1
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f001 f8d2 	bl	80081b2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af04      	add	r7, sp, #16
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	4608      	mov	r0, r1
 8007022:	4611      	mov	r1, r2
 8007024:	461a      	mov	r2, r3
 8007026:	4603      	mov	r3, r0
 8007028:	70fb      	strb	r3, [r7, #3]
 800702a:	460b      	mov	r3, r1
 800702c:	70bb      	strb	r3, [r7, #2]
 800702e:	4613      	mov	r3, r2
 8007030:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007032:	7878      	ldrb	r0, [r7, #1]
 8007034:	78ba      	ldrb	r2, [r7, #2]
 8007036:	78f9      	ldrb	r1, [r7, #3]
 8007038:	8b3b      	ldrh	r3, [r7, #24]
 800703a:	9302      	str	r3, [sp, #8]
 800703c:	7d3b      	ldrb	r3, [r7, #20]
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	7c3b      	ldrb	r3, [r7, #16]
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	4603      	mov	r3, r0
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f001 f865 	bl	8008116 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800704c:	2300      	movs	r3, #0

}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	460b      	mov	r3, r1
 8007060:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007062:	78fb      	ldrb	r3, [r7, #3]
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f001 f884 	bl	8008174 <USBH_LL_ClosePipe>

  return USBH_OK;
 800706c:	2300      	movs	r3, #0

}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	460b      	mov	r3, r1
 8007080:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f831 	bl	80070ea <USBH_GetFreePipe>
 8007088:	4603      	mov	r3, r0
 800708a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800708c:	89fb      	ldrh	r3, [r7, #14]
 800708e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007092:	4293      	cmp	r3, r2
 8007094:	d007      	beq.n	80070a6 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007096:	78fb      	ldrb	r3, [r7, #3]
 8007098:	89fa      	ldrh	r2, [r7, #14]
 800709a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	32e0      	adds	r2, #224	; 0xe0
 80070a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80070a6:	89fb      	ldrh	r3, [r7, #14]
 80070a8:	b2db      	uxtb	r3, r3
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	460b      	mov	r3, r1
 80070bc:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80070be:	78fb      	ldrb	r3, [r7, #3]
 80070c0:	2b0a      	cmp	r3, #10
 80070c2:	d80b      	bhi.n	80070dc <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80070c4:	78fa      	ldrb	r2, [r7, #3]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	32e0      	adds	r2, #224	; 0xe0
 80070ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ce:	78fa      	ldrb	r2, [r7, #3]
 80070d0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	32e0      	adds	r2, #224	; 0xe0
 80070d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80070ea:	b480      	push	{r7}
 80070ec:	b085      	sub	sp, #20
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80070f6:	2300      	movs	r3, #0
 80070f8:	73fb      	strb	r3, [r7, #15]
 80070fa:	e00e      	b.n	800711a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80070fc:	7bfa      	ldrb	r2, [r7, #15]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	32e0      	adds	r2, #224	; 0xe0
 8007102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d102      	bne.n	8007114 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	b29b      	uxth	r3, r3
 8007112:	e007      	b.n	8007124 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007114:	7bfb      	ldrb	r3, [r7, #15]
 8007116:	3301      	adds	r3, #1
 8007118:	73fb      	strb	r3, [r7, #15]
 800711a:	7bfb      	ldrb	r3, [r7, #15]
 800711c:	2b0a      	cmp	r3, #10
 800711e:	d9ed      	bls.n	80070fc <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007120:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007134:	f7f9 f9ce 	bl	80004d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007138:	f000 f820 	bl	800717c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800713c:	f000 fa7e 	bl	800763c <MX_GPIO_Init>
  MX_I2C1_Init();
 8007140:	f000 f8a0 	bl	8007284 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007144:	f000 f8cc 	bl	80072e0 <MX_I2S2_Init>
  MX_I2S3_Init();
 8007148:	f000 f8f8 	bl	800733c <MX_I2S3_Init>
  MX_SPI1_Init();
 800714c:	f000 f926 	bl	800739c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8007150:	f000 fe08 	bl	8007d64 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8007154:	f000 f958 	bl	8007408 <MX_TIM1_Init>
  MX_TIM4_Init();
 8007158:	f000 f9f8 	bl	800754c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800715c:	2100      	movs	r1, #0
 800715e:	4805      	ldr	r0, [pc, #20]	; (8007174 <main+0x44>)
 8007160:	f7fc fd94 	bl	8003c8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8007164:	210c      	movs	r1, #12
 8007166:	4804      	ldr	r0, [pc, #16]	; (8007178 <main+0x48>)
 8007168:	f7fc fd90 	bl	8003c8c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800716c:	f000 fe20 	bl	8007db0 <MX_USB_HOST_Process>
 8007170:	e7fc      	b.n	800716c <main+0x3c>
 8007172:	bf00      	nop
 8007174:	20000158 	.word	0x20000158
 8007178:	200000c4 	.word	0x200000c4

0800717c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b098      	sub	sp, #96	; 0x60
 8007180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007182:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007186:	2230      	movs	r2, #48	; 0x30
 8007188:	2100      	movs	r1, #0
 800718a:	4618      	mov	r0, r3
 800718c:	f001 f956 	bl	800843c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007190:	f107 031c 	add.w	r3, r7, #28
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	605a      	str	r2, [r3, #4]
 800719a:	609a      	str	r2, [r3, #8]
 800719c:	60da      	str	r2, [r3, #12]
 800719e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80071a0:	f107 0308 	add.w	r3, r7, #8
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	605a      	str	r2, [r3, #4]
 80071aa:	609a      	str	r2, [r3, #8]
 80071ac:	60da      	str	r2, [r3, #12]
 80071ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80071b0:	2300      	movs	r3, #0
 80071b2:	607b      	str	r3, [r7, #4]
 80071b4:	4b31      	ldr	r3, [pc, #196]	; (800727c <SystemClock_Config+0x100>)
 80071b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b8:	4a30      	ldr	r2, [pc, #192]	; (800727c <SystemClock_Config+0x100>)
 80071ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071be:	6413      	str	r3, [r2, #64]	; 0x40
 80071c0:	4b2e      	ldr	r3, [pc, #184]	; (800727c <SystemClock_Config+0x100>)
 80071c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c8:	607b      	str	r3, [r7, #4]
 80071ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80071cc:	2300      	movs	r3, #0
 80071ce:	603b      	str	r3, [r7, #0]
 80071d0:	4b2b      	ldr	r3, [pc, #172]	; (8007280 <SystemClock_Config+0x104>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80071d8:	4a29      	ldr	r2, [pc, #164]	; (8007280 <SystemClock_Config+0x104>)
 80071da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	4b27      	ldr	r3, [pc, #156]	; (8007280 <SystemClock_Config+0x104>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80071e8:	603b      	str	r3, [r7, #0]
 80071ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80071ec:	2301      	movs	r3, #1
 80071ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80071f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80071f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80071f6:	2302      	movs	r3, #2
 80071f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80071fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80071fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007200:	2308      	movs	r3, #8
 8007202:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8007204:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8007208:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800720a:	2304      	movs	r3, #4
 800720c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800720e:	2307      	movs	r3, #7
 8007210:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007212:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007216:	4618      	mov	r0, r3
 8007218:	f7fb fedc 	bl	8002fd4 <HAL_RCC_OscConfig>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d001      	beq.n	8007226 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8007222:	f000 fae5 	bl	80077f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007226:	230f      	movs	r3, #15
 8007228:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800722a:	2302      	movs	r3, #2
 800722c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800722e:	2300      	movs	r3, #0
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007236:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007238:	2300      	movs	r3, #0
 800723a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800723c:	f107 031c 	add.w	r3, r7, #28
 8007240:	2102      	movs	r1, #2
 8007242:	4618      	mov	r0, r3
 8007244:	f7fc f936 	bl	80034b4 <HAL_RCC_ClockConfig>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800724e:	f000 facf 	bl	80077f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8007252:	2301      	movs	r3, #1
 8007254:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8007256:	23c0      	movs	r3, #192	; 0xc0
 8007258:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800725a:	2302      	movs	r3, #2
 800725c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800725e:	f107 0308 	add.w	r3, r7, #8
 8007262:	4618      	mov	r0, r3
 8007264:	f7fc fb04 	bl	8003870 <HAL_RCCEx_PeriphCLKConfig>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800726e:	f000 fabf 	bl	80077f0 <Error_Handler>
  }
}
 8007272:	bf00      	nop
 8007274:	3760      	adds	r7, #96	; 0x60
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	40023800 	.word	0x40023800
 8007280:	40007000 	.word	0x40007000

08007284 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007288:	4b12      	ldr	r3, [pc, #72]	; (80072d4 <MX_I2C1_Init+0x50>)
 800728a:	4a13      	ldr	r2, [pc, #76]	; (80072d8 <MX_I2C1_Init+0x54>)
 800728c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800728e:	4b11      	ldr	r3, [pc, #68]	; (80072d4 <MX_I2C1_Init+0x50>)
 8007290:	4a12      	ldr	r2, [pc, #72]	; (80072dc <MX_I2C1_Init+0x58>)
 8007292:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007294:	4b0f      	ldr	r3, [pc, #60]	; (80072d4 <MX_I2C1_Init+0x50>)
 8007296:	2200      	movs	r2, #0
 8007298:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800729a:	4b0e      	ldr	r3, [pc, #56]	; (80072d4 <MX_I2C1_Init+0x50>)
 800729c:	2200      	movs	r2, #0
 800729e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80072a0:	4b0c      	ldr	r3, [pc, #48]	; (80072d4 <MX_I2C1_Init+0x50>)
 80072a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80072a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80072a8:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <MX_I2C1_Init+0x50>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80072ae:	4b09      	ldr	r3, [pc, #36]	; (80072d4 <MX_I2C1_Init+0x50>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80072b4:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <MX_I2C1_Init+0x50>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80072ba:	4b06      	ldr	r3, [pc, #24]	; (80072d4 <MX_I2C1_Init+0x50>)
 80072bc:	2200      	movs	r2, #0
 80072be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80072c0:	4804      	ldr	r0, [pc, #16]	; (80072d4 <MX_I2C1_Init+0x50>)
 80072c2:	f7fb f8af 	bl	8002424 <HAL_I2C_Init>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80072cc:	f000 fa90 	bl	80077f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80072d0:	bf00      	nop
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20000104 	.word	0x20000104
 80072d8:	40005400 	.word	0x40005400
 80072dc:	000186a0 	.word	0x000186a0

080072e0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80072e4:	4b13      	ldr	r3, [pc, #76]	; (8007334 <MX_I2S2_Init+0x54>)
 80072e6:	4a14      	ldr	r2, [pc, #80]	; (8007338 <MX_I2S2_Init+0x58>)
 80072e8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80072ea:	4b12      	ldr	r3, [pc, #72]	; (8007334 <MX_I2S2_Init+0x54>)
 80072ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072f0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80072f2:	4b10      	ldr	r3, [pc, #64]	; (8007334 <MX_I2S2_Init+0x54>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80072f8:	4b0e      	ldr	r3, [pc, #56]	; (8007334 <MX_I2S2_Init+0x54>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80072fe:	4b0d      	ldr	r3, [pc, #52]	; (8007334 <MX_I2S2_Init+0x54>)
 8007300:	2200      	movs	r2, #0
 8007302:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8007304:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <MX_I2S2_Init+0x54>)
 8007306:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800730a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800730c:	4b09      	ldr	r3, [pc, #36]	; (8007334 <MX_I2S2_Init+0x54>)
 800730e:	2200      	movs	r2, #0
 8007310:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8007312:	4b08      	ldr	r3, [pc, #32]	; (8007334 <MX_I2S2_Init+0x54>)
 8007314:	2200      	movs	r2, #0
 8007316:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8007318:	4b06      	ldr	r3, [pc, #24]	; (8007334 <MX_I2S2_Init+0x54>)
 800731a:	2200      	movs	r2, #0
 800731c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800731e:	4805      	ldr	r0, [pc, #20]	; (8007334 <MX_I2S2_Init+0x54>)
 8007320:	f7fb f9b8 	bl	8002694 <HAL_I2S_Init>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800732a:	f000 fa61 	bl	80077f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800732e:	bf00      	nop
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	200001f0 	.word	0x200001f0
 8007338:	40003800 	.word	0x40003800

0800733c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8007340:	4b13      	ldr	r3, [pc, #76]	; (8007390 <MX_I2S3_Init+0x54>)
 8007342:	4a14      	ldr	r2, [pc, #80]	; (8007394 <MX_I2S3_Init+0x58>)
 8007344:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8007346:	4b12      	ldr	r3, [pc, #72]	; (8007390 <MX_I2S3_Init+0x54>)
 8007348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800734c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800734e:	4b10      	ldr	r3, [pc, #64]	; (8007390 <MX_I2S3_Init+0x54>)
 8007350:	2200      	movs	r2, #0
 8007352:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8007354:	4b0e      	ldr	r3, [pc, #56]	; (8007390 <MX_I2S3_Init+0x54>)
 8007356:	2200      	movs	r2, #0
 8007358:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800735a:	4b0d      	ldr	r3, [pc, #52]	; (8007390 <MX_I2S3_Init+0x54>)
 800735c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007360:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8007362:	4b0b      	ldr	r3, [pc, #44]	; (8007390 <MX_I2S3_Init+0x54>)
 8007364:	4a0c      	ldr	r2, [pc, #48]	; (8007398 <MX_I2S3_Init+0x5c>)
 8007366:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8007368:	4b09      	ldr	r3, [pc, #36]	; (8007390 <MX_I2S3_Init+0x54>)
 800736a:	2200      	movs	r2, #0
 800736c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800736e:	4b08      	ldr	r3, [pc, #32]	; (8007390 <MX_I2S3_Init+0x54>)
 8007370:	2200      	movs	r2, #0
 8007372:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8007374:	4b06      	ldr	r3, [pc, #24]	; (8007390 <MX_I2S3_Init+0x54>)
 8007376:	2200      	movs	r2, #0
 8007378:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800737a:	4805      	ldr	r0, [pc, #20]	; (8007390 <MX_I2S3_Init+0x54>)
 800737c:	f7fb f98a 	bl	8002694 <HAL_I2S_Init>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8007386:	f000 fa33 	bl	80077f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800738a:	bf00      	nop
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20000238 	.word	0x20000238
 8007394:	40003c00 	.word	0x40003c00
 8007398:	00017700 	.word	0x00017700

0800739c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80073a0:	4b17      	ldr	r3, [pc, #92]	; (8007400 <MX_SPI1_Init+0x64>)
 80073a2:	4a18      	ldr	r2, [pc, #96]	; (8007404 <MX_SPI1_Init+0x68>)
 80073a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80073a6:	4b16      	ldr	r3, [pc, #88]	; (8007400 <MX_SPI1_Init+0x64>)
 80073a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80073ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80073ae:	4b14      	ldr	r3, [pc, #80]	; (8007400 <MX_SPI1_Init+0x64>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80073b4:	4b12      	ldr	r3, [pc, #72]	; (8007400 <MX_SPI1_Init+0x64>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80073ba:	4b11      	ldr	r3, [pc, #68]	; (8007400 <MX_SPI1_Init+0x64>)
 80073bc:	2200      	movs	r2, #0
 80073be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80073c0:	4b0f      	ldr	r3, [pc, #60]	; (8007400 <MX_SPI1_Init+0x64>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80073c6:	4b0e      	ldr	r3, [pc, #56]	; (8007400 <MX_SPI1_Init+0x64>)
 80073c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073ce:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <MX_SPI1_Init+0x64>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80073d4:	4b0a      	ldr	r3, [pc, #40]	; (8007400 <MX_SPI1_Init+0x64>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80073da:	4b09      	ldr	r3, [pc, #36]	; (8007400 <MX_SPI1_Init+0x64>)
 80073dc:	2200      	movs	r2, #0
 80073de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073e0:	4b07      	ldr	r3, [pc, #28]	; (8007400 <MX_SPI1_Init+0x64>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80073e6:	4b06      	ldr	r3, [pc, #24]	; (8007400 <MX_SPI1_Init+0x64>)
 80073e8:	220a      	movs	r2, #10
 80073ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80073ec:	4804      	ldr	r0, [pc, #16]	; (8007400 <MX_SPI1_Init+0x64>)
 80073ee:	f7fc fb89 	bl	8003b04 <HAL_SPI_Init>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80073f8:	f000 f9fa 	bl	80077f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80073fc:	bf00      	nop
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	20000198 	.word	0x20000198
 8007404:	40013000 	.word	0x40013000

08007408 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b096      	sub	sp, #88	; 0x58
 800740c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800740e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007412:	2200      	movs	r2, #0
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	605a      	str	r2, [r3, #4]
 8007418:	609a      	str	r2, [r3, #8]
 800741a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800741c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
 800742e:	605a      	str	r2, [r3, #4]
 8007430:	609a      	str	r2, [r3, #8]
 8007432:	60da      	str	r2, [r3, #12]
 8007434:	611a      	str	r2, [r3, #16]
 8007436:	615a      	str	r2, [r3, #20]
 8007438:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800743a:	1d3b      	adds	r3, r7, #4
 800743c:	2220      	movs	r2, #32
 800743e:	2100      	movs	r1, #0
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fffb 	bl	800843c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007446:	4b3f      	ldr	r3, [pc, #252]	; (8007544 <MX_TIM1_Init+0x13c>)
 8007448:	4a3f      	ldr	r2, [pc, #252]	; (8007548 <MX_TIM1_Init+0x140>)
 800744a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800744c:	4b3d      	ldr	r3, [pc, #244]	; (8007544 <MX_TIM1_Init+0x13c>)
 800744e:	2253      	movs	r2, #83	; 0x53
 8007450:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007452:	4b3c      	ldr	r3, [pc, #240]	; (8007544 <MX_TIM1_Init+0x13c>)
 8007454:	2200      	movs	r2, #0
 8007456:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8007458:	4b3a      	ldr	r3, [pc, #232]	; (8007544 <MX_TIM1_Init+0x13c>)
 800745a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800745e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007460:	4b38      	ldr	r3, [pc, #224]	; (8007544 <MX_TIM1_Init+0x13c>)
 8007462:	2200      	movs	r2, #0
 8007464:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007466:	4b37      	ldr	r3, [pc, #220]	; (8007544 <MX_TIM1_Init+0x13c>)
 8007468:	2200      	movs	r2, #0
 800746a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800746c:	4b35      	ldr	r3, [pc, #212]	; (8007544 <MX_TIM1_Init+0x13c>)
 800746e:	2280      	movs	r2, #128	; 0x80
 8007470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007472:	4834      	ldr	r0, [pc, #208]	; (8007544 <MX_TIM1_Init+0x13c>)
 8007474:	f7fc fbaa 	bl	8003bcc <HAL_TIM_Base_Init>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800747e:	f000 f9b7 	bl	80077f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007486:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007488:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800748c:	4619      	mov	r1, r3
 800748e:	482d      	ldr	r0, [pc, #180]	; (8007544 <MX_TIM1_Init+0x13c>)
 8007490:	f7fc fcf4 	bl	8003e7c <HAL_TIM_ConfigClockSource>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800749a:	f000 f9a9 	bl	80077f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800749e:	4829      	ldr	r0, [pc, #164]	; (8007544 <MX_TIM1_Init+0x13c>)
 80074a0:	f7fc fbbf 	bl	8003c22 <HAL_TIM_PWM_Init>
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d001      	beq.n	80074ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80074aa:	f000 f9a1 	bl	80077f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074ae:	2300      	movs	r3, #0
 80074b0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074b2:	2300      	movs	r3, #0
 80074b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80074b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80074ba:	4619      	mov	r1, r3
 80074bc:	4821      	ldr	r0, [pc, #132]	; (8007544 <MX_TIM1_Init+0x13c>)
 80074be:	f7fd f861 	bl	8004584 <HAL_TIMEx_MasterConfigSynchronization>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80074c8:	f000 f992 	bl	80077f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80074cc:	2360      	movs	r3, #96	; 0x60
 80074ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1500;
 80074d0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80074d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80074d6:	2300      	movs	r3, #0
 80074d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80074da:	2300      	movs	r3, #0
 80074dc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80074de:	2300      	movs	r3, #0
 80074e0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80074e2:	2300      	movs	r3, #0
 80074e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80074e6:	2300      	movs	r3, #0
 80074e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80074ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074ee:	2200      	movs	r2, #0
 80074f0:	4619      	mov	r1, r3
 80074f2:	4814      	ldr	r0, [pc, #80]	; (8007544 <MX_TIM1_Init+0x13c>)
 80074f4:	f7fc fbfc 	bl	8003cf0 <HAL_TIM_PWM_ConfigChannel>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80074fe:	f000 f977 	bl	80077f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007502:	2300      	movs	r3, #0
 8007504:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007506:	2300      	movs	r3, #0
 8007508:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800750a:	2300      	movs	r3, #0
 800750c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800750e:	2300      	movs	r3, #0
 8007510:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007512:	2300      	movs	r3, #0
 8007514:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800751a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800751c:	2300      	movs	r3, #0
 800751e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007520:	1d3b      	adds	r3, r7, #4
 8007522:	4619      	mov	r1, r3
 8007524:	4807      	ldr	r0, [pc, #28]	; (8007544 <MX_TIM1_Init+0x13c>)
 8007526:	f7fd f89b 	bl	8004660 <HAL_TIMEx_ConfigBreakDeadTime>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8007530:	f000 f95e 	bl	80077f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8007534:	4803      	ldr	r0, [pc, #12]	; (8007544 <MX_TIM1_Init+0x13c>)
 8007536:	f000 fb37 	bl	8007ba8 <HAL_TIM_MspPostInit>

}
 800753a:	bf00      	nop
 800753c:	3758      	adds	r7, #88	; 0x58
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	20000158 	.word	0x20000158
 8007548:	40010000 	.word	0x40010000

0800754c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08e      	sub	sp, #56	; 0x38
 8007550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007556:	2200      	movs	r2, #0
 8007558:	601a      	str	r2, [r3, #0]
 800755a:	605a      	str	r2, [r3, #4]
 800755c:	609a      	str	r2, [r3, #8]
 800755e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007560:	f107 0320 	add.w	r3, r7, #32
 8007564:	2200      	movs	r2, #0
 8007566:	601a      	str	r2, [r3, #0]
 8007568:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800756a:	1d3b      	adds	r3, r7, #4
 800756c:	2200      	movs	r2, #0
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	605a      	str	r2, [r3, #4]
 8007572:	609a      	str	r2, [r3, #8]
 8007574:	60da      	str	r2, [r3, #12]
 8007576:	611a      	str	r2, [r3, #16]
 8007578:	615a      	str	r2, [r3, #20]
 800757a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800757c:	4b2d      	ldr	r3, [pc, #180]	; (8007634 <MX_TIM4_Init+0xe8>)
 800757e:	4a2e      	ldr	r2, [pc, #184]	; (8007638 <MX_TIM4_Init+0xec>)
 8007580:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8007582:	4b2c      	ldr	r3, [pc, #176]	; (8007634 <MX_TIM4_Init+0xe8>)
 8007584:	2253      	movs	r2, #83	; 0x53
 8007586:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007588:	4b2a      	ldr	r3, [pc, #168]	; (8007634 <MX_TIM4_Init+0xe8>)
 800758a:	2200      	movs	r2, #0
 800758c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 800758e:	4b29      	ldr	r3, [pc, #164]	; (8007634 <MX_TIM4_Init+0xe8>)
 8007590:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007594:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007596:	4b27      	ldr	r3, [pc, #156]	; (8007634 <MX_TIM4_Init+0xe8>)
 8007598:	2200      	movs	r2, #0
 800759a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800759c:	4b25      	ldr	r3, [pc, #148]	; (8007634 <MX_TIM4_Init+0xe8>)
 800759e:	2280      	movs	r2, #128	; 0x80
 80075a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80075a2:	4824      	ldr	r0, [pc, #144]	; (8007634 <MX_TIM4_Init+0xe8>)
 80075a4:	f7fc fb12 	bl	8003bcc <HAL_TIM_Base_Init>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80075ae:	f000 f91f 	bl	80077f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80075b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80075b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80075bc:	4619      	mov	r1, r3
 80075be:	481d      	ldr	r0, [pc, #116]	; (8007634 <MX_TIM4_Init+0xe8>)
 80075c0:	f7fc fc5c 	bl	8003e7c <HAL_TIM_ConfigClockSource>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80075ca:	f000 f911 	bl	80077f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80075ce:	4819      	ldr	r0, [pc, #100]	; (8007634 <MX_TIM4_Init+0xe8>)
 80075d0:	f7fc fb27 	bl	8003c22 <HAL_TIM_PWM_Init>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80075da:	f000 f909 	bl	80077f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80075de:	2300      	movs	r3, #0
 80075e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80075e2:	2300      	movs	r3, #0
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80075e6:	f107 0320 	add.w	r3, r7, #32
 80075ea:	4619      	mov	r1, r3
 80075ec:	4811      	ldr	r0, [pc, #68]	; (8007634 <MX_TIM4_Init+0xe8>)
 80075ee:	f7fc ffc9 	bl	8004584 <HAL_TIMEx_MasterConfigSynchronization>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80075f8:	f000 f8fa 	bl	80077f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80075fc:	2360      	movs	r3, #96	; 0x60
 80075fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8007600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007604:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007606:	2300      	movs	r3, #0
 8007608:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800760a:	2300      	movs	r3, #0
 800760c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800760e:	1d3b      	adds	r3, r7, #4
 8007610:	220c      	movs	r2, #12
 8007612:	4619      	mov	r1, r3
 8007614:	4807      	ldr	r0, [pc, #28]	; (8007634 <MX_TIM4_Init+0xe8>)
 8007616:	f7fc fb6b 	bl	8003cf0 <HAL_TIM_PWM_ConfigChannel>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d001      	beq.n	8007624 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8007620:	f000 f8e6 	bl	80077f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8007624:	4803      	ldr	r0, [pc, #12]	; (8007634 <MX_TIM4_Init+0xe8>)
 8007626:	f000 fabf 	bl	8007ba8 <HAL_TIM_MspPostInit>

}
 800762a:	bf00      	nop
 800762c:	3738      	adds	r7, #56	; 0x38
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	200000c4 	.word	0x200000c4
 8007638:	40000800 	.word	0x40000800

0800763c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08c      	sub	sp, #48	; 0x30
 8007640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007642:	f107 031c 	add.w	r3, r7, #28
 8007646:	2200      	movs	r2, #0
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	605a      	str	r2, [r3, #4]
 800764c:	609a      	str	r2, [r3, #8]
 800764e:	60da      	str	r2, [r3, #12]
 8007650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007652:	2300      	movs	r3, #0
 8007654:	61bb      	str	r3, [r7, #24]
 8007656:	4b60      	ldr	r3, [pc, #384]	; (80077d8 <MX_GPIO_Init+0x19c>)
 8007658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765a:	4a5f      	ldr	r2, [pc, #380]	; (80077d8 <MX_GPIO_Init+0x19c>)
 800765c:	f043 0310 	orr.w	r3, r3, #16
 8007660:	6313      	str	r3, [r2, #48]	; 0x30
 8007662:	4b5d      	ldr	r3, [pc, #372]	; (80077d8 <MX_GPIO_Init+0x19c>)
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	f003 0310 	and.w	r3, r3, #16
 800766a:	61bb      	str	r3, [r7, #24]
 800766c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800766e:	2300      	movs	r3, #0
 8007670:	617b      	str	r3, [r7, #20]
 8007672:	4b59      	ldr	r3, [pc, #356]	; (80077d8 <MX_GPIO_Init+0x19c>)
 8007674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007676:	4a58      	ldr	r2, [pc, #352]	; (80077d8 <MX_GPIO_Init+0x19c>)
 8007678:	f043 0304 	orr.w	r3, r3, #4
 800767c:	6313      	str	r3, [r2, #48]	; 0x30
 800767e:	4b56      	ldr	r3, [pc, #344]	; (80077d8 <MX_GPIO_Init+0x19c>)
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	617b      	str	r3, [r7, #20]
 8007688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800768a:	2300      	movs	r3, #0
 800768c:	613b      	str	r3, [r7, #16]
 800768e:	4b52      	ldr	r3, [pc, #328]	; (80077d8 <MX_GPIO_Init+0x19c>)
 8007690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007692:	4a51      	ldr	r2, [pc, #324]	; (80077d8 <MX_GPIO_Init+0x19c>)
 8007694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007698:	6313      	str	r3, [r2, #48]	; 0x30
 800769a:	4b4f      	ldr	r3, [pc, #316]	; (80077d8 <MX_GPIO_Init+0x19c>)
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a2:	613b      	str	r3, [r7, #16]
 80076a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80076a6:	2300      	movs	r3, #0
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	4b4b      	ldr	r3, [pc, #300]	; (80077d8 <MX_GPIO_Init+0x19c>)
 80076ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ae:	4a4a      	ldr	r2, [pc, #296]	; (80077d8 <MX_GPIO_Init+0x19c>)
 80076b0:	f043 0301 	orr.w	r3, r3, #1
 80076b4:	6313      	str	r3, [r2, #48]	; 0x30
 80076b6:	4b48      	ldr	r3, [pc, #288]	; (80077d8 <MX_GPIO_Init+0x19c>)
 80076b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80076c2:	2300      	movs	r3, #0
 80076c4:	60bb      	str	r3, [r7, #8]
 80076c6:	4b44      	ldr	r3, [pc, #272]	; (80077d8 <MX_GPIO_Init+0x19c>)
 80076c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ca:	4a43      	ldr	r2, [pc, #268]	; (80077d8 <MX_GPIO_Init+0x19c>)
 80076cc:	f043 0302 	orr.w	r3, r3, #2
 80076d0:	6313      	str	r3, [r2, #48]	; 0x30
 80076d2:	4b41      	ldr	r3, [pc, #260]	; (80077d8 <MX_GPIO_Init+0x19c>)
 80076d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	60bb      	str	r3, [r7, #8]
 80076dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80076de:	2300      	movs	r3, #0
 80076e0:	607b      	str	r3, [r7, #4]
 80076e2:	4b3d      	ldr	r3, [pc, #244]	; (80077d8 <MX_GPIO_Init+0x19c>)
 80076e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e6:	4a3c      	ldr	r2, [pc, #240]	; (80077d8 <MX_GPIO_Init+0x19c>)
 80076e8:	f043 0308 	orr.w	r3, r3, #8
 80076ec:	6313      	str	r3, [r2, #48]	; 0x30
 80076ee:	4b3a      	ldr	r3, [pc, #232]	; (80077d8 <MX_GPIO_Init+0x19c>)
 80076f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f2:	f003 0308 	and.w	r3, r3, #8
 80076f6:	607b      	str	r3, [r7, #4]
 80076f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80076fa:	2200      	movs	r2, #0
 80076fc:	2108      	movs	r1, #8
 80076fe:	4837      	ldr	r0, [pc, #220]	; (80077dc <MX_GPIO_Init+0x1a0>)
 8007700:	f7f9 fa10 	bl	8000b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8007704:	2201      	movs	r2, #1
 8007706:	2101      	movs	r1, #1
 8007708:	4835      	ldr	r0, [pc, #212]	; (80077e0 <MX_GPIO_Init+0x1a4>)
 800770a:	f7f9 fa0b 	bl	8000b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 800770e:	2200      	movs	r2, #0
 8007710:	f246 0110 	movw	r1, #24592	; 0x6010
 8007714:	4833      	ldr	r0, [pc, #204]	; (80077e4 <MX_GPIO_Init+0x1a8>)
 8007716:	f7f9 fa05 	bl	8000b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800771a:	2304      	movs	r3, #4
 800771c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800771e:	2300      	movs	r3, #0
 8007720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007722:	2300      	movs	r3, #0
 8007724:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007726:	f107 031c 	add.w	r3, r7, #28
 800772a:	4619      	mov	r1, r3
 800772c:	482b      	ldr	r0, [pc, #172]	; (80077dc <MX_GPIO_Init+0x1a0>)
 800772e:	f7f9 f877 	bl	8000820 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8007732:	2308      	movs	r3, #8
 8007734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007736:	2301      	movs	r3, #1
 8007738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800773a:	2300      	movs	r3, #0
 800773c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800773e:	2300      	movs	r3, #0
 8007740:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8007742:	f107 031c 	add.w	r3, r7, #28
 8007746:	4619      	mov	r1, r3
 8007748:	4824      	ldr	r0, [pc, #144]	; (80077dc <MX_GPIO_Init+0x1a0>)
 800774a:	f7f9 f869 	bl	8000820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 800774e:	2332      	movs	r3, #50	; 0x32
 8007750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007752:	4b25      	ldr	r3, [pc, #148]	; (80077e8 <MX_GPIO_Init+0x1ac>)
 8007754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007756:	2300      	movs	r3, #0
 8007758:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800775a:	f107 031c 	add.w	r3, r7, #28
 800775e:	4619      	mov	r1, r3
 8007760:	481e      	ldr	r0, [pc, #120]	; (80077dc <MX_GPIO_Init+0x1a0>)
 8007762:	f7f9 f85d 	bl	8000820 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8007766:	2301      	movs	r3, #1
 8007768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800776a:	2301      	movs	r3, #1
 800776c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800776e:	2300      	movs	r3, #0
 8007770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007772:	2300      	movs	r3, #0
 8007774:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8007776:	f107 031c 	add.w	r3, r7, #28
 800777a:	4619      	mov	r1, r3
 800777c:	4818      	ldr	r0, [pc, #96]	; (80077e0 <MX_GPIO_Init+0x1a4>)
 800777e:	f7f9 f84f 	bl	8000820 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8007782:	2301      	movs	r3, #1
 8007784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007786:	4b18      	ldr	r3, [pc, #96]	; (80077e8 <MX_GPIO_Init+0x1ac>)
 8007788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800778a:	2300      	movs	r3, #0
 800778c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800778e:	f107 031c 	add.w	r3, r7, #28
 8007792:	4619      	mov	r1, r3
 8007794:	4815      	ldr	r0, [pc, #84]	; (80077ec <MX_GPIO_Init+0x1b0>)
 8007796:	f7f9 f843 	bl	8000820 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD5_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|Audio_RST_Pin;
 800779a:	f246 0310 	movw	r3, #24592	; 0x6010
 800779e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077a0:	2301      	movs	r3, #1
 80077a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077a4:	2300      	movs	r3, #0
 80077a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077a8:	2300      	movs	r3, #0
 80077aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077ac:	f107 031c 	add.w	r3, r7, #28
 80077b0:	4619      	mov	r1, r3
 80077b2:	480c      	ldr	r0, [pc, #48]	; (80077e4 <MX_GPIO_Init+0x1a8>)
 80077b4:	f7f9 f834 	bl	8000820 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80077b8:	2320      	movs	r3, #32
 80077ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077bc:	2300      	movs	r3, #0
 80077be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077c0:	2300      	movs	r3, #0
 80077c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80077c4:	f107 031c 	add.w	r3, r7, #28
 80077c8:	4619      	mov	r1, r3
 80077ca:	4806      	ldr	r0, [pc, #24]	; (80077e4 <MX_GPIO_Init+0x1a8>)
 80077cc:	f7f9 f828 	bl	8000820 <HAL_GPIO_Init>

}
 80077d0:	bf00      	nop
 80077d2:	3730      	adds	r7, #48	; 0x30
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	40023800 	.word	0x40023800
 80077dc:	40021000 	.word	0x40021000
 80077e0:	40020800 	.word	0x40020800
 80077e4:	40020c00 	.word	0x40020c00
 80077e8:	10120000 	.word	0x10120000
 80077ec:	40020000 	.word	0x40020000

080077f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80077f4:	bf00      	nop
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
	...

08007800 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007806:	2300      	movs	r3, #0
 8007808:	607b      	str	r3, [r7, #4]
 800780a:	4b10      	ldr	r3, [pc, #64]	; (800784c <HAL_MspInit+0x4c>)
 800780c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780e:	4a0f      	ldr	r2, [pc, #60]	; (800784c <HAL_MspInit+0x4c>)
 8007810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007814:	6453      	str	r3, [r2, #68]	; 0x44
 8007816:	4b0d      	ldr	r3, [pc, #52]	; (800784c <HAL_MspInit+0x4c>)
 8007818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800781e:	607b      	str	r3, [r7, #4]
 8007820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007822:	2300      	movs	r3, #0
 8007824:	603b      	str	r3, [r7, #0]
 8007826:	4b09      	ldr	r3, [pc, #36]	; (800784c <HAL_MspInit+0x4c>)
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	4a08      	ldr	r2, [pc, #32]	; (800784c <HAL_MspInit+0x4c>)
 800782c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007830:	6413      	str	r3, [r2, #64]	; 0x40
 8007832:	4b06      	ldr	r3, [pc, #24]	; (800784c <HAL_MspInit+0x4c>)
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800783e:	2007      	movs	r0, #7
 8007840:	f7f8 ffac 	bl	800079c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007844:	bf00      	nop
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	40023800 	.word	0x40023800

08007850 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08a      	sub	sp, #40	; 0x28
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007858:	f107 0314 	add.w	r3, r7, #20
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	605a      	str	r2, [r3, #4]
 8007862:	609a      	str	r2, [r3, #8]
 8007864:	60da      	str	r2, [r3, #12]
 8007866:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a19      	ldr	r2, [pc, #100]	; (80078d4 <HAL_I2C_MspInit+0x84>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d12c      	bne.n	80078cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007872:	2300      	movs	r3, #0
 8007874:	613b      	str	r3, [r7, #16]
 8007876:	4b18      	ldr	r3, [pc, #96]	; (80078d8 <HAL_I2C_MspInit+0x88>)
 8007878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787a:	4a17      	ldr	r2, [pc, #92]	; (80078d8 <HAL_I2C_MspInit+0x88>)
 800787c:	f043 0302 	orr.w	r3, r3, #2
 8007880:	6313      	str	r3, [r2, #48]	; 0x30
 8007882:	4b15      	ldr	r3, [pc, #84]	; (80078d8 <HAL_I2C_MspInit+0x88>)
 8007884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	613b      	str	r3, [r7, #16]
 800788c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800788e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8007892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007894:	2312      	movs	r3, #18
 8007896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007898:	2301      	movs	r3, #1
 800789a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800789c:	2300      	movs	r3, #0
 800789e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80078a0:	2304      	movs	r3, #4
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078a4:	f107 0314 	add.w	r3, r7, #20
 80078a8:	4619      	mov	r1, r3
 80078aa:	480c      	ldr	r0, [pc, #48]	; (80078dc <HAL_I2C_MspInit+0x8c>)
 80078ac:	f7f8 ffb8 	bl	8000820 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80078b0:	2300      	movs	r3, #0
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	4b08      	ldr	r3, [pc, #32]	; (80078d8 <HAL_I2C_MspInit+0x88>)
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	4a07      	ldr	r2, [pc, #28]	; (80078d8 <HAL_I2C_MspInit+0x88>)
 80078ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078be:	6413      	str	r3, [r2, #64]	; 0x40
 80078c0:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <HAL_I2C_MspInit+0x88>)
 80078c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80078cc:	bf00      	nop
 80078ce:	3728      	adds	r7, #40	; 0x28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	40005400 	.word	0x40005400
 80078d8:	40023800 	.word	0x40023800
 80078dc:	40020400 	.word	0x40020400

080078e0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b08e      	sub	sp, #56	; 0x38
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ec:	2200      	movs	r2, #0
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	605a      	str	r2, [r3, #4]
 80078f2:	609a      	str	r2, [r3, #8]
 80078f4:	60da      	str	r2, [r3, #12]
 80078f6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a51      	ldr	r2, [pc, #324]	; (8007a44 <HAL_I2S_MspInit+0x164>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d14b      	bne.n	800799a <HAL_I2S_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007902:	2300      	movs	r3, #0
 8007904:	623b      	str	r3, [r7, #32]
 8007906:	4b50      	ldr	r3, [pc, #320]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 8007908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790a:	4a4f      	ldr	r2, [pc, #316]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 800790c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007910:	6413      	str	r3, [r2, #64]	; 0x40
 8007912:	4b4d      	ldr	r3, [pc, #308]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800791a:	623b      	str	r3, [r7, #32]
 800791c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800791e:	2300      	movs	r3, #0
 8007920:	61fb      	str	r3, [r7, #28]
 8007922:	4b49      	ldr	r3, [pc, #292]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 8007924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007926:	4a48      	ldr	r2, [pc, #288]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 8007928:	f043 0304 	orr.w	r3, r3, #4
 800792c:	6313      	str	r3, [r2, #48]	; 0x30
 800792e:	4b46      	ldr	r3, [pc, #280]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 8007930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007932:	f003 0304 	and.w	r3, r3, #4
 8007936:	61fb      	str	r3, [r7, #28]
 8007938:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800793a:	2300      	movs	r3, #0
 800793c:	61bb      	str	r3, [r7, #24]
 800793e:	4b42      	ldr	r3, [pc, #264]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 8007940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007942:	4a41      	ldr	r2, [pc, #260]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 8007944:	f043 0302 	orr.w	r3, r3, #2
 8007948:	6313      	str	r3, [r2, #48]	; 0x30
 800794a:	4b3f      	ldr	r3, [pc, #252]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 800794c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794e:	f003 0302 	and.w	r3, r3, #2
 8007952:	61bb      	str	r3, [r7, #24]
 8007954:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration    
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS 
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8007956:	2308      	movs	r3, #8
 8007958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800795a:	2302      	movs	r3, #2
 800795c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800795e:	2300      	movs	r3, #0
 8007960:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007962:	2300      	movs	r3, #0
 8007964:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007966:	2305      	movs	r3, #5
 8007968:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800796a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800796e:	4619      	mov	r1, r3
 8007970:	4836      	ldr	r0, [pc, #216]	; (8007a4c <HAL_I2S_MspInit+0x16c>)
 8007972:	f7f8 ff55 	bl	8000820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8007976:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800797a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800797c:	2302      	movs	r3, #2
 800797e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007980:	2300      	movs	r3, #0
 8007982:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007984:	2300      	movs	r3, #0
 8007986:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007988:	2305      	movs	r3, #5
 800798a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800798c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007990:	4619      	mov	r1, r3
 8007992:	482f      	ldr	r0, [pc, #188]	; (8007a50 <HAL_I2S_MspInit+0x170>)
 8007994:	f7f8 ff44 	bl	8000820 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007998:	e04f      	b.n	8007a3a <HAL_I2S_MspInit+0x15a>
  else if(hi2s->Instance==SPI3)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a2d      	ldr	r2, [pc, #180]	; (8007a54 <HAL_I2S_MspInit+0x174>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d14a      	bne.n	8007a3a <HAL_I2S_MspInit+0x15a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	4b27      	ldr	r3, [pc, #156]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 80079aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ac:	4a26      	ldr	r2, [pc, #152]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 80079ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079b2:	6413      	str	r3, [r2, #64]	; 0x40
 80079b4:	4b24      	ldr	r3, [pc, #144]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 80079b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079c0:	2300      	movs	r3, #0
 80079c2:	613b      	str	r3, [r7, #16]
 80079c4:	4b20      	ldr	r3, [pc, #128]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 80079c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c8:	4a1f      	ldr	r2, [pc, #124]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 80079ca:	f043 0301 	orr.w	r3, r3, #1
 80079ce:	6313      	str	r3, [r2, #48]	; 0x30
 80079d0:	4b1d      	ldr	r3, [pc, #116]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 80079d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	613b      	str	r3, [r7, #16]
 80079da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80079dc:	2300      	movs	r3, #0
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	4b19      	ldr	r3, [pc, #100]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 80079e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e4:	4a18      	ldr	r2, [pc, #96]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 80079e6:	f043 0304 	orr.w	r3, r3, #4
 80079ea:	6313      	str	r3, [r2, #48]	; 0x30
 80079ec:	4b16      	ldr	r3, [pc, #88]	; (8007a48 <HAL_I2S_MspInit+0x168>)
 80079ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f0:	f003 0304 	and.w	r3, r3, #4
 80079f4:	60fb      	str	r3, [r7, #12]
 80079f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80079f8:	2310      	movs	r3, #16
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079fc:	2302      	movs	r3, #2
 80079fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a00:	2300      	movs	r3, #0
 8007a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a04:	2300      	movs	r3, #0
 8007a06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007a08:	2306      	movs	r3, #6
 8007a0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8007a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a10:	4619      	mov	r1, r3
 8007a12:	4811      	ldr	r0, [pc, #68]	; (8007a58 <HAL_I2S_MspInit+0x178>)
 8007a14:	f7f8 ff04 	bl	8000820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8007a18:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8007a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a1e:	2302      	movs	r3, #2
 8007a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a22:	2300      	movs	r3, #0
 8007a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a26:	2300      	movs	r3, #0
 8007a28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007a2a:	2306      	movs	r3, #6
 8007a2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a32:	4619      	mov	r1, r3
 8007a34:	4805      	ldr	r0, [pc, #20]	; (8007a4c <HAL_I2S_MspInit+0x16c>)
 8007a36:	f7f8 fef3 	bl	8000820 <HAL_GPIO_Init>
}
 8007a3a:	bf00      	nop
 8007a3c:	3738      	adds	r7, #56	; 0x38
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	40003800 	.word	0x40003800
 8007a48:	40023800 	.word	0x40023800
 8007a4c:	40020800 	.word	0x40020800
 8007a50:	40020400 	.word	0x40020400
 8007a54:	40003c00 	.word	0x40003c00
 8007a58:	40020000 	.word	0x40020000

08007a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b08a      	sub	sp, #40	; 0x28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a64:	f107 0314 	add.w	r3, r7, #20
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]
 8007a6c:	605a      	str	r2, [r3, #4]
 8007a6e:	609a      	str	r2, [r3, #8]
 8007a70:	60da      	str	r2, [r3, #12]
 8007a72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a19      	ldr	r2, [pc, #100]	; (8007ae0 <HAL_SPI_MspInit+0x84>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d12b      	bne.n	8007ad6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007a7e:	2300      	movs	r3, #0
 8007a80:	613b      	str	r3, [r7, #16]
 8007a82:	4b18      	ldr	r3, [pc, #96]	; (8007ae4 <HAL_SPI_MspInit+0x88>)
 8007a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a86:	4a17      	ldr	r2, [pc, #92]	; (8007ae4 <HAL_SPI_MspInit+0x88>)
 8007a88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8007a8e:	4b15      	ldr	r3, [pc, #84]	; (8007ae4 <HAL_SPI_MspInit+0x88>)
 8007a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a96:	613b      	str	r3, [r7, #16]
 8007a98:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60fb      	str	r3, [r7, #12]
 8007a9e:	4b11      	ldr	r3, [pc, #68]	; (8007ae4 <HAL_SPI_MspInit+0x88>)
 8007aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa2:	4a10      	ldr	r2, [pc, #64]	; (8007ae4 <HAL_SPI_MspInit+0x88>)
 8007aa4:	f043 0301 	orr.w	r3, r3, #1
 8007aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8007aaa:	4b0e      	ldr	r3, [pc, #56]	; (8007ae4 <HAL_SPI_MspInit+0x88>)
 8007aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8007ab6:	23e0      	movs	r3, #224	; 0xe0
 8007ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aba:	2302      	movs	r3, #2
 8007abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007ac6:	2305      	movs	r3, #5
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007aca:	f107 0314 	add.w	r3, r7, #20
 8007ace:	4619      	mov	r1, r3
 8007ad0:	4805      	ldr	r0, [pc, #20]	; (8007ae8 <HAL_SPI_MspInit+0x8c>)
 8007ad2:	f7f8 fea5 	bl	8000820 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007ad6:	bf00      	nop
 8007ad8:	3728      	adds	r7, #40	; 0x28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	40013000 	.word	0x40013000
 8007ae4:	40023800 	.word	0x40023800
 8007ae8:	40020000 	.word	0x40020000

08007aec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b08a      	sub	sp, #40	; 0x28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007af4:	f107 0314 	add.w	r3, r7, #20
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	605a      	str	r2, [r3, #4]
 8007afe:	609a      	str	r2, [r3, #8]
 8007b00:	60da      	str	r2, [r3, #12]
 8007b02:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a23      	ldr	r2, [pc, #140]	; (8007b98 <HAL_TIM_Base_MspInit+0xac>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d10e      	bne.n	8007b2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007b0e:	2300      	movs	r3, #0
 8007b10:	613b      	str	r3, [r7, #16]
 8007b12:	4b22      	ldr	r3, [pc, #136]	; (8007b9c <HAL_TIM_Base_MspInit+0xb0>)
 8007b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b16:	4a21      	ldr	r2, [pc, #132]	; (8007b9c <HAL_TIM_Base_MspInit+0xb0>)
 8007b18:	f043 0301 	orr.w	r3, r3, #1
 8007b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8007b1e:	4b1f      	ldr	r3, [pc, #124]	; (8007b9c <HAL_TIM_Base_MspInit+0xb0>)
 8007b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	613b      	str	r3, [r7, #16]
 8007b28:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007b2a:	e031      	b.n	8007b90 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM4)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a1b      	ldr	r2, [pc, #108]	; (8007ba0 <HAL_TIM_Base_MspInit+0xb4>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d12c      	bne.n	8007b90 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	4b18      	ldr	r3, [pc, #96]	; (8007b9c <HAL_TIM_Base_MspInit+0xb0>)
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	4a17      	ldr	r2, [pc, #92]	; (8007b9c <HAL_TIM_Base_MspInit+0xb0>)
 8007b40:	f043 0304 	orr.w	r3, r3, #4
 8007b44:	6413      	str	r3, [r2, #64]	; 0x40
 8007b46:	4b15      	ldr	r3, [pc, #84]	; (8007b9c <HAL_TIM_Base_MspInit+0xb0>)
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	f003 0304 	and.w	r3, r3, #4
 8007b4e:	60fb      	str	r3, [r7, #12]
 8007b50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b52:	2300      	movs	r3, #0
 8007b54:	60bb      	str	r3, [r7, #8]
 8007b56:	4b11      	ldr	r3, [pc, #68]	; (8007b9c <HAL_TIM_Base_MspInit+0xb0>)
 8007b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5a:	4a10      	ldr	r2, [pc, #64]	; (8007b9c <HAL_TIM_Base_MspInit+0xb0>)
 8007b5c:	f043 0308 	orr.w	r3, r3, #8
 8007b60:	6313      	str	r3, [r2, #48]	; 0x30
 8007b62:	4b0e      	ldr	r3, [pc, #56]	; (8007b9c <HAL_TIM_Base_MspInit+0xb0>)
 8007b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b66:	f003 0308 	and.w	r3, r3, #8
 8007b6a:	60bb      	str	r3, [r7, #8]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b74:	2302      	movs	r3, #2
 8007b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007b80:	2302      	movs	r3, #2
 8007b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007b84:	f107 0314 	add.w	r3, r7, #20
 8007b88:	4619      	mov	r1, r3
 8007b8a:	4806      	ldr	r0, [pc, #24]	; (8007ba4 <HAL_TIM_Base_MspInit+0xb8>)
 8007b8c:	f7f8 fe48 	bl	8000820 <HAL_GPIO_Init>
}
 8007b90:	bf00      	nop
 8007b92:	3728      	adds	r7, #40	; 0x28
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	40010000 	.word	0x40010000
 8007b9c:	40023800 	.word	0x40023800
 8007ba0:	40000800 	.word	0x40000800
 8007ba4:	40020c00 	.word	0x40020c00

08007ba8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b08a      	sub	sp, #40	; 0x28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bb0:	f107 0314 	add.w	r3, r7, #20
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	601a      	str	r2, [r3, #0]
 8007bb8:	605a      	str	r2, [r3, #4]
 8007bba:	609a      	str	r2, [r3, #8]
 8007bbc:	60da      	str	r2, [r3, #12]
 8007bbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a25      	ldr	r2, [pc, #148]	; (8007c5c <HAL_TIM_MspPostInit+0xb4>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d11f      	bne.n	8007c0a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007bca:	2300      	movs	r3, #0
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	4b24      	ldr	r3, [pc, #144]	; (8007c60 <HAL_TIM_MspPostInit+0xb8>)
 8007bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bd2:	4a23      	ldr	r2, [pc, #140]	; (8007c60 <HAL_TIM_MspPostInit+0xb8>)
 8007bd4:	f043 0310 	orr.w	r3, r3, #16
 8007bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8007bda:	4b21      	ldr	r3, [pc, #132]	; (8007c60 <HAL_TIM_MspPostInit+0xb8>)
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bde:	f003 0310 	and.w	r3, r3, #16
 8007be2:	613b      	str	r3, [r7, #16]
 8007be4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bec:	2302      	movs	r3, #2
 8007bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007bfc:	f107 0314 	add.w	r3, r7, #20
 8007c00:	4619      	mov	r1, r3
 8007c02:	4818      	ldr	r0, [pc, #96]	; (8007c64 <HAL_TIM_MspPostInit+0xbc>)
 8007c04:	f7f8 fe0c 	bl	8000820 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007c08:	e023      	b.n	8007c52 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a16      	ldr	r2, [pc, #88]	; (8007c68 <HAL_TIM_MspPostInit+0xc0>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d11e      	bne.n	8007c52 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c14:	2300      	movs	r3, #0
 8007c16:	60fb      	str	r3, [r7, #12]
 8007c18:	4b11      	ldr	r3, [pc, #68]	; (8007c60 <HAL_TIM_MspPostInit+0xb8>)
 8007c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c1c:	4a10      	ldr	r2, [pc, #64]	; (8007c60 <HAL_TIM_MspPostInit+0xb8>)
 8007c1e:	f043 0308 	orr.w	r3, r3, #8
 8007c22:	6313      	str	r3, [r2, #48]	; 0x30
 8007c24:	4b0e      	ldr	r3, [pc, #56]	; (8007c60 <HAL_TIM_MspPostInit+0xb8>)
 8007c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c28:	f003 0308 	and.w	r3, r3, #8
 8007c2c:	60fb      	str	r3, [r7, #12]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007c30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c36:	2302      	movs	r3, #2
 8007c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007c42:	2302      	movs	r3, #2
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007c46:	f107 0314 	add.w	r3, r7, #20
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	4807      	ldr	r0, [pc, #28]	; (8007c6c <HAL_TIM_MspPostInit+0xc4>)
 8007c4e:	f7f8 fde7 	bl	8000820 <HAL_GPIO_Init>
}
 8007c52:	bf00      	nop
 8007c54:	3728      	adds	r7, #40	; 0x28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	40010000 	.word	0x40010000
 8007c60:	40023800 	.word	0x40023800
 8007c64:	40021000 	.word	0x40021000
 8007c68:	40000800 	.word	0x40000800
 8007c6c:	40020c00 	.word	0x40020c00

08007c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c70:	b480      	push	{r7}
 8007c72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007c74:	bf00      	nop
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c82:	e7fe      	b.n	8007c82 <HardFault_Handler+0x4>

08007c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c84:	b480      	push	{r7}
 8007c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c88:	e7fe      	b.n	8007c88 <MemManage_Handler+0x4>

08007c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c8e:	e7fe      	b.n	8007c8e <BusFault_Handler+0x4>

08007c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c90:	b480      	push	{r7}
 8007c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c94:	e7fe      	b.n	8007c94 <UsageFault_Handler+0x4>

08007c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c96:	b480      	push	{r7}
 8007c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c9a:	bf00      	nop
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007ca8:	bf00      	nop
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007cb6:	bf00      	nop
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007cc4:	f7f8 fc58 	bl	8000578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007cc8:	bf00      	nop
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8007cd0:	4802      	ldr	r0, [pc, #8]	; (8007cdc <OTG_FS_IRQHandler+0x10>)
 8007cd2:	f7f9 f9c5 	bl	8001060 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007cd6:	bf00      	nop
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	2000064c 	.word	0x2000064c

08007ce0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007ce8:	4b11      	ldr	r3, [pc, #68]	; (8007d30 <_sbrk+0x50>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d102      	bne.n	8007cf6 <_sbrk+0x16>
		heap_end = &end;
 8007cf0:	4b0f      	ldr	r3, [pc, #60]	; (8007d30 <_sbrk+0x50>)
 8007cf2:	4a10      	ldr	r2, [pc, #64]	; (8007d34 <_sbrk+0x54>)
 8007cf4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007cf6:	4b0e      	ldr	r3, [pc, #56]	; (8007d30 <_sbrk+0x50>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007cfc:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <_sbrk+0x50>)
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4413      	add	r3, r2
 8007d04:	466a      	mov	r2, sp
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d907      	bls.n	8007d1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007d0a:	f000 fb5d 	bl	80083c8 <__errno>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	230c      	movs	r3, #12
 8007d12:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007d14:	f04f 33ff 	mov.w	r3, #4294967295
 8007d18:	e006      	b.n	8007d28 <_sbrk+0x48>
	}

	heap_end += incr;
 8007d1a:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <_sbrk+0x50>)
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4413      	add	r3, r2
 8007d22:	4a03      	ldr	r2, [pc, #12]	; (8007d30 <_sbrk+0x50>)
 8007d24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007d26:	68fb      	ldr	r3, [r7, #12]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	200000b0 	.word	0x200000b0
 8007d34:	20000918 	.word	0x20000918

08007d38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007d3c:	4b08      	ldr	r3, [pc, #32]	; (8007d60 <SystemInit+0x28>)
 8007d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d42:	4a07      	ldr	r2, [pc, #28]	; (8007d60 <SystemInit+0x28>)
 8007d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007d4c:	4b04      	ldr	r3, [pc, #16]	; (8007d60 <SystemInit+0x28>)
 8007d4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007d52:	609a      	str	r2, [r3, #8]
#endif
}
 8007d54:	bf00      	nop
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	e000ed00 	.word	0xe000ed00

08007d64 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007d68:	2201      	movs	r2, #1
 8007d6a:	490e      	ldr	r1, [pc, #56]	; (8007da4 <MX_USB_HOST_Init+0x40>)
 8007d6c:	480e      	ldr	r0, [pc, #56]	; (8007da8 <MX_USB_HOST_Init+0x44>)
 8007d6e:	f7fd ffa1 	bl	8005cb4 <USBH_Init>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007d78:	f7ff fd3a 	bl	80077f0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007d7c:	490b      	ldr	r1, [pc, #44]	; (8007dac <MX_USB_HOST_Init+0x48>)
 8007d7e:	480a      	ldr	r0, [pc, #40]	; (8007da8 <MX_USB_HOST_Init+0x44>)
 8007d80:	f7fe f80b 	bl	8005d9a <USBH_RegisterClass>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007d8a:	f7ff fd31 	bl	80077f0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007d8e:	4806      	ldr	r0, [pc, #24]	; (8007da8 <MX_USB_HOST_Init+0x44>)
 8007d90:	f7fe f890 	bl	8005eb4 <USBH_Start>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007d9a:	f7ff fd29 	bl	80077f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007d9e:	bf00      	nop
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	08007dc5 	.word	0x08007dc5
 8007da8:	20000280 	.word	0x20000280
 8007dac:	20000008 	.word	0x20000008

08007db0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007db4:	4802      	ldr	r0, [pc, #8]	; (8007dc0 <MX_USB_HOST_Process+0x10>)
 8007db6:	f7fe f88d 	bl	8005ed4 <USBH_Process>
}
 8007dba:	bf00      	nop
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20000280 	.word	0x20000280

08007dc4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	460b      	mov	r3, r1
 8007dce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007dd0:	78fb      	ldrb	r3, [r7, #3]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	2b04      	cmp	r3, #4
 8007dd6:	d819      	bhi.n	8007e0c <USBH_UserProcess+0x48>
 8007dd8:	a201      	add	r2, pc, #4	; (adr r2, 8007de0 <USBH_UserProcess+0x1c>)
 8007dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dde:	bf00      	nop
 8007de0:	08007e0d 	.word	0x08007e0d
 8007de4:	08007dfd 	.word	0x08007dfd
 8007de8:	08007e0d 	.word	0x08007e0d
 8007dec:	08007e05 	.word	0x08007e05
 8007df0:	08007df5 	.word	0x08007df5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007df4:	4b09      	ldr	r3, [pc, #36]	; (8007e1c <USBH_UserProcess+0x58>)
 8007df6:	2203      	movs	r2, #3
 8007df8:	701a      	strb	r2, [r3, #0]
  break;
 8007dfa:	e008      	b.n	8007e0e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007dfc:	4b07      	ldr	r3, [pc, #28]	; (8007e1c <USBH_UserProcess+0x58>)
 8007dfe:	2202      	movs	r2, #2
 8007e00:	701a      	strb	r2, [r3, #0]
  break;
 8007e02:	e004      	b.n	8007e0e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e04:	4b05      	ldr	r3, [pc, #20]	; (8007e1c <USBH_UserProcess+0x58>)
 8007e06:	2201      	movs	r2, #1
 8007e08:	701a      	strb	r2, [r3, #0]
  break;
 8007e0a:	e000      	b.n	8007e0e <USBH_UserProcess+0x4a>

  default:
  break;
 8007e0c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e0e:	bf00      	nop
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	200000b4 	.word	0x200000b4

08007e20 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b08a      	sub	sp, #40	; 0x28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e28:	f107 0314 	add.w	r3, r7, #20
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	605a      	str	r2, [r3, #4]
 8007e32:	609a      	str	r2, [r3, #8]
 8007e34:	60da      	str	r2, [r3, #12]
 8007e36:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e40:	d147      	bne.n	8007ed2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e42:	2300      	movs	r3, #0
 8007e44:	613b      	str	r3, [r7, #16]
 8007e46:	4b25      	ldr	r3, [pc, #148]	; (8007edc <HAL_HCD_MspInit+0xbc>)
 8007e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4a:	4a24      	ldr	r2, [pc, #144]	; (8007edc <HAL_HCD_MspInit+0xbc>)
 8007e4c:	f043 0301 	orr.w	r3, r3, #1
 8007e50:	6313      	str	r3, [r2, #48]	; 0x30
 8007e52:	4b22      	ldr	r3, [pc, #136]	; (8007edc <HAL_HCD_MspInit+0xbc>)
 8007e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	613b      	str	r3, [r7, #16]
 8007e5c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e64:	2300      	movs	r3, #0
 8007e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e6c:	f107 0314 	add.w	r3, r7, #20
 8007e70:	4619      	mov	r1, r3
 8007e72:	481b      	ldr	r0, [pc, #108]	; (8007ee0 <HAL_HCD_MspInit+0xc0>)
 8007e74:	f7f8 fcd4 	bl	8000820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007e78:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e7e:	2302      	movs	r3, #2
 8007e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e82:	2300      	movs	r3, #0
 8007e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e86:	2303      	movs	r3, #3
 8007e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e8a:	230a      	movs	r3, #10
 8007e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e8e:	f107 0314 	add.w	r3, r7, #20
 8007e92:	4619      	mov	r1, r3
 8007e94:	4812      	ldr	r0, [pc, #72]	; (8007ee0 <HAL_HCD_MspInit+0xc0>)
 8007e96:	f7f8 fcc3 	bl	8000820 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e9a:	4b10      	ldr	r3, [pc, #64]	; (8007edc <HAL_HCD_MspInit+0xbc>)
 8007e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9e:	4a0f      	ldr	r2, [pc, #60]	; (8007edc <HAL_HCD_MspInit+0xbc>)
 8007ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea4:	6353      	str	r3, [r2, #52]	; 0x34
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	4b0c      	ldr	r3, [pc, #48]	; (8007edc <HAL_HCD_MspInit+0xbc>)
 8007eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eae:	4a0b      	ldr	r2, [pc, #44]	; (8007edc <HAL_HCD_MspInit+0xbc>)
 8007eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8007eb6:	4b09      	ldr	r3, [pc, #36]	; (8007edc <HAL_HCD_MspInit+0xbc>)
 8007eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	2043      	movs	r0, #67	; 0x43
 8007ec8:	f7f8 fc73 	bl	80007b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ecc:	2043      	movs	r0, #67	; 0x43
 8007ece:	f7f8 fc8c 	bl	80007ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ed2:	bf00      	nop
 8007ed4:	3728      	adds	r7, #40	; 0x28
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	40023800 	.word	0x40023800
 8007ee0:	40020000 	.word	0x40020000

08007ee4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe fa9f 	bl	8006436 <USBH_LL_IncTimer>
}
 8007ef8:	bf00      	nop
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fe fae4 	bl	80064dc <USBH_LL_Connect>
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fe fafc 	bl	8006528 <USBH_LL_Disconnect>
}
 8007f30:	bf00      	nop
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
 8007f44:	4613      	mov	r3, r2
 8007f46:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe fa91 	bl	800648a <USBH_LL_PortEnabled>
} 
 8007f68:	bf00      	nop
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fe fa91 	bl	80064a6 <USBH_LL_PortDisabled>
} 
 8007f84:	bf00      	nop
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d12a      	bne.n	8007ff4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007f9e:	4a18      	ldr	r2, [pc, #96]	; (8008000 <USBH_LL_Init+0x74>)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a15      	ldr	r2, [pc, #84]	; (8008000 <USBH_LL_Init+0x74>)
 8007faa:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fae:	4b14      	ldr	r3, [pc, #80]	; (8008000 <USBH_LL_Init+0x74>)
 8007fb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fb4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007fb6:	4b12      	ldr	r3, [pc, #72]	; (8008000 <USBH_LL_Init+0x74>)
 8007fb8:	2208      	movs	r2, #8
 8007fba:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007fbc:	4b10      	ldr	r3, [pc, #64]	; (8008000 <USBH_LL_Init+0x74>)
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fc2:	4b0f      	ldr	r3, [pc, #60]	; (8008000 <USBH_LL_Init+0x74>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007fc8:	4b0d      	ldr	r3, [pc, #52]	; (8008000 <USBH_LL_Init+0x74>)
 8007fca:	2202      	movs	r2, #2
 8007fcc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007fce:	4b0c      	ldr	r3, [pc, #48]	; (8008000 <USBH_LL_Init+0x74>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007fd4:	480a      	ldr	r0, [pc, #40]	; (8008000 <USBH_LL_Init+0x74>)
 8007fd6:	f7f8 fdbe 	bl	8000b56 <HAL_HCD_Init>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007fe0:	f7ff fc06 	bl	80077f0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007fe4:	4806      	ldr	r0, [pc, #24]	; (8008000 <USBH_LL_Init+0x74>)
 8007fe6:	f7f9 f9b9 	bl	800135c <HAL_HCD_GetCurrentFrame>
 8007fea:	4603      	mov	r3, r0
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7fe fa12 	bl	8006418 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	2000064c 	.word	0x2000064c

08008004 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008010:	2300      	movs	r3, #0
 8008012:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800801a:	4618      	mov	r0, r3
 800801c:	f7f9 f926 	bl	800126c <HAL_HCD_Start>
 8008020:	4603      	mov	r3, r0
 8008022:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	4618      	mov	r0, r3
 8008028:	f000 f95c 	bl	80082e4 <USBH_Get_USB_Status>
 800802c:	4603      	mov	r3, r0
 800802e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008030:	7bbb      	ldrb	r3, [r7, #14]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008050:	4618      	mov	r0, r3
 8008052:	f7f9 f92e 	bl	80012b2 <HAL_HCD_Stop>
 8008056:	4603      	mov	r3, r0
 8008058:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800805a:	7bfb      	ldrb	r3, [r7, #15]
 800805c:	4618      	mov	r0, r3
 800805e:	f000 f941 	bl	80082e4 <USBH_Get_USB_Status>
 8008062:	4603      	mov	r3, r0
 8008064:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008066:	7bbb      	ldrb	r3, [r7, #14]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008078:	2301      	movs	r3, #1
 800807a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008082:	4618      	mov	r0, r3
 8008084:	f7f9 f978 	bl	8001378 <HAL_HCD_GetCurrentSpeed>
 8008088:	4603      	mov	r3, r0
 800808a:	2b01      	cmp	r3, #1
 800808c:	d007      	beq.n	800809e <USBH_LL_GetSpeed+0x2e>
 800808e:	2b01      	cmp	r3, #1
 8008090:	d302      	bcc.n	8008098 <USBH_LL_GetSpeed+0x28>
 8008092:	2b02      	cmp	r3, #2
 8008094:	d006      	beq.n	80080a4 <USBH_LL_GetSpeed+0x34>
 8008096:	e008      	b.n	80080aa <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008098:	2300      	movs	r3, #0
 800809a:	73fb      	strb	r3, [r7, #15]
    break;
 800809c:	e008      	b.n	80080b0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800809e:	2301      	movs	r3, #1
 80080a0:	73fb      	strb	r3, [r7, #15]
    break;
 80080a2:	e005      	b.n	80080b0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80080a4:	2302      	movs	r3, #2
 80080a6:	73fb      	strb	r3, [r7, #15]
    break;
 80080a8:	e002      	b.n	80080b0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80080aa:	2301      	movs	r3, #1
 80080ac:	73fb      	strb	r3, [r7, #15]
    break;
 80080ae:	bf00      	nop
  }
  return  speed;
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b084      	sub	sp, #16
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7f9 f90b 	bl	80012ec <HAL_HCD_ResetPort>
 80080d6:	4603      	mov	r3, r0
 80080d8:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80080da:	7bfb      	ldrb	r3, [r7, #15]
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 f901 	bl	80082e4 <USBH_Get_USB_Status>
 80080e2:	4603      	mov	r3, r0
 80080e4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80080e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	460b      	mov	r3, r1
 80080fa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008102:	78fa      	ldrb	r2, [r7, #3]
 8008104:	4611      	mov	r1, r2
 8008106:	4618      	mov	r0, r3
 8008108:	f7f9 f913 	bl	8001332 <HAL_HCD_HC_GetXferCount>
 800810c:	4603      	mov	r3, r0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008116:	b590      	push	{r4, r7, lr}
 8008118:	b089      	sub	sp, #36	; 0x24
 800811a:	af04      	add	r7, sp, #16
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	4608      	mov	r0, r1
 8008120:	4611      	mov	r1, r2
 8008122:	461a      	mov	r2, r3
 8008124:	4603      	mov	r3, r0
 8008126:	70fb      	strb	r3, [r7, #3]
 8008128:	460b      	mov	r3, r1
 800812a:	70bb      	strb	r3, [r7, #2]
 800812c:	4613      	mov	r3, r2
 800812e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800813e:	787c      	ldrb	r4, [r7, #1]
 8008140:	78ba      	ldrb	r2, [r7, #2]
 8008142:	78f9      	ldrb	r1, [r7, #3]
 8008144:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008146:	9302      	str	r3, [sp, #8]
 8008148:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800814c:	9301      	str	r3, [sp, #4]
 800814e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	4623      	mov	r3, r4
 8008156:	f7f8 fd60 	bl	8000c1a <HAL_HCD_HC_Init>
 800815a:	4603      	mov	r3, r0
 800815c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800815e:	7bfb      	ldrb	r3, [r7, #15]
 8008160:	4618      	mov	r0, r3
 8008162:	f000 f8bf 	bl	80082e4 <USBH_Get_USB_Status>
 8008166:	4603      	mov	r3, r0
 8008168:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800816a:	7bbb      	ldrb	r3, [r7, #14]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	bd90      	pop	{r4, r7, pc}

08008174 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800818e:	78fa      	ldrb	r2, [r7, #3]
 8008190:	4611      	mov	r1, r2
 8008192:	4618      	mov	r0, r3
 8008194:	f7f8 fdd9 	bl	8000d4a <HAL_HCD_HC_Halt>
 8008198:	4603      	mov	r3, r0
 800819a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800819c:	7bfb      	ldrb	r3, [r7, #15]
 800819e:	4618      	mov	r0, r3
 80081a0:	f000 f8a0 	bl	80082e4 <USBH_Get_USB_Status>
 80081a4:	4603      	mov	r3, r0
 80081a6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80081b2:	b590      	push	{r4, r7, lr}
 80081b4:	b089      	sub	sp, #36	; 0x24
 80081b6:	af04      	add	r7, sp, #16
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	4608      	mov	r0, r1
 80081bc:	4611      	mov	r1, r2
 80081be:	461a      	mov	r2, r3
 80081c0:	4603      	mov	r3, r0
 80081c2:	70fb      	strb	r3, [r7, #3]
 80081c4:	460b      	mov	r3, r1
 80081c6:	70bb      	strb	r3, [r7, #2]
 80081c8:	4613      	mov	r3, r2
 80081ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80081da:	787c      	ldrb	r4, [r7, #1]
 80081dc:	78ba      	ldrb	r2, [r7, #2]
 80081de:	78f9      	ldrb	r1, [r7, #3]
 80081e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081e4:	9303      	str	r3, [sp, #12]
 80081e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081e8:	9302      	str	r3, [sp, #8]
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ec:	9301      	str	r3, [sp, #4]
 80081ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	4623      	mov	r3, r4
 80081f6:	f7f8 fdcb 	bl	8000d90 <HAL_HCD_HC_SubmitRequest>
 80081fa:	4603      	mov	r3, r0
 80081fc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
 8008200:	4618      	mov	r0, r3
 8008202:	f000 f86f 	bl	80082e4 <USBH_Get_USB_Status>
 8008206:	4603      	mov	r3, r0
 8008208:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800820a:	7bbb      	ldrb	r3, [r7, #14]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	bd90      	pop	{r4, r7, pc}

08008214 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008226:	78fa      	ldrb	r2, [r7, #3]
 8008228:	4611      	mov	r1, r2
 800822a:	4618      	mov	r0, r3
 800822c:	f7f9 f86c 	bl	8001308 <HAL_HCD_HC_GetURBState>
 8008230:	4603      	mov	r3, r0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b082      	sub	sp, #8
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	460b      	mov	r3, r1
 8008244:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800824c:	2b01      	cmp	r3, #1
 800824e:	d103      	bne.n	8008258 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008250:	78fb      	ldrb	r3, [r7, #3]
 8008252:	4618      	mov	r0, r3
 8008254:	f000 f872 	bl	800833c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008258:	20c8      	movs	r0, #200	; 0xc8
 800825a:	f7f8 f9ad 	bl	80005b8 <HAL_Delay>
  return USBH_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	70fb      	strb	r3, [r7, #3]
 8008274:	4613      	mov	r3, r2
 8008276:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800827e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008280:	78fa      	ldrb	r2, [r7, #3]
 8008282:	68f9      	ldr	r1, [r7, #12]
 8008284:	4613      	mov	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	00db      	lsls	r3, r3, #3
 800828c:	440b      	add	r3, r1
 800828e:	333b      	adds	r3, #59	; 0x3b
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00a      	beq.n	80082ac <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	68f9      	ldr	r1, [r7, #12]
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	00db      	lsls	r3, r3, #3
 80082a2:	440b      	add	r3, r1
 80082a4:	3350      	adds	r3, #80	; 0x50
 80082a6:	78ba      	ldrb	r2, [r7, #2]
 80082a8:	701a      	strb	r2, [r3, #0]
 80082aa:	e009      	b.n	80082c0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80082ac:	78fa      	ldrb	r2, [r7, #3]
 80082ae:	68f9      	ldr	r1, [r7, #12]
 80082b0:	4613      	mov	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	440b      	add	r3, r1
 80082ba:	3351      	adds	r3, #81	; 0x51
 80082bc:	78ba      	ldrb	r2, [r7, #2]
 80082be:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7f8 f96e 	bl	80005b8 <HAL_Delay>
}
 80082dc:	bf00      	nop
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	4603      	mov	r3, r0
 80082ec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082f2:	79fb      	ldrb	r3, [r7, #7]
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	d817      	bhi.n	8008328 <USBH_Get_USB_Status+0x44>
 80082f8:	a201      	add	r2, pc, #4	; (adr r2, 8008300 <USBH_Get_USB_Status+0x1c>)
 80082fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fe:	bf00      	nop
 8008300:	08008311 	.word	0x08008311
 8008304:	08008317 	.word	0x08008317
 8008308:	0800831d 	.word	0x0800831d
 800830c:	08008323 	.word	0x08008323
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008310:	2300      	movs	r3, #0
 8008312:	73fb      	strb	r3, [r7, #15]
    break;
 8008314:	e00b      	b.n	800832e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008316:	2302      	movs	r3, #2
 8008318:	73fb      	strb	r3, [r7, #15]
    break;
 800831a:	e008      	b.n	800832e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800831c:	2301      	movs	r3, #1
 800831e:	73fb      	strb	r3, [r7, #15]
    break;
 8008320:	e005      	b.n	800832e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008322:	2302      	movs	r3, #2
 8008324:	73fb      	strb	r3, [r7, #15]
    break;
 8008326:	e002      	b.n	800832e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008328:	2302      	movs	r3, #2
 800832a:	73fb      	strb	r3, [r7, #15]
    break;
 800832c:	bf00      	nop
  }
  return usb_status;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008330:	4618      	mov	r0, r3
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	4603      	mov	r3, r0
 8008344:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8008346:	79fb      	ldrb	r3, [r7, #7]
 8008348:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d102      	bne.n	8008356 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8008350:	2301      	movs	r3, #1
 8008352:	73fb      	strb	r3, [r7, #15]
 8008354:	e001      	b.n	800835a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008356:	2300      	movs	r3, #0
 8008358:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	461a      	mov	r2, r3
 800835e:	2101      	movs	r1, #1
 8008360:	4803      	ldr	r0, [pc, #12]	; (8008370 <MX_DriverVbusFS+0x34>)
 8008362:	f7f8 fbdf 	bl	8000b24 <HAL_GPIO_WritePin>
}
 8008366:	bf00      	nop
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	40020800 	.word	0x40020800

08008374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80083ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008378:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800837a:	e003      	b.n	8008384 <LoopCopyDataInit>

0800837c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800837c:	4b0c      	ldr	r3, [pc, #48]	; (80083b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800837e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008380:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008382:	3104      	adds	r1, #4

08008384 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008384:	480b      	ldr	r0, [pc, #44]	; (80083b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008386:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008388:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800838a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800838c:	d3f6      	bcc.n	800837c <CopyDataInit>
  ldr  r2, =_sbss
 800838e:	4a0b      	ldr	r2, [pc, #44]	; (80083bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008390:	e002      	b.n	8008398 <LoopFillZerobss>

08008392 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008392:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008394:	f842 3b04 	str.w	r3, [r2], #4

08008398 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008398:	4b09      	ldr	r3, [pc, #36]	; (80083c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800839a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800839c:	d3f9      	bcc.n	8008392 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800839e:	f7ff fccb 	bl	8007d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80083a2:	f000 f817 	bl	80083d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80083a6:	f7fe fec3 	bl	8007130 <main>
  bx  lr    
 80083aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80083ac:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80083b0:	08008604 	.word	0x08008604
  ldr  r0, =_sdata
 80083b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80083b8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80083bc:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80083c0:	20000914 	.word	0x20000914

080083c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80083c4:	e7fe      	b.n	80083c4 <ADC_IRQHandler>
	...

080083c8 <__errno>:
 80083c8:	4b01      	ldr	r3, [pc, #4]	; (80083d0 <__errno+0x8>)
 80083ca:	6818      	ldr	r0, [r3, #0]
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	2000002c 	.word	0x2000002c

080083d4 <__libc_init_array>:
 80083d4:	b570      	push	{r4, r5, r6, lr}
 80083d6:	4e0d      	ldr	r6, [pc, #52]	; (800840c <__libc_init_array+0x38>)
 80083d8:	4c0d      	ldr	r4, [pc, #52]	; (8008410 <__libc_init_array+0x3c>)
 80083da:	1ba4      	subs	r4, r4, r6
 80083dc:	10a4      	asrs	r4, r4, #2
 80083de:	2500      	movs	r5, #0
 80083e0:	42a5      	cmp	r5, r4
 80083e2:	d109      	bne.n	80083f8 <__libc_init_array+0x24>
 80083e4:	4e0b      	ldr	r6, [pc, #44]	; (8008414 <__libc_init_array+0x40>)
 80083e6:	4c0c      	ldr	r4, [pc, #48]	; (8008418 <__libc_init_array+0x44>)
 80083e8:	f000 f8ea 	bl	80085c0 <_init>
 80083ec:	1ba4      	subs	r4, r4, r6
 80083ee:	10a4      	asrs	r4, r4, #2
 80083f0:	2500      	movs	r5, #0
 80083f2:	42a5      	cmp	r5, r4
 80083f4:	d105      	bne.n	8008402 <__libc_init_array+0x2e>
 80083f6:	bd70      	pop	{r4, r5, r6, pc}
 80083f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80083fc:	4798      	blx	r3
 80083fe:	3501      	adds	r5, #1
 8008400:	e7ee      	b.n	80083e0 <__libc_init_array+0xc>
 8008402:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008406:	4798      	blx	r3
 8008408:	3501      	adds	r5, #1
 800840a:	e7f2      	b.n	80083f2 <__libc_init_array+0x1e>
 800840c:	080085fc 	.word	0x080085fc
 8008410:	080085fc 	.word	0x080085fc
 8008414:	080085fc 	.word	0x080085fc
 8008418:	08008600 	.word	0x08008600

0800841c <malloc>:
 800841c:	4b02      	ldr	r3, [pc, #8]	; (8008428 <malloc+0xc>)
 800841e:	4601      	mov	r1, r0
 8008420:	6818      	ldr	r0, [r3, #0]
 8008422:	f000 b861 	b.w	80084e8 <_malloc_r>
 8008426:	bf00      	nop
 8008428:	2000002c 	.word	0x2000002c

0800842c <free>:
 800842c:	4b02      	ldr	r3, [pc, #8]	; (8008438 <free+0xc>)
 800842e:	4601      	mov	r1, r0
 8008430:	6818      	ldr	r0, [r3, #0]
 8008432:	f000 b80b 	b.w	800844c <_free_r>
 8008436:	bf00      	nop
 8008438:	2000002c 	.word	0x2000002c

0800843c <memset>:
 800843c:	4402      	add	r2, r0
 800843e:	4603      	mov	r3, r0
 8008440:	4293      	cmp	r3, r2
 8008442:	d100      	bne.n	8008446 <memset+0xa>
 8008444:	4770      	bx	lr
 8008446:	f803 1b01 	strb.w	r1, [r3], #1
 800844a:	e7f9      	b.n	8008440 <memset+0x4>

0800844c <_free_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4605      	mov	r5, r0
 8008450:	2900      	cmp	r1, #0
 8008452:	d045      	beq.n	80084e0 <_free_r+0x94>
 8008454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008458:	1f0c      	subs	r4, r1, #4
 800845a:	2b00      	cmp	r3, #0
 800845c:	bfb8      	it	lt
 800845e:	18e4      	addlt	r4, r4, r3
 8008460:	f000 f8ac 	bl	80085bc <__malloc_lock>
 8008464:	4a1f      	ldr	r2, [pc, #124]	; (80084e4 <_free_r+0x98>)
 8008466:	6813      	ldr	r3, [r2, #0]
 8008468:	4610      	mov	r0, r2
 800846a:	b933      	cbnz	r3, 800847a <_free_r+0x2e>
 800846c:	6063      	str	r3, [r4, #4]
 800846e:	6014      	str	r4, [r2, #0]
 8008470:	4628      	mov	r0, r5
 8008472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008476:	f000 b8a2 	b.w	80085be <__malloc_unlock>
 800847a:	42a3      	cmp	r3, r4
 800847c:	d90c      	bls.n	8008498 <_free_r+0x4c>
 800847e:	6821      	ldr	r1, [r4, #0]
 8008480:	1862      	adds	r2, r4, r1
 8008482:	4293      	cmp	r3, r2
 8008484:	bf04      	itt	eq
 8008486:	681a      	ldreq	r2, [r3, #0]
 8008488:	685b      	ldreq	r3, [r3, #4]
 800848a:	6063      	str	r3, [r4, #4]
 800848c:	bf04      	itt	eq
 800848e:	1852      	addeq	r2, r2, r1
 8008490:	6022      	streq	r2, [r4, #0]
 8008492:	6004      	str	r4, [r0, #0]
 8008494:	e7ec      	b.n	8008470 <_free_r+0x24>
 8008496:	4613      	mov	r3, r2
 8008498:	685a      	ldr	r2, [r3, #4]
 800849a:	b10a      	cbz	r2, 80084a0 <_free_r+0x54>
 800849c:	42a2      	cmp	r2, r4
 800849e:	d9fa      	bls.n	8008496 <_free_r+0x4a>
 80084a0:	6819      	ldr	r1, [r3, #0]
 80084a2:	1858      	adds	r0, r3, r1
 80084a4:	42a0      	cmp	r0, r4
 80084a6:	d10b      	bne.n	80084c0 <_free_r+0x74>
 80084a8:	6820      	ldr	r0, [r4, #0]
 80084aa:	4401      	add	r1, r0
 80084ac:	1858      	adds	r0, r3, r1
 80084ae:	4282      	cmp	r2, r0
 80084b0:	6019      	str	r1, [r3, #0]
 80084b2:	d1dd      	bne.n	8008470 <_free_r+0x24>
 80084b4:	6810      	ldr	r0, [r2, #0]
 80084b6:	6852      	ldr	r2, [r2, #4]
 80084b8:	605a      	str	r2, [r3, #4]
 80084ba:	4401      	add	r1, r0
 80084bc:	6019      	str	r1, [r3, #0]
 80084be:	e7d7      	b.n	8008470 <_free_r+0x24>
 80084c0:	d902      	bls.n	80084c8 <_free_r+0x7c>
 80084c2:	230c      	movs	r3, #12
 80084c4:	602b      	str	r3, [r5, #0]
 80084c6:	e7d3      	b.n	8008470 <_free_r+0x24>
 80084c8:	6820      	ldr	r0, [r4, #0]
 80084ca:	1821      	adds	r1, r4, r0
 80084cc:	428a      	cmp	r2, r1
 80084ce:	bf04      	itt	eq
 80084d0:	6811      	ldreq	r1, [r2, #0]
 80084d2:	6852      	ldreq	r2, [r2, #4]
 80084d4:	6062      	str	r2, [r4, #4]
 80084d6:	bf04      	itt	eq
 80084d8:	1809      	addeq	r1, r1, r0
 80084da:	6021      	streq	r1, [r4, #0]
 80084dc:	605c      	str	r4, [r3, #4]
 80084de:	e7c7      	b.n	8008470 <_free_r+0x24>
 80084e0:	bd38      	pop	{r3, r4, r5, pc}
 80084e2:	bf00      	nop
 80084e4:	200000b8 	.word	0x200000b8

080084e8 <_malloc_r>:
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	1ccd      	adds	r5, r1, #3
 80084ec:	f025 0503 	bic.w	r5, r5, #3
 80084f0:	3508      	adds	r5, #8
 80084f2:	2d0c      	cmp	r5, #12
 80084f4:	bf38      	it	cc
 80084f6:	250c      	movcc	r5, #12
 80084f8:	2d00      	cmp	r5, #0
 80084fa:	4606      	mov	r6, r0
 80084fc:	db01      	blt.n	8008502 <_malloc_r+0x1a>
 80084fe:	42a9      	cmp	r1, r5
 8008500:	d903      	bls.n	800850a <_malloc_r+0x22>
 8008502:	230c      	movs	r3, #12
 8008504:	6033      	str	r3, [r6, #0]
 8008506:	2000      	movs	r0, #0
 8008508:	bd70      	pop	{r4, r5, r6, pc}
 800850a:	f000 f857 	bl	80085bc <__malloc_lock>
 800850e:	4a21      	ldr	r2, [pc, #132]	; (8008594 <_malloc_r+0xac>)
 8008510:	6814      	ldr	r4, [r2, #0]
 8008512:	4621      	mov	r1, r4
 8008514:	b991      	cbnz	r1, 800853c <_malloc_r+0x54>
 8008516:	4c20      	ldr	r4, [pc, #128]	; (8008598 <_malloc_r+0xb0>)
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	b91b      	cbnz	r3, 8008524 <_malloc_r+0x3c>
 800851c:	4630      	mov	r0, r6
 800851e:	f000 f83d 	bl	800859c <_sbrk_r>
 8008522:	6020      	str	r0, [r4, #0]
 8008524:	4629      	mov	r1, r5
 8008526:	4630      	mov	r0, r6
 8008528:	f000 f838 	bl	800859c <_sbrk_r>
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	d124      	bne.n	800857a <_malloc_r+0x92>
 8008530:	230c      	movs	r3, #12
 8008532:	6033      	str	r3, [r6, #0]
 8008534:	4630      	mov	r0, r6
 8008536:	f000 f842 	bl	80085be <__malloc_unlock>
 800853a:	e7e4      	b.n	8008506 <_malloc_r+0x1e>
 800853c:	680b      	ldr	r3, [r1, #0]
 800853e:	1b5b      	subs	r3, r3, r5
 8008540:	d418      	bmi.n	8008574 <_malloc_r+0x8c>
 8008542:	2b0b      	cmp	r3, #11
 8008544:	d90f      	bls.n	8008566 <_malloc_r+0x7e>
 8008546:	600b      	str	r3, [r1, #0]
 8008548:	50cd      	str	r5, [r1, r3]
 800854a:	18cc      	adds	r4, r1, r3
 800854c:	4630      	mov	r0, r6
 800854e:	f000 f836 	bl	80085be <__malloc_unlock>
 8008552:	f104 000b 	add.w	r0, r4, #11
 8008556:	1d23      	adds	r3, r4, #4
 8008558:	f020 0007 	bic.w	r0, r0, #7
 800855c:	1ac3      	subs	r3, r0, r3
 800855e:	d0d3      	beq.n	8008508 <_malloc_r+0x20>
 8008560:	425a      	negs	r2, r3
 8008562:	50e2      	str	r2, [r4, r3]
 8008564:	e7d0      	b.n	8008508 <_malloc_r+0x20>
 8008566:	428c      	cmp	r4, r1
 8008568:	684b      	ldr	r3, [r1, #4]
 800856a:	bf16      	itet	ne
 800856c:	6063      	strne	r3, [r4, #4]
 800856e:	6013      	streq	r3, [r2, #0]
 8008570:	460c      	movne	r4, r1
 8008572:	e7eb      	b.n	800854c <_malloc_r+0x64>
 8008574:	460c      	mov	r4, r1
 8008576:	6849      	ldr	r1, [r1, #4]
 8008578:	e7cc      	b.n	8008514 <_malloc_r+0x2c>
 800857a:	1cc4      	adds	r4, r0, #3
 800857c:	f024 0403 	bic.w	r4, r4, #3
 8008580:	42a0      	cmp	r0, r4
 8008582:	d005      	beq.n	8008590 <_malloc_r+0xa8>
 8008584:	1a21      	subs	r1, r4, r0
 8008586:	4630      	mov	r0, r6
 8008588:	f000 f808 	bl	800859c <_sbrk_r>
 800858c:	3001      	adds	r0, #1
 800858e:	d0cf      	beq.n	8008530 <_malloc_r+0x48>
 8008590:	6025      	str	r5, [r4, #0]
 8008592:	e7db      	b.n	800854c <_malloc_r+0x64>
 8008594:	200000b8 	.word	0x200000b8
 8008598:	200000bc 	.word	0x200000bc

0800859c <_sbrk_r>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	4c06      	ldr	r4, [pc, #24]	; (80085b8 <_sbrk_r+0x1c>)
 80085a0:	2300      	movs	r3, #0
 80085a2:	4605      	mov	r5, r0
 80085a4:	4608      	mov	r0, r1
 80085a6:	6023      	str	r3, [r4, #0]
 80085a8:	f7ff fb9a 	bl	8007ce0 <_sbrk>
 80085ac:	1c43      	adds	r3, r0, #1
 80085ae:	d102      	bne.n	80085b6 <_sbrk_r+0x1a>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	b103      	cbz	r3, 80085b6 <_sbrk_r+0x1a>
 80085b4:	602b      	str	r3, [r5, #0]
 80085b6:	bd38      	pop	{r3, r4, r5, pc}
 80085b8:	20000910 	.word	0x20000910

080085bc <__malloc_lock>:
 80085bc:	4770      	bx	lr

080085be <__malloc_unlock>:
 80085be:	4770      	bx	lr

080085c0 <_init>:
 80085c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c2:	bf00      	nop
 80085c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c6:	bc08      	pop	{r3}
 80085c8:	469e      	mov	lr, r3
 80085ca:	4770      	bx	lr

080085cc <_fini>:
 80085cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ce:	bf00      	nop
 80085d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085d2:	bc08      	pop	{r3}
 80085d4:	469e      	mov	lr, r3
 80085d6:	4770      	bx	lr
